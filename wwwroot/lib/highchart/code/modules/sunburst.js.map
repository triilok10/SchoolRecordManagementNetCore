{"version":3,"sources":["<anon>"],"sourcesContent":["/**\n * @license Highcharts JS v11.4.3 (2024-05-22)\n *\n * (c) 2016-2024 Highsoft AS\n * Authors: Jon Arild Nygard\n *\n * License: www.highcharts.com/license\n */\n(function (factory) {\n    if (typeof module === 'object' && module.exports) {\n        factory['default'] = factory;\n        module.exports = factory;\n    } else if (typeof define === 'function' && define.amd) {\n        define('highcharts/modules/sunburst', ['highcharts'], function (Highcharts) {\n            factory(Highcharts);\n            factory.Highcharts = Highcharts;\n            return factory;\n        });\n    } else {\n        factory(typeof Highcharts !== 'undefined' ? Highcharts : undefined);\n    }\n}(function (Highcharts) {\n    'use strict';\n    var _modules = Highcharts ? Highcharts._modules : {};\n    function _registerModule(obj, path, args, fn) {\n        if (!obj.hasOwnProperty(path)) {\n            obj[path] = fn.apply(null, args);\n\n            if (typeof CustomEvent === 'function') {\n                window.dispatchEvent(new CustomEvent(\n                    'HighchartsModuleLoaded',\n                    { detail: { path: path, module: obj[path] } }\n                ));\n            }\n        }\n    }\n    _registerModule(_modules, 'Extensions/Breadcrumbs/BreadcrumbsDefaults.js', [], function () {\n        /* *\n         *\n         *  Highcharts Breadcrumbs module\n         *\n         *  Authors: Grzegorz Blachlinski, Karol Kolodziej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        /**\n         * @optionparent lang\n         */\n        const lang = {\n            /**\n             * @since   10.0.0\n             * @product highcharts\n             *\n             * @private\n             */\n            mainBreadcrumb: 'Main'\n        };\n        /**\n         * Options for breadcrumbs. Breadcrumbs general options are defined in\n         * `navigation.breadcrumbs`. Specific options for drilldown are set in\n         * `drilldown.breadcrumbs` and for tree-like series traversing, in\n         * `plotOptions[series].breadcrumbs`.\n         *\n         * @since        10.0.0\n         * @product      highcharts\n         * @optionparent navigation.breadcrumbs\n         */\n        const options = {\n            /**\n             * A collection of attributes for the buttons. The object takes SVG\n             * attributes like `fill`, `stroke`, `stroke-width`, as well as `style`,\n             * a collection of CSS properties for the text.\n             *\n             * The object can also be extended with states, so you can set\n             * presentational options for `hover`, `select` or `disabled` button\n             * states.\n             *\n             * @sample {highcharts} highcharts/breadcrumbs/single-button\n             *         Themed, single button\n             *\n             * @type    {Highcharts.SVGAttributes}\n             * @since   10.0.0\n             * @product highcharts\n             */\n            buttonTheme: {\n                /** @ignore */\n                fill: 'none',\n                /** @ignore */\n                height: 18,\n                /** @ignore */\n                padding: 2,\n                /** @ignore */\n                'stroke-width': 0,\n                /** @ignore */\n                zIndex: 7,\n                /** @ignore */\n                states: {\n                    select: {\n                        fill: 'none'\n                    }\n                },\n                style: {\n                    color: \"#334eff\" /* Palette.highlightColor80 */\n                }\n            },\n            /**\n             * The default padding for each button and separator in each direction.\n             *\n             * @type  {number}\n             * @since 10.0.0\n             */\n            buttonSpacing: 5,\n            /**\n             * Fires when clicking on the breadcrumbs button. Two arguments are\n             * passed to the function. First breadcrumb button as an SVG element.\n             * Second is the breadcrumbs class, containing reference to the chart,\n             * series etc.\n             *\n             * ```js\n             * click: function(button, breadcrumbs) {\n             *   console.log(button);\n             * }\n             * ```\n             *\n             * Return false to stop default buttons click action.\n             *\n             * @type      {Highcharts.BreadcrumbsClickCallbackFunction}\n             * @since     10.0.0\n             * @apioption navigation.breadcrumbs.events.click\n             */\n            /**\n             * When the breadcrumbs are floating, the plot area will not move to\n             * make space for it. By default, the chart will not make space for the\n             * buttons. This property won't work when positioned in the middle.\n             *\n             * @sample highcharts/breadcrumbs/single-button\n             *         Floating button\n             *\n             * @type  {boolean}\n             * @since 10.0.0\n             */\n            floating: false,\n            /**\n             * A format string for the breadcrumbs button. Variables are enclosed by\n             * curly brackets. Available values are passed in the declared point\n             * options.\n             *\n             * @type      {string|undefined}\n             * @since 10.0.0\n             * @default   undefined\n             * @sample {highcharts} highcharts/breadcrumbs/format Display custom\n             *          values in breadcrumb button.\n             */\n            format: void 0,\n            /**\n             * Callback function to format the breadcrumb text from scratch.\n             *\n             * @type      {Highcharts.BreadcrumbsFormatterCallbackFunction}\n             * @since     10.0.0\n             * @default   undefined\n             * @apioption navigation.breadcrumbs.formatter\n             */\n            /**\n             * What box to align the button to. Can be either `plotBox` or\n             * `spacingBox`.\n             *\n             * @type    {Highcharts.ButtonRelativeToValue}\n             * @default plotBox\n             * @since   10.0.0\n             * @product highcharts highmaps\n             */\n            relativeTo: 'plotBox',\n            /**\n             * Whether to reverse the order of buttons. This is common in Arabic\n             * and Hebrew.\n             *\n             * @sample {highcharts} highcharts/breadcrumbs/rtl\n             *         Breadcrumbs in RTL\n             *\n             * @type  {boolean}\n             * @since 10.2.0\n             */\n            rtl: false,\n            /**\n             * Positioning for the button row. The breadcrumbs buttons will be\n             * aligned properly for the default chart layout (title,  subtitle,\n             * legend, range selector) for the custom chart layout set the position\n             * properties.\n             *\n             * @sample  {highcharts} highcharts/breadcrumbs/single-button\n             *          Single, right aligned button\n             *\n             * @type    {Highcharts.BreadcrumbsAlignOptions}\n             * @since   10.0.0\n             * @product highcharts highmaps\n             */\n            position: {\n                /**\n                 * Horizontal alignment of the breadcrumbs buttons.\n                 *\n                 * @type {Highcharts.AlignValue}\n                 */\n                align: 'left',\n                /**\n                 * Vertical alignment of the breadcrumbs buttons.\n                 *\n                 * @type {Highcharts.VerticalAlignValue}\n                 */\n                verticalAlign: 'top',\n                /**\n                 * The X offset of the breadcrumbs button group.\n                 *\n                 * @type {number}\n                 */\n                x: 0,\n                /**\n                 * The Y offset of the breadcrumbs button group. When `undefined`,\n                 * and `floating` is `false`, the `y` position is adapted so that\n                 * the breadcrumbs are rendered outside the target area.\n                 *\n                 * @type {number|undefined}\n                 */\n                y: void 0\n            },\n            /**\n             * Options object for Breadcrumbs separator.\n             *\n             * @since 10.0.0\n             */\n            separator: {\n                /**\n                 * @type    {string}\n                 * @since   10.0.0\n                 * @product highcharts\n                 */\n                text: '/',\n                /**\n                 * CSS styles for the breadcrumbs separator.\n                 *\n                 * In styled mode, the breadcrumbs separators are styled by the\n                 * `.highcharts-separator` rule with its different states.\n                 *  @type  {Highcharts.CSSObject}\n                 *  @since 10.0.0\n                 */\n                style: {\n                    color: \"#666666\" /* Palette.neutralColor60 */,\n                    fontSize: '0.8em'\n                }\n            },\n            /**\n             * Show full path or only a single button.\n             *\n             * @sample {highcharts} highcharts/breadcrumbs/single-button\n             *         Single, styled button\n             *\n             * @type  {boolean}\n             * @since 10.0.0\n             */\n            showFullPath: true,\n            /**\n             * CSS styles for all breadcrumbs.\n             *\n             * In styled mode, the breadcrumbs buttons are styled by the\n             * `.highcharts-breadcrumbs-buttons .highcharts-button` rule with its\n             * different states.\n             *\n             * @type  {Highcharts.SVGAttributes}\n             * @since 10.0.0\n             */\n            style: {},\n            /**\n             * Whether to use HTML to render the breadcrumbs items texts.\n             *\n             * @type  {boolean}\n             * @since 10.0.0\n             */\n            useHTML: false,\n            /**\n             * The z index of the breadcrumbs group.\n             *\n             * @type  {number}\n             * @since 10.0.0\n             */\n            zIndex: 7\n        };\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const BreadcrumbsDefaults = {\n            lang,\n            options\n        };\n\n        return BreadcrumbsDefaults;\n    });\n    _registerModule(_modules, 'Extensions/Breadcrumbs/Breadcrumbs.js', [_modules['Extensions/Breadcrumbs/BreadcrumbsDefaults.js'], _modules['Core/Templating.js'], _modules['Core/Globals.js'], _modules['Core/Utilities.js']], function (BreadcrumbsDefaults, F, H, U) {\n        /* *\n         *\n         *  Highcharts Breadcrumbs module\n         *\n         *  Authors: Grzegorz Blachlinski, Karol Kolodziej\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { format } = F;\n        const { composed } = H;\n        const { addEvent, defined, extend, fireEvent, isString, merge, objectEach, pick, pushUnique } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Shift the drillUpButton to make the space for resetZoomButton, #8095.\n         * @private\n         */\n        function onChartAfterShowResetZoom() {\n            const chart = this;\n            if (chart.breadcrumbs) {\n                const bbox = chart.resetZoomButton &&\n                    chart.resetZoomButton.getBBox(), breadcrumbsOptions = chart.breadcrumbs.options;\n                if (bbox &&\n                    breadcrumbsOptions.position.align === 'right' &&\n                    breadcrumbsOptions.relativeTo === 'plotBox') {\n                    chart.breadcrumbs.alignBreadcrumbsGroup(-bbox.width - breadcrumbsOptions.buttonSpacing);\n                }\n            }\n        }\n        /**\n         * Remove resize/afterSetExtremes at chart destroy.\n         * @private\n         */\n        function onChartDestroy() {\n            if (this.breadcrumbs) {\n                this.breadcrumbs.destroy();\n                this.breadcrumbs = void 0;\n            }\n        }\n        /**\n         * Logic for making space for the buttons above the plot area\n         * @private\n         */\n        function onChartGetMargins() {\n            const breadcrumbs = this.breadcrumbs;\n            if (breadcrumbs &&\n                !breadcrumbs.options.floating &&\n                breadcrumbs.level) {\n                const breadcrumbsOptions = breadcrumbs.options, buttonTheme = breadcrumbsOptions.buttonTheme, breadcrumbsHeight = ((buttonTheme.height || 0) +\n                    2 * (buttonTheme.padding || 0) +\n                    breadcrumbsOptions.buttonSpacing), verticalAlign = breadcrumbsOptions.position.verticalAlign;\n                if (verticalAlign === 'bottom') {\n                    this.marginBottom = (this.marginBottom || 0) + breadcrumbsHeight;\n                    breadcrumbs.yOffset = breadcrumbsHeight;\n                }\n                else if (verticalAlign !== 'middle') {\n                    this.plotTop += breadcrumbsHeight;\n                    breadcrumbs.yOffset = -breadcrumbsHeight;\n                }\n                else {\n                    breadcrumbs.yOffset = void 0;\n                }\n            }\n        }\n        /**\n         * @private\n         */\n        function onChartRedraw() {\n            this.breadcrumbs && this.breadcrumbs.redraw();\n        }\n        /**\n         * After zooming out, shift the drillUpButton to the previous position, #8095.\n         * @private\n         */\n        function onChartSelection(event) {\n            if (event.resetSelection === true &&\n                this.breadcrumbs) {\n                this.breadcrumbs.alignBreadcrumbsGroup();\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * The Breadcrumbs class\n         *\n         * @private\n         * @class\n         * @name Highcharts.Breadcrumbs\n         *\n         * @param {Highcharts.Chart} chart\n         *        Chart object\n         * @param {Highcharts.Options} userOptions\n         *        User options\n         */\n        class Breadcrumbs {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            static compose(ChartClass, highchartsDefaultOptions) {\n                if (pushUnique(composed, 'Breadcrumbs')) {\n                    addEvent(ChartClass, 'destroy', onChartDestroy);\n                    addEvent(ChartClass, 'afterShowResetZoom', onChartAfterShowResetZoom);\n                    addEvent(ChartClass, 'getMargins', onChartGetMargins);\n                    addEvent(ChartClass, 'redraw', onChartRedraw);\n                    addEvent(ChartClass, 'selection', onChartSelection);\n                    // Add language support.\n                    extend(highchartsDefaultOptions.lang, BreadcrumbsDefaults.lang);\n                }\n            }\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(chart, userOptions) {\n                this.elementList = {};\n                this.isDirty = true;\n                this.level = 0;\n                this.list = [];\n                const chartOptions = merge(chart.options.drilldown &&\n                    chart.options.drilldown.drillUpButton, Breadcrumbs.defaultOptions, chart.options.navigation && chart.options.navigation.breadcrumbs, userOptions);\n                this.chart = chart;\n                this.options = chartOptions || {};\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * Update Breadcrumbs properties, like level and list.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#updateProperties\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            updateProperties(list) {\n                this.setList(list);\n                this.setLevel();\n                this.isDirty = true;\n            }\n            /**\n             * Set breadcrumbs list.\n             * @function Highcharts.Breadcrumbs#setList\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.BreadcrumbsOptions} list\n             *        Breadcrumbs list.\n             */\n            setList(list) {\n                this.list = list;\n            }\n            /**\n             * Calculate level on which chart currently is.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#setLevel\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            setLevel() {\n                this.level = this.list.length && this.list.length - 1;\n            }\n            /**\n             * Get Breadcrumbs level\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#getLevel\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            getLevel() {\n                return this.level;\n            }\n            /**\n             * Default button text formatter.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#getButtonText\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.Breadcrumbs} breadcrumb\n             *        Breadcrumb.\n             * @return {string}\n             *         Formatted text.\n             */\n            getButtonText(breadcrumb) {\n                const breadcrumbs = this, chart = breadcrumbs.chart, breadcrumbsOptions = breadcrumbs.options, lang = chart.options.lang, textFormat = pick(breadcrumbsOptions.format, breadcrumbsOptions.showFullPath ?\n                    '{level.name}' : '← {level.name}'), defaultText = lang && pick(lang.drillUpText, lang.mainBreadcrumb);\n                let returnText = breadcrumbsOptions.formatter &&\n                    breadcrumbsOptions.formatter(breadcrumb) ||\n                    format(textFormat, { level: breadcrumb.levelOptions }, chart) || '';\n                if (((isString(returnText) &&\n                    !returnText.length) ||\n                    returnText === '← ') &&\n                    defined(defaultText)) {\n                    returnText = !breadcrumbsOptions.showFullPath ?\n                        '← ' + defaultText :\n                        defaultText;\n                }\n                return returnText;\n            }\n            /**\n             * Redraw.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#redraw\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            redraw() {\n                if (this.isDirty) {\n                    this.render();\n                }\n                if (this.group) {\n                    this.group.align();\n                }\n                this.isDirty = false;\n            }\n            /**\n             * Create a group, then draw breadcrumbs together with the separators.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#render\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            render() {\n                const breadcrumbs = this, chart = breadcrumbs.chart, breadcrumbsOptions = breadcrumbs.options;\n                // A main group for the breadcrumbs.\n                if (!breadcrumbs.group && breadcrumbsOptions) {\n                    breadcrumbs.group = chart.renderer\n                        .g('breadcrumbs-group')\n                        .addClass('highcharts-no-tooltip highcharts-breadcrumbs')\n                        .attr({\n                        zIndex: breadcrumbsOptions.zIndex\n                    })\n                        .add();\n                }\n                // Draw breadcrumbs.\n                if (breadcrumbsOptions.showFullPath) {\n                    this.renderFullPathButtons();\n                }\n                else {\n                    this.renderSingleButton();\n                }\n                this.alignBreadcrumbsGroup();\n            }\n            /**\n             * Draw breadcrumbs together with the separators.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#renderFullPathButtons\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            renderFullPathButtons() {\n                // Make sure that only one type of button is visible.\n                this.destroySingleButton();\n                this.resetElementListState();\n                this.updateListElements();\n                this.destroyListElements();\n            }\n            /**\n             * Render Single button - when showFullPath is not used. The button is\n             * similar to the old drillUpButton\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#renderSingleButton\n             * @param {Highcharts.Breadcrumbs} this Breadcrumbs class.\n             */\n            renderSingleButton() {\n                const breadcrumbs = this, chart = breadcrumbs.chart, list = breadcrumbs.list, breadcrumbsOptions = breadcrumbs.options, buttonSpacing = breadcrumbsOptions.buttonSpacing;\n                // Make sure that only one type of button is visible.\n                this.destroyListElements();\n                // Draw breadcrumbs. Initial position for calculating the breadcrumbs\n                // group.\n                const posX = breadcrumbs.group ?\n                    breadcrumbs.group.getBBox().width :\n                    buttonSpacing, posY = buttonSpacing;\n                const previousBreadcrumb = list[list.length - 2];\n                if (!chart.drillUpButton && (this.level > 0)) {\n                    chart.drillUpButton = breadcrumbs.renderButton(previousBreadcrumb, posX, posY);\n                }\n                else if (chart.drillUpButton) {\n                    if (this.level > 0) {\n                        // Update button.\n                        this.updateSingleButton();\n                    }\n                    else {\n                        this.destroySingleButton();\n                    }\n                }\n            }\n            /**\n             * Update group position based on align and it's width.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#renderSingleButton\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            alignBreadcrumbsGroup(xOffset) {\n                const breadcrumbs = this;\n                if (breadcrumbs.group) {\n                    const breadcrumbsOptions = breadcrumbs.options, buttonTheme = breadcrumbsOptions.buttonTheme, positionOptions = breadcrumbsOptions.position, alignTo = (breadcrumbsOptions.relativeTo === 'chart' ||\n                        breadcrumbsOptions.relativeTo === 'spacingBox' ?\n                        void 0 :\n                        'plotBox'), bBox = breadcrumbs.group.getBBox(), additionalSpace = 2 * (buttonTheme.padding || 0) +\n                        breadcrumbsOptions.buttonSpacing;\n                    // Store positionOptions\n                    positionOptions.width = bBox.width + additionalSpace;\n                    positionOptions.height = bBox.height + additionalSpace;\n                    const newPositions = merge(positionOptions);\n                    // Add x offset if specified.\n                    if (xOffset) {\n                        newPositions.x += xOffset;\n                    }\n                    if (breadcrumbs.options.rtl) {\n                        newPositions.x += positionOptions.width;\n                    }\n                    newPositions.y = pick(newPositions.y, this.yOffset, 0);\n                    breadcrumbs.group.align(newPositions, true, alignTo);\n                }\n            }\n            /**\n             * Render a button.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#renderButton\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.Breadcrumbs} breadcrumb\n             *        Current breadcrumb\n             * @param {Highcharts.Breadcrumbs} posX\n             *        Initial horizontal position\n             * @param {Highcharts.Breadcrumbs} posY\n             *        Initial vertical position\n             * @return {SVGElement|void}\n             *        Returns the SVG button\n             */\n            renderButton(breadcrumb, posX, posY) {\n                const breadcrumbs = this, chart = this.chart, breadcrumbsOptions = breadcrumbs.options, buttonTheme = merge(breadcrumbsOptions.buttonTheme);\n                const button = chart.renderer\n                    .button(breadcrumbs.getButtonText(breadcrumb), posX, posY, function (e) {\n                    // Extract events from button object and call\n                    const buttonEvents = breadcrumbsOptions.events &&\n                        breadcrumbsOptions.events.click;\n                    let callDefaultEvent;\n                    if (buttonEvents) {\n                        callDefaultEvent = buttonEvents.call(breadcrumbs, e, breadcrumb);\n                    }\n                    // (difference in behaviour of showFullPath and drillUp)\n                    if (callDefaultEvent !== false) {\n                        // For single button we are not going to the button\n                        // level, but the one level up\n                        if (!breadcrumbsOptions.showFullPath) {\n                            e.newLevel = breadcrumbs.level - 1;\n                        }\n                        else {\n                            e.newLevel = breadcrumb.level;\n                        }\n                        fireEvent(breadcrumbs, 'up', e);\n                    }\n                }, buttonTheme)\n                    .addClass('highcharts-breadcrumbs-button')\n                    .add(breadcrumbs.group);\n                if (!chart.styledMode) {\n                    button.attr(breadcrumbsOptions.style);\n                }\n                return button;\n            }\n            /**\n             * Render a separator.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#renderSeparator\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.Breadcrumbs} posX\n             *        Initial horizontal position\n             * @param {Highcharts.Breadcrumbs} posY\n             *        Initial vertical position\n             * @return {Highcharts.SVGElement}\n             *        Returns the SVG button\n             */\n            renderSeparator(posX, posY) {\n                const breadcrumbs = this, chart = this.chart, breadcrumbsOptions = breadcrumbs.options, separatorOptions = breadcrumbsOptions.separator;\n                const separator = chart.renderer\n                    .label(separatorOptions.text, posX, posY, void 0, void 0, void 0, false)\n                    .addClass('highcharts-breadcrumbs-separator')\n                    .add(breadcrumbs.group);\n                if (!chart.styledMode) {\n                    separator.css(separatorOptions.style);\n                }\n                return separator;\n            }\n            /**\n             * Update.\n             * @function Highcharts.Breadcrumbs#update\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             * @param {Highcharts.BreadcrumbsOptions} options\n             *        Breadcrumbs class.\n             * @param {boolean} redraw\n             *        Redraw flag\n             */\n            update(options) {\n                merge(true, this.options, options);\n                this.destroy();\n                this.isDirty = true;\n            }\n            /**\n             * Update button text when the showFullPath set to false.\n             * @function Highcharts.Breadcrumbs#updateSingleButton\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            updateSingleButton() {\n                const chart = this.chart, currentBreadcrumb = this.list[this.level - 1];\n                if (chart.drillUpButton) {\n                    chart.drillUpButton.attr({\n                        text: this.getButtonText(currentBreadcrumb)\n                    });\n                }\n            }\n            /**\n             * Destroy the chosen breadcrumbs group\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#destroy\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            destroy() {\n                this.destroySingleButton();\n                // Destroy elements one by one. It's necessary because\n                // g().destroy() does not remove added HTML\n                this.destroyListElements(true);\n                // Then, destroy the group itself.\n                if (this.group) {\n                    this.group.destroy();\n                }\n                this.group = void 0;\n            }\n            /**\n             * Destroy the elements' buttons and separators.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#destroyListElements\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            destroyListElements(force) {\n                const elementList = this.elementList;\n                objectEach(elementList, (element, level) => {\n                    if (force ||\n                        !elementList[level].updated) {\n                        element = elementList[level];\n                        element.button && element.button.destroy();\n                        element.separator && element.separator.destroy();\n                        delete element.button;\n                        delete element.separator;\n                        delete elementList[level];\n                    }\n                });\n                if (force) {\n                    this.elementList = {};\n                }\n            }\n            /**\n             * Destroy the single button if exists.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#destroySingleButton\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            destroySingleButton() {\n                if (this.chart.drillUpButton) {\n                    this.chart.drillUpButton.destroy();\n                    this.chart.drillUpButton = void 0;\n                }\n            }\n            /**\n             * Reset state for all buttons in elementList.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#resetElementListState\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            resetElementListState() {\n                objectEach(this.elementList, (element) => {\n                    element.updated = false;\n                });\n            }\n            /**\n             * Update rendered elements inside the elementList.\n             *\n             * @requires  modules/breadcrumbs\n             *\n             * @function Highcharts.Breadcrumbs#updateListElements\n             *\n             * @param {Highcharts.Breadcrumbs} this\n             *        Breadcrumbs class.\n             */\n            updateListElements() {\n                const breadcrumbs = this, elementList = breadcrumbs.elementList, buttonSpacing = breadcrumbs.options.buttonSpacing, posY = buttonSpacing, list = breadcrumbs.list, rtl = breadcrumbs.options.rtl, rtlFactor = rtl ? -1 : 1, updateXPosition = function (element, spacing) {\n                    return rtlFactor * element.getBBox().width +\n                        rtlFactor * spacing;\n                }, adjustToRTL = function (element, posX, posY) {\n                    element.translate(posX - element.getBBox().width, posY);\n                };\n                // Initial position for calculating the breadcrumbs group.\n                let posX = breadcrumbs.group ?\n                    updateXPosition(breadcrumbs.group, buttonSpacing) :\n                    buttonSpacing, currentBreadcrumb, breadcrumb;\n                for (let i = 0, iEnd = list.length; i < iEnd; ++i) {\n                    const isLast = i === iEnd - 1;\n                    let button, separator;\n                    breadcrumb = list[i];\n                    if (elementList[breadcrumb.level]) {\n                        currentBreadcrumb = elementList[breadcrumb.level];\n                        button = currentBreadcrumb.button;\n                        // Render a separator if it was not created before.\n                        if (!currentBreadcrumb.separator &&\n                            !isLast) {\n                            // Add spacing for the next separator\n                            posX += rtlFactor * buttonSpacing;\n                            currentBreadcrumb.separator =\n                                breadcrumbs.renderSeparator(posX, posY);\n                            if (rtl) {\n                                adjustToRTL(currentBreadcrumb.separator, posX, posY);\n                            }\n                            posX += updateXPosition(currentBreadcrumb.separator, buttonSpacing);\n                        }\n                        else if (currentBreadcrumb.separator &&\n                            isLast) {\n                            currentBreadcrumb.separator.destroy();\n                            delete currentBreadcrumb.separator;\n                        }\n                        elementList[breadcrumb.level].updated = true;\n                    }\n                    else {\n                        // Render a button.\n                        button = breadcrumbs.renderButton(breadcrumb, posX, posY);\n                        if (rtl) {\n                            adjustToRTL(button, posX, posY);\n                        }\n                        posX += updateXPosition(button, buttonSpacing);\n                        // Render a separator.\n                        if (!isLast) {\n                            separator = breadcrumbs.renderSeparator(posX, posY);\n                            if (rtl) {\n                                adjustToRTL(separator, posX, posY);\n                            }\n                            posX += updateXPosition(separator, buttonSpacing);\n                        }\n                        elementList[breadcrumb.level] = {\n                            button,\n                            separator,\n                            updated: true\n                        };\n                    }\n                    if (button) {\n                        button.setState(isLast ? 2 : 0);\n                    }\n                }\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        Breadcrumbs.defaultOptions = BreadcrumbsDefaults.options;\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        /* *\n         *\n         *  API Declarations\n         *\n         * */\n        /**\n         * Callback function to react on button clicks.\n         *\n         * @callback Highcharts.BreadcrumbsClickCallbackFunction\n         *\n         * @param {Highcharts.Event} event\n         * Event.\n         *\n         * @param {Highcharts.BreadcrumbOptions} options\n         * Breadcrumb options.\n         *\n         * @param {global.Event} e\n         * Event arguments.\n         */\n        /**\n         * Callback function to format the breadcrumb text from scratch.\n         *\n         * @callback Highcharts.BreadcrumbsFormatterCallbackFunction\n         *\n         * @param {Highcharts.Event} event\n         * Event.\n         *\n         * @param {Highcharts.BreadcrumbOptions} options\n         * Breadcrumb options.\n         *\n         * @return {string}\n         * Formatted text or false\n         */\n        /**\n         * Options for the one breadcrumb.\n         *\n         * @interface Highcharts.BreadcrumbOptions\n         */\n        /**\n         * Level connected to a specific breadcrumb.\n         * @name Highcharts.BreadcrumbOptions#level\n         * @type {number}\n         */\n        /**\n         * Options for series or point connected to a specific breadcrumb.\n         * @name Highcharts.BreadcrumbOptions#levelOptions\n         * @type {SeriesOptions|PointOptionsObject}\n         */\n        /**\n         * Options for aligning breadcrumbs group.\n         *\n         * @interface Highcharts.BreadcrumbsAlignOptions\n         */\n        /**\n         * Align of a Breadcrumb group.\n         * @default right\n         * @name Highcharts.BreadcrumbsAlignOptions#align\n         * @type {AlignValue}\n         */\n        /**\n         * Vertical align of a Breadcrumb group.\n         * @default top\n         * @name Highcharts.BreadcrumbsAlignOptions#verticalAlign\n         * @type {VerticalAlignValue}\n         */\n        /**\n         * X offset of a Breadcrumbs group.\n         * @name Highcharts.BreadcrumbsAlignOptions#x\n         * @type {number}\n         */\n        /**\n         * Y offset of a Breadcrumbs group.\n         * @name Highcharts.BreadcrumbsAlignOptions#y\n         * @type {number}\n         */\n        /**\n         * Options for all breadcrumbs.\n         *\n         * @interface Highcharts.BreadcrumbsOptions\n         */\n        /**\n         * Button theme.\n         * @name Highcharts.BreadcrumbsOptions#buttonTheme\n         * @type { SVGAttributes | undefined }\n         */\n        (''); // Keeps doclets above in JS file\n\n        return Breadcrumbs;\n    });\n    _registerModule(_modules, 'Series/ColorMapComposition.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Renderer/SVG/SVGElement.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, SVGElement, U) {\n        /* *\n         *\n         *  (c) 2010-2024 Torstein Honsi\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { column: { prototype: columnProto } } = SeriesRegistry.seriesTypes;\n        const { addEvent, defined } = U;\n        /* *\n         *\n         *  Composition\n         *\n         * */\n        var ColorMapComposition;\n        (function (ColorMapComposition) {\n            /* *\n             *\n             *  Constants\n             *\n             * */\n            ColorMapComposition.pointMembers = {\n                dataLabelOnNull: true,\n                moveToTopOnHover: true,\n                isValid: pointIsValid\n            };\n            ColorMapComposition.seriesMembers = {\n                colorKey: 'value',\n                axisTypes: ['xAxis', 'yAxis', 'colorAxis'],\n                parallelArrays: ['x', 'y', 'value'],\n                pointArrayMap: ['value'],\n                trackerGroups: ['group', 'markerGroup', 'dataLabelsGroup'],\n                colorAttribs: seriesColorAttribs,\n                pointAttribs: columnProto.pointAttribs\n            };\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @private\n             */\n            function compose(SeriesClass) {\n                const PointClass = SeriesClass.prototype.pointClass;\n                addEvent(PointClass, 'afterSetState', onPointAfterSetState);\n                return SeriesClass;\n            }\n            ColorMapComposition.compose = compose;\n            /**\n             * Move points to the top of the z-index order when hovered.\n             * @private\n             */\n            function onPointAfterSetState(e) {\n                const point = this, series = point.series, renderer = series.chart.renderer;\n                if (point.moveToTopOnHover && point.graphic) {\n                    if (!series.stateMarkerGraphic) {\n                        // Create a `use` element and add it to the end of the group,\n                        // which would make it appear on top of the other elements. This\n                        // deals with z-index without reordering DOM elements (#13049).\n                        series.stateMarkerGraphic = new SVGElement(renderer, 'use')\n                            .css({\n                            pointerEvents: 'none'\n                        })\n                            .add(point.graphic.parentGroup);\n                    }\n                    if (e?.state === 'hover') {\n                        // Give the graphic DOM element the same id as the Point\n                        // instance\n                        point.graphic.attr({\n                            id: this.id\n                        });\n                        series.stateMarkerGraphic.attr({\n                            href: `${renderer.url}#${this.id}`,\n                            visibility: 'visible'\n                        });\n                    }\n                    else {\n                        series.stateMarkerGraphic.attr({\n                            href: ''\n                        });\n                    }\n                }\n            }\n            /**\n             * Color points have a value option that determines whether or not it is\n             * a null point\n             * @private\n             */\n            function pointIsValid() {\n                return (this.value !== null &&\n                    this.value !== Infinity &&\n                    this.value !== -Infinity &&\n                    // Undefined is allowed, but NaN is not (#17279)\n                    (this.value === void 0 || !isNaN(this.value)));\n            }\n            /**\n             * Get the color attributes to apply on the graphic\n             * @private\n             * @function Highcharts.colorMapSeriesMixin.colorAttribs\n             * @param {Highcharts.Point} point\n             * @return {Highcharts.SVGAttributes}\n             *         The SVG attributes\n             */\n            function seriesColorAttribs(point) {\n                const ret = {};\n                if (defined(point.color) &&\n                    (!point.state || point.state === 'normal') // #15746\n                ) {\n                    ret[this.colorProp || 'fill'] = point.color;\n                }\n                return ret;\n            }\n        })(ColorMapComposition || (ColorMapComposition = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return ColorMapComposition;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapAlgorithmGroup.js', [], function () {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class TreemapAlgorithmGroup {\n            /* *\n             *\n             *  Constructor\n             *\n             * */\n            constructor(h, w, d, p) {\n                this.height = h;\n                this.width = w;\n                this.plot = p;\n                this.direction = d;\n                this.startDirection = d;\n                this.total = 0;\n                this.nW = 0;\n                this.lW = 0;\n                this.nH = 0;\n                this.lH = 0;\n                this.elArr = [];\n                this.lP = {\n                    total: 0,\n                    lH: 0,\n                    nH: 0,\n                    lW: 0,\n                    nW: 0,\n                    nR: 0,\n                    lR: 0,\n                    aspectRatio: function (w, h) {\n                        return Math.max((w / h), (h / w));\n                    }\n                };\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            addElement(el) {\n                this.lP.total = this.elArr[this.elArr.length - 1];\n                this.total = this.total + el;\n                if (this.direction === 0) {\n                    // Calculate last point old aspect ratio\n                    this.lW = this.nW;\n                    this.lP.lH = this.lP.total / this.lW;\n                    this.lP.lR = this.lP.aspectRatio(this.lW, this.lP.lH);\n                    // Calculate last point new aspect ratio\n                    this.nW = this.total / this.height;\n                    this.lP.nH = this.lP.total / this.nW;\n                    this.lP.nR = this.lP.aspectRatio(this.nW, this.lP.nH);\n                }\n                else {\n                    // Calculate last point old aspect ratio\n                    this.lH = this.nH;\n                    this.lP.lW = this.lP.total / this.lH;\n                    this.lP.lR = this.lP.aspectRatio(this.lP.lW, this.lH);\n                    // Calculate last point new aspect ratio\n                    this.nH = this.total / this.width;\n                    this.lP.nW = this.lP.total / this.nH;\n                    this.lP.nR = this.lP.aspectRatio(this.lP.nW, this.nH);\n                }\n                this.elArr.push(el);\n            }\n            reset() {\n                this.nW = 0;\n                this.lW = 0;\n                this.elArr = [];\n                this.total = 0;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapAlgorithmGroup;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapNode.js', [], function () {\n        /* *\n         *\n         *  (c) 2010-2024 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class TreemapNode {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                this.childrenTotal = 0;\n                this.visible = false;\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            init(id, i, children, height, level, series, parent) {\n                this.id = id;\n                this.i = i;\n                this.children = children;\n                this.height = height;\n                this.level = level;\n                this.series = series;\n                this.parent = parent;\n                return this;\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapNode;\n    });\n    _registerModule(_modules, 'Series/DrawPointUtilities.js', [], function () {\n        /* *\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * Handles the drawing of a component.\n         * Can be used for any type of component that reserves the graphic property,\n         * and provides a shouldDraw on its context.\n         *\n         * @private\n         *\n         * @todo add type checking.\n         * @todo export this function to enable usage\n         */\n        function draw(point, params) {\n            const { animatableAttribs, onComplete, css, renderer } = params;\n            const animation = (point.series && point.series.chart.hasRendered) ?\n                // Chart-level animation on updates\n                void 0 :\n                // Series-level animation on new points\n                (point.series &&\n                    point.series.options.animation);\n            let graphic = point.graphic;\n            params.attribs = {\n                ...params.attribs,\n                'class': point.getClassName()\n            } || {};\n            if ((point.shouldDraw())) {\n                if (!graphic) {\n                    if (params.shapeType === 'text') {\n                        graphic = renderer.text();\n                    }\n                    else if (params.shapeType === 'image') {\n                        graphic = renderer.image(params.imageUrl || '')\n                            .attr(params.shapeArgs || {});\n                    }\n                    else {\n                        graphic = renderer[params.shapeType](params.shapeArgs || {});\n                    }\n                    point.graphic = graphic;\n                    graphic.add(params.group);\n                }\n                if (css) {\n                    graphic.css(css);\n                }\n                graphic\n                    .attr(params.attribs)\n                    .animate(animatableAttribs, params.isNew ? false : animation, onComplete);\n            }\n            else if (graphic) {\n                const destroy = () => {\n                    point.graphic = graphic = (graphic && graphic.destroy());\n                    if (typeof onComplete === 'function') {\n                        onComplete();\n                    }\n                };\n                // Animate only runs complete callback if something was animated.\n                if (Object.keys(animatableAttribs).length) {\n                    graphic.animate(animatableAttribs, void 0, () => destroy());\n                }\n                else {\n                    destroy();\n                }\n            }\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const DrawPointUtilities = {\n            draw\n        };\n\n        return DrawPointUtilities;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapPoint.js', [_modules['Series/DrawPointUtilities.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (DPU, SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { pie: { prototype: { pointClass: PiePoint } }, scatter: { prototype: { pointClass: ScatterPoint } } } = SeriesRegistry.seriesTypes;\n        const { extend, isNumber, pick } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class TreemapPoint extends ScatterPoint {\n            constructor() {\n                /* *\n                 *\n                 *  Properties\n                 *\n                 * */\n                super(...arguments);\n                this.shapeType = 'rect';\n            }\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            draw(params) {\n                DPU.draw(this, params);\n            }\n            getClassName() {\n                const series = this.series, options = series.options;\n                let className = super.getClassName();\n                // Above the current level\n                if (this.node.level <= series.nodeMap[series.rootNode].level) {\n                    className += ' highcharts-above-level';\n                }\n                else if (!this.node.isLeaf &&\n                    !pick(options.interactByLeaf, !options.allowTraversingTree)) {\n                    className += ' highcharts-internal-node-interactive';\n                }\n                else if (!this.node.isLeaf) {\n                    className += ' highcharts-internal-node';\n                }\n                return className;\n            }\n            /**\n             * A tree point is valid if it has han id too, assume it may be a parent\n             * item.\n             *\n             * @private\n             * @function Highcharts.Point#isValid\n             */\n            isValid() {\n                return Boolean(this.id || isNumber(this.value));\n            }\n            setState(state) {\n                super.setState.apply(this, arguments);\n                // Graphic does not exist when point is not visible.\n                if (this.graphic) {\n                    this.graphic.attr({\n                        zIndex: state === 'hover' ? 1 : 0\n                    });\n                }\n            }\n            shouldDraw() {\n                return isNumber(this.plotY) && this.y !== null;\n            }\n        }\n        extend(TreemapPoint.prototype, {\n            setVisible: PiePoint.prototype.setVisible\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapPoint;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapSeriesDefaults.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { isString } = U;\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A treemap displays hierarchical data using nested rectangles. The data\n         * can be laid out in varying ways depending on options.\n         *\n         * @sample highcharts/demo/treemap-large-dataset/\n         *         Treemap\n         *\n         * @extends      plotOptions.scatter\n         * @excluding    cluster, connectEnds, connectNulls, dataSorting, dragDrop, jitter, marker\n         * @product      highcharts\n         * @requires     modules/treemap\n         * @optionparent plotOptions.treemap\n         */\n        const TreemapSeriesDefaults = {\n            /**\n             * When enabled the user can click on a point which is a parent and\n             * zoom in on its children. Deprecated and replaced by\n             * [allowTraversingTree](#plotOptions.treemap.allowTraversingTree).\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-allowdrilltonode/\n             *         Enabled\n             *\n             * @deprecated\n             * @type      {boolean}\n             * @default   false\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.allowDrillToNode\n             */\n            /**\n             * When enabled the user can click on a point which is a parent and\n             * zoom in on its children.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-allowtraversingtree/\n             *         Enabled\n             *\n             * @since     7.0.3\n             * @product   highcharts\n             */\n            allowTraversingTree: false,\n            animationLimit: 250,\n            /**\n             * The border radius for each treemap item.\n             */\n            borderRadius: 0,\n            /**\n             * Options for the breadcrumbs, the navigation at the top leading the\n             * way up through the traversed levels.\n             *\n             *\n             * @since 10.0.0\n             * @product   highcharts\n             * @extends   navigation.breadcrumbs\n             * @apioption plotOptions.treemap.breadcrumbs\n             */\n            /**\n             * When the series contains less points than the crop threshold, all\n             * points are drawn, event if the points fall outside the visible plot\n             * area at the current zoom. The advantage of drawing all points\n             * (including markers and columns), is that animation is performed on\n             * updates. On the other hand, when the series contains more points than\n             * the crop threshold, the series data is cropped to only contain points\n             * that fall within the plot area. The advantage of cropping away\n             * invisible points is to increase performance on large series.\n             *\n             * @type      {number}\n             * @default   300\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.cropThreshold\n             */\n            /**\n             * Fires on a request for change of root node for the tree, before the\n             * update is made. An event object is passed to the function, containing\n             * additional properties `newRootId`, `previousRootId`, `redraw` and\n             * `trigger`.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-events-setrootnode/\n             *         Alert update information on setRootNode event.\n             *\n             * @type {Function}\n             * @default undefined\n             * @since 7.0.3\n             * @product highcharts\n             * @apioption plotOptions.treemap.events.setRootNode\n             */\n            /**\n             * This option decides if the user can interact with the parent nodes\n             * or just the leaf nodes. When this option is undefined, it will be\n             * true by default. However when allowTraversingTree is true, then it\n             * will be false by default.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-interactbyleaf-false/\n             *         False\n             * @sample {highcharts} highcharts/plotoptions/treemap-interactbyleaf-true-and-allowtraversingtree/\n             *         InteractByLeaf and allowTraversingTree is true\n             *\n             * @type      {boolean}\n             * @since     4.1.2\n             * @product   highcharts\n             * @apioption plotOptions.treemap.interactByLeaf\n             */\n            /**\n             * The sort index of the point inside the treemap level.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-sortindex/\n             *         Sort by years\n             *\n             * @type      {number}\n             * @since     4.1.10\n             * @product   highcharts\n             * @apioption plotOptions.treemap.sortIndex\n             */\n            /**\n             * A series specific or series type specific color set to apply instead\n             * of the global [colors](#colors) when\n             * [colorByPoint](#plotOptions.treemap.colorByPoint) is true.\n             *\n             * @type      {Array<Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject>}\n             * @since     3.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.colors\n             */\n            /**\n             * Whether to display this series type or specific series item in the\n             * legend.\n             */\n            showInLegend: false,\n            /**\n             * @ignore-option\n             */\n            marker: void 0,\n            /**\n             * When using automatic point colors pulled from the `options.colors`\n             * collection, this option determines whether the chart should receive\n             * one color per series or one color per point.\n             *\n             * @see [series colors](#plotOptions.treemap.colors)\n             *\n             * @since     2.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.colorByPoint\n             */\n            colorByPoint: false,\n            /**\n             * @since 4.1.0\n             */\n            dataLabels: {\n                defer: false,\n                enabled: true,\n                formatter: function () {\n                    const point = this && this.point ?\n                        this.point :\n                        {}, name = isString(point.name) ? point.name : '';\n                    return name;\n                },\n                inside: true,\n                verticalAlign: 'middle'\n            },\n            tooltip: {\n                headerFormat: '',\n                pointFormat: '<b>{point.name}</b>: {point.value}<br/>'\n            },\n            /**\n             * Whether to ignore hidden points when the layout algorithm runs.\n             * If `false`, hidden points will leave open spaces.\n             *\n             * @since 5.0.8\n             */\n            ignoreHiddenPoint: true,\n            /**\n             * This option decides which algorithm is used for setting position\n             * and dimensions of the points.\n             *\n             * @see [How to write your own algorithm](https://www.highcharts.com/docs/chart-and-series-types/treemap)\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-sliceanddice/\n             *         SliceAndDice by default\n             * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-stripes/\n             *         Stripes\n             * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-squarified/\n             *         Squarified\n             * @sample {highcharts} highcharts/plotoptions/treemap-layoutalgorithm-strip/\n             *         Strip\n             *\n             * @since      4.1.0\n             * @validvalue [\"sliceAndDice\", \"stripes\", \"squarified\", \"strip\"]\n             */\n            layoutAlgorithm: 'sliceAndDice',\n            /**\n             * Defines which direction the layout algorithm will start drawing.\n             *\n             * @since       4.1.0\n             * @validvalue [\"vertical\", \"horizontal\"]\n             */\n            layoutStartingDirection: 'vertical',\n            /**\n             * Enabling this option will make the treemap alternate the drawing\n             * direction between vertical and horizontal. The next levels starting\n             * direction will always be the opposite of the previous.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-alternatestartingdirection-true/\n             *         Enabled\n             *\n             * @since 4.1.0\n             */\n            alternateStartingDirection: false,\n            /**\n             * Used together with the levels and allowTraversingTree options. When\n             * set to false the first level visible to be level one, which is\n             * dynamic when traversing the tree. Otherwise the level will be the\n             * same as the tree structure.\n             *\n             * @since 4.1.0\n             */\n            levelIsConstant: true,\n            /**\n             * Options for the button appearing when traversing down in a treemap.\n             *\n             * Since v9.3.3 the `traverseUpButton` is replaced by `breadcrumbs`.\n             *\n             * @deprecated\n             */\n            traverseUpButton: {\n                /**\n                 * The position of the button.\n                 */\n                position: {\n                    /**\n                     * Vertical alignment of the button.\n                     *\n                     * @type      {Highcharts.VerticalAlignValue}\n                     * @default   top\n                     * @product   highcharts\n                     * @apioption plotOptions.treemap.traverseUpButton.position.verticalAlign\n                     */\n                    /**\n                     * Horizontal alignment of the button.\n                     *\n                     * @type {Highcharts.AlignValue}\n                     */\n                    align: 'right',\n                    /**\n                     * Horizontal offset of the button.\n                     */\n                    x: -10,\n                    /**\n                     * Vertical offset of the button.\n                     */\n                    y: 10\n                }\n            },\n            /**\n             * Set options on specific levels. Takes precedence over series options,\n             * but not point options.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-levels/\n             *         Styling dataLabels and borders\n             * @sample {highcharts} highcharts/demo/treemap-with-levels/\n             *         Different layoutAlgorithm\n             *\n             * @type      {Array<*>}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels\n             */\n            /**\n             * Can set a `borderColor` on all points which lies on the same level.\n             *\n             * @type      {Highcharts.ColorString}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.borderColor\n             */\n            /**\n             * Set the dash style of the border of all the point which lies on the\n             * level. See\n             * [plotOptions.scatter.dashStyle](#plotoptions.scatter.dashstyle)\n             * for possible options.\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.borderDashStyle\n             */\n            /**\n             * Can set the borderWidth on all points which lies on the same level.\n             *\n             * @type      {number}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.borderWidth\n             */\n            /**\n             * Can set a color on all points which lies on the same level.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.color\n             */\n            /**\n             * A configuration object to define how the color of a child varies from\n             * the parent's color. The variation is distributed among the children\n             * of node. For example when setting brightness, the brightness change\n             * will range from the parent's original brightness on the first child,\n             * to the amount set in the `to` setting on the last node. This allows a\n             * gradient-like color scheme that sets children out from each other\n             * while highlighting the grouping on treemaps and sectors on sunburst\n             * charts.\n             *\n             * @sample highcharts/demo/sunburst/\n             *         Sunburst with color variation\n             *\n             * @sample highcharts/series-treegraph/color-variation\n             *         Treegraph nodes with color variation\n             *\n             * @since     6.0.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.colorVariation\n             */\n            /**\n             * The key of a color variation. Currently supports `brightness` only.\n             *\n             * @type       {string}\n             * @since      6.0.0\n             * @product    highcharts\n             * @validvalue [\"brightness\"]\n             * @apioption  plotOptions.treemap.levels.colorVariation.key\n             */\n            /**\n             * The ending value of a color variation. The last sibling will receive\n             * this value.\n             *\n             * @type      {number}\n             * @since     6.0.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.colorVariation.to\n             */\n            /**\n             * Can set the options of dataLabels on each point which lies on the\n             * level.\n             * [plotOptions.treemap.dataLabels](#plotOptions.treemap.dataLabels) for\n             * possible values.\n             *\n             * @extends   plotOptions.treemap.dataLabels\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.dataLabels\n             */\n            /**\n             * Can set the layoutAlgorithm option on a specific level.\n             *\n             * @type       {string}\n             * @since      4.1.0\n             * @product    highcharts\n             * @validvalue [\"sliceAndDice\", \"stripes\", \"squarified\", \"strip\"]\n             * @apioption  plotOptions.treemap.levels.layoutAlgorithm\n             */\n            /**\n             * Can set the layoutStartingDirection option on a specific level.\n             *\n             * @type       {string}\n             * @since      4.1.0\n             * @product    highcharts\n             * @validvalue [\"vertical\", \"horizontal\"]\n             * @apioption  plotOptions.treemap.levels.layoutStartingDirection\n             */\n            /**\n             * Decides which level takes effect from the options set in the levels\n             * object.\n             *\n             * @sample {highcharts} highcharts/plotoptions/treemap-levels/\n             *         Styling of both levels\n             *\n             * @type      {number}\n             * @since     4.1.0\n             * @product   highcharts\n             * @apioption plotOptions.treemap.levels.level\n             */\n            // Presentational options\n            /**\n             * The color of the border surrounding each tree map item.\n             *\n             * @type {Highcharts.ColorString}\n             */\n            borderColor: \"#e6e6e6\" /* Palette.neutralColor10 */,\n            /**\n             * The width of the border surrounding each tree map item.\n             */\n            borderWidth: 1,\n            colorKey: 'colorValue',\n            /**\n             * The opacity of a point in treemap. When a point has children, the\n             * visibility of the children is determined by the opacity.\n             *\n             * @since 4.2.4\n             */\n            opacity: 0.15,\n            /**\n             * A wrapper object for all the series options in specific states.\n             *\n             * @extends plotOptions.heatmap.states\n             */\n            states: {\n                /**\n                 * Options for the hovered series\n                 *\n                 * @extends   plotOptions.heatmap.states.hover\n                 * @excluding halo\n                 */\n                hover: {\n                    /**\n                     * The border color for the hovered state.\n                     */\n                    borderColor: \"#999999\" /* Palette.neutralColor40 */,\n                    /**\n                     * Brightness for the hovered point. Defaults to 0 if the\n                     * heatmap series is loaded first, otherwise 0.1.\n                     *\n                     * @type    {number}\n                     * @default undefined\n                     */\n                    brightness: SeriesRegistry.seriesTypes.heatmap ? 0 : 0.1,\n                    /**\n                     * @extends plotOptions.heatmap.states.hover.halo\n                     */\n                    halo: false,\n                    /**\n                     * The opacity of a point in treemap. When a point has children,\n                     * the visibility of the children is determined by the opacity.\n                     *\n                     * @since 4.2.4\n                     */\n                    opacity: 0.75,\n                    /**\n                     * The shadow option for hovered state.\n                     */\n                    shadow: false\n                }\n            },\n            legendSymbol: 'rectangle'\n        };\n        /**\n         * A `treemap` series. If the [type](#series.treemap.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.treemap\n         * @excluding dataParser, dataURL, stack, dataSorting\n         * @product   highcharts\n         * @requires  modules/treemap\n         * @apioption series.treemap\n         */\n        /**\n         * An array of data points for the series. For the `treemap` series\n         * type, points can be given in the following ways:\n         *\n         * 1. An array of numerical values. In this case, the numerical values will be\n         *    interpreted as `value` options. Example:\n         *    ```js\n         *    data: [0, 5, 3, 5]\n         *    ```\n         *\n         * 2. An array of objects with named values. The following snippet shows only a\n         *    few settings, see the complete options set below. If the total number of\n         *    data points exceeds the series'\n         *    [turboThreshold](#series.treemap.turboThreshold),\n         *    this option is not available.\n         *    ```js\n         *      data: [{\n         *        value: 9,\n         *        name: \"Point2\",\n         *        color: \"#00FF00\"\n         *      }, {\n         *        value: 6,\n         *        name: \"Point1\",\n         *        color: \"#FF00FF\"\n         *      }]\n         *    ```\n         *\n         * @sample {highcharts} highcharts/chart/reflow-true/\n         *         Numerical values\n         * @sample {highcharts} highcharts/series/data-array-of-objects/\n         *         Config objects\n         *\n         * @type      {Array<number|null|*>}\n         * @extends   series.heatmap.data\n         * @excluding x, y, pointPadding\n         * @product   highcharts\n         * @apioption series.treemap.data\n         */\n        /**\n         * The value of the point, resulting in a relative area of the point\n         * in the treemap.\n         *\n         * @type      {number|null}\n         * @product   highcharts\n         * @apioption series.treemap.data.value\n         */\n        /**\n         * Serves a purpose only if a `colorAxis` object is defined in the chart\n         * options. This value will decide which color the point gets from the\n         * scale of the colorAxis.\n         *\n         * @type      {number}\n         * @since     4.1.0\n         * @product   highcharts\n         * @apioption series.treemap.data.colorValue\n         */\n        /**\n         * Only for treemap. Use this option to build a tree structure. The\n         * value should be the id of the point which is the parent. If no points\n         * has a matching id, or this option is undefined, then the parent will\n         * be set to the root.\n         *\n         * @sample {highcharts} highcharts/point/parent/\n         *         Point parent\n         * @sample {highcharts} highcharts/demo/treemap-with-levels/\n         *         Example where parent id is not matching\n         *\n         * @type      {string}\n         * @since     4.1.0\n         * @product   highcharts\n         * @apioption series.treemap.data.parent\n         */\n        ''; // Keeps doclets above detached\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapUtilities.js', [], function () {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Namespace\n         *\n         * */\n        var TreemapUtilities;\n        (function (TreemapUtilities) {\n            /* *\n             *\n             *  Declarations\n             *\n             * */\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            /**\n             * @todo find correct name for this function.\n             * @todo Similar to reduce, this function is likely redundant\n             */\n            function recursive(item, func, context) {\n                const next = func.call(context || this, item);\n                if (next !== false) {\n                    recursive(next, func, context);\n                }\n            }\n            TreemapUtilities.recursive = recursive;\n        })(TreemapUtilities || (TreemapUtilities = {}));\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapUtilities;\n    });\n    _registerModule(_modules, 'Series/TreeUtilities.js', [_modules['Core/Color/Color.js'], _modules['Core/Utilities.js']], function (Color, U) {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { extend, isArray, isNumber, isObject, merge, pick, relativeLength } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /* eslint-disable valid-jsdoc */\n        /**\n         * @private\n         */\n        function getColor(node, options) {\n            const index = options.index, mapOptionsToLevel = options.mapOptionsToLevel, parentColor = options.parentColor, parentColorIndex = options.parentColorIndex, series = options.series, colors = options.colors, siblings = options.siblings, points = series.points, chartOptionsChart = series.chart.options.chart;\n            let getColorByPoint, point, level, colorByPoint, colorIndexByPoint, color, colorIndex;\n            /**\n             * @private\n             */\n            const variateColor = (color) => {\n                const colorVariation = level && level.colorVariation;\n                if (colorVariation &&\n                    colorVariation.key === 'brightness' &&\n                    index &&\n                    siblings) {\n                    return Color.parse(color).brighten(colorVariation.to * (index / siblings)).get();\n                }\n                return color;\n            };\n            if (node) {\n                point = points[node.i];\n                level = mapOptionsToLevel[node.level] || {};\n                getColorByPoint = point && level.colorByPoint;\n                if (getColorByPoint) {\n                    colorIndexByPoint = point.index % (colors ?\n                        colors.length :\n                        chartOptionsChart.colorCount);\n                    colorByPoint = colors && colors[colorIndexByPoint];\n                }\n                // Select either point color, level color or inherited color.\n                if (!series.chart.styledMode) {\n                    color = pick(point && point.options.color, level && level.color, colorByPoint, parentColor && variateColor(parentColor), series.color);\n                }\n                colorIndex = pick(point && point.options.colorIndex, level && level.colorIndex, colorIndexByPoint, parentColorIndex, options.colorIndex);\n            }\n            return {\n                color: color,\n                colorIndex: colorIndex\n            };\n        }\n        /**\n         * Creates a map from level number to its given options.\n         *\n         * @private\n         *\n         * @param {Object} params\n         * Object containing parameters.\n         * - `defaults` Object containing default options. The default options are\n         *   merged with the userOptions to get the final options for a specific\n         *   level.\n         * - `from` The lowest level number.\n         * - `levels` User options from series.levels.\n         * - `to` The highest level number.\n         *\n         * @return {Highcharts.Dictionary<object>|null}\n         * Returns a map from level number to its given options.\n         */\n        function getLevelOptions(params) {\n            const result = {};\n            let defaults, converted, i, from, to, levels;\n            if (isObject(params)) {\n                from = isNumber(params.from) ? params.from : 1;\n                levels = params.levels;\n                converted = {};\n                defaults = isObject(params.defaults) ? params.defaults : {};\n                if (isArray(levels)) {\n                    converted = levels.reduce((obj, item) => {\n                        let level, levelIsConstant, options;\n                        if (isObject(item) && isNumber(item.level)) {\n                            options = merge({}, item);\n                            levelIsConstant = pick(options.levelIsConstant, defaults.levelIsConstant);\n                            // Delete redundant properties.\n                            delete options.levelIsConstant;\n                            delete options.level;\n                            // Calculate which level these options apply to.\n                            level = item.level + (levelIsConstant ? 0 : from - 1);\n                            if (isObject(obj[level])) {\n                                merge(true, obj[level], options); // #16329\n                            }\n                            else {\n                                obj[level] = options;\n                            }\n                        }\n                        return obj;\n                    }, {});\n                }\n                to = isNumber(params.to) ? params.to : 1;\n                for (i = 0; i <= to; i++) {\n                    result[i] = merge({}, defaults, isObject(converted[i]) ? converted[i] : {});\n                }\n            }\n            return result;\n        }\n        /**\n         * @private\n         * @todo Combine buildTree and buildNode with setTreeValues\n         * @todo Remove logic from Treemap and make it utilize this mixin.\n         */\n        function setTreeValues(tree, options) {\n            const before = options.before, idRoot = options.idRoot, mapIdToNode = options.mapIdToNode, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (options.levelIsConstant !== false), points = options.points, point = points[tree.i], optionsPoint = point && point.options || {}, children = [];\n            let childrenTotal = 0;\n            tree.levelDynamic = tree.level - (levelIsConstant ? 0 : nodeRoot.level);\n            tree.name = pick(point && point.name, '');\n            tree.visible = (idRoot === tree.id ||\n                options.visible === true);\n            if (typeof before === 'function') {\n                tree = before(tree, options);\n            }\n            // First give the children some values\n            tree.children.forEach((child, i) => {\n                const newOptions = extend({}, options);\n                extend(newOptions, {\n                    index: i,\n                    siblings: tree.children.length,\n                    visible: tree.visible\n                });\n                child = setTreeValues(child, newOptions);\n                children.push(child);\n                if (child.visible) {\n                    childrenTotal += child.val;\n                }\n            });\n            // Set the values\n            const value = pick(optionsPoint.value, childrenTotal);\n            tree.visible = value >= 0 && (childrenTotal > 0 || tree.visible);\n            tree.children = children;\n            tree.childrenTotal = childrenTotal;\n            tree.isLeaf = tree.visible && !childrenTotal;\n            tree.val = value;\n            return tree;\n        }\n        /**\n         * Update the rootId property on the series. Also makes sure that it is\n         * accessible to exporting.\n         *\n         * @private\n         *\n         * @param {Object} series\n         * The series to operate on.\n         *\n         * @return {string}\n         * Returns the resulting rootId after update.\n         */\n        function updateRootId(series) {\n            let rootId, options;\n            if (isObject(series)) {\n                // Get the series options.\n                options = isObject(series.options) ? series.options : {};\n                // Calculate the rootId.\n                rootId = pick(series.rootNode, options.rootId, '');\n                // Set rootId on series.userOptions to pick it up in exporting.\n                if (isObject(series.userOptions)) {\n                    series.userOptions.rootId = rootId;\n                }\n                // Set rootId on series to pick it up on next update.\n                series.rootNode = rootId;\n            }\n            return rootId;\n        }\n        /**\n         * Get the node width, which relies on the plot width and the nodeDistance\n         * option.\n         *\n         * @private\n         */\n        function getNodeWidth(series, columnCount) {\n            const { chart, options } = series, { nodeDistance = 0, nodeWidth = 0 } = options, { plotSizeX = 1 } = chart;\n            // Node width auto means they are evenly distributed along the width of\n            // the plot area\n            if (nodeWidth === 'auto') {\n                if (typeof nodeDistance === 'string' && /%$/.test(nodeDistance)) {\n                    const fraction = parseFloat(nodeDistance) / 100, total = columnCount + fraction * (columnCount - 1);\n                    return plotSizeX / total;\n                }\n                const nDistance = Number(nodeDistance);\n                return ((plotSizeX + nDistance) /\n                    (columnCount || 1)) - nDistance;\n            }\n            return relativeLength(nodeWidth, plotSizeX);\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const TreeUtilities = {\n            getColor,\n            getLevelOptions,\n            getNodeWidth,\n            setTreeValues,\n            updateRootId\n        };\n\n        return TreeUtilities;\n    });\n    _registerModule(_modules, 'Series/Treemap/TreemapSeries.js', [_modules['Extensions/Breadcrumbs/Breadcrumbs.js'], _modules['Core/Color/Color.js'], _modules['Series/ColorMapComposition.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Series/Treemap/TreemapAlgorithmGroup.js'], _modules['Series/Treemap/TreemapNode.js'], _modules['Series/Treemap/TreemapPoint.js'], _modules['Series/Treemap/TreemapSeriesDefaults.js'], _modules['Series/Treemap/TreemapUtilities.js'], _modules['Series/TreeUtilities.js'], _modules['Core/Utilities.js']], function (Breadcrumbs, Color, ColorMapComposition, H, SeriesRegistry, TreemapAlgorithmGroup, TreemapNode, TreemapPoint, TreemapSeriesDefaults, TreemapUtilities, TU, U) {\n        /* *\n         *\n         *  (c) 2014-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard / Oystein Moseng\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { parse: color } = Color;\n        const { composed, noop } = H;\n        const { column: ColumnSeries, scatter: ScatterSeries } = SeriesRegistry.seriesTypes;\n        const { getColor, getLevelOptions, updateRootId } = TU;\n        const { addEvent, correctFloat, crisp, defined, error, extend, fireEvent, isArray, isObject, isString, merge, pick, pushUnique, stableSort } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const axisMax = 100;\n        /* *\n         *\n         *  Variables\n         *\n         * */\n        let treemapAxisDefaultValues = false;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /** @private */\n        function onSeriesAfterBindAxes() {\n            const series = this, xAxis = series.xAxis, yAxis = series.yAxis;\n            let treeAxis;\n            if (xAxis && yAxis) {\n                if (series.is('treemap')) {\n                    treeAxis = {\n                        endOnTick: false,\n                        gridLineWidth: 0,\n                        lineWidth: 0,\n                        min: 0,\n                        minPadding: 0,\n                        max: axisMax,\n                        maxPadding: 0,\n                        startOnTick: false,\n                        title: void 0,\n                        tickPositions: []\n                    };\n                    extend(yAxis.options, treeAxis);\n                    extend(xAxis.options, treeAxis);\n                    treemapAxisDefaultValues = true;\n                }\n                else if (treemapAxisDefaultValues) {\n                    yAxis.setOptions(yAxis.userOptions);\n                    xAxis.setOptions(xAxis.userOptions);\n                    treemapAxisDefaultValues = false;\n                }\n            }\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        /**\n         * @private\n         * @class\n         * @name Highcharts.seriesTypes.treemap\n         *\n         * @augments Highcharts.Series\n         */\n        class TreemapSeries extends ScatterSeries {\n            /* *\n             *\n             *  Static Functions\n             *\n             * */\n            static compose(SeriesClass) {\n                if (pushUnique(composed, 'TreemapSeries')) {\n                    addEvent(SeriesClass, 'afterBindAxes', onSeriesAfterBindAxes);\n                }\n            }\n            /* *\n             *\n             *  Function\n             *\n             * */\n            /* eslint-disable valid-jsdoc */\n            algorithmCalcPoints(directionChange, last, group, childrenArea) {\n                const plot = group.plot, end = group.elArr.length - 1;\n                let pX, pY, pW, pH, gW = group.lW, gH = group.lH, keep, i = 0;\n                if (last) {\n                    gW = group.nW;\n                    gH = group.nH;\n                }\n                else {\n                    keep = group.elArr[end];\n                }\n                for (const p of group.elArr) {\n                    if (last || (i < end)) {\n                        if (group.direction === 0) {\n                            pX = plot.x;\n                            pY = plot.y;\n                            pW = gW;\n                            pH = p / pW;\n                        }\n                        else {\n                            pX = plot.x;\n                            pY = plot.y;\n                            pH = gH;\n                            pW = p / pH;\n                        }\n                        childrenArea.push({\n                            x: pX,\n                            y: pY,\n                            width: pW,\n                            height: correctFloat(pH)\n                        });\n                        if (group.direction === 0) {\n                            plot.y = plot.y + pH;\n                        }\n                        else {\n                            plot.x = plot.x + pW;\n                        }\n                    }\n                    i = i + 1;\n                }\n                // Reset variables\n                group.reset();\n                if (group.direction === 0) {\n                    group.width = group.width - gW;\n                }\n                else {\n                    group.height = group.height - gH;\n                }\n                plot.y = plot.parent.y + (plot.parent.height - group.height);\n                plot.x = plot.parent.x + (plot.parent.width - group.width);\n                if (directionChange) {\n                    group.direction = 1 - group.direction;\n                }\n                // If not last, then add uncalculated element\n                if (!last) {\n                    group.addElement(keep);\n                }\n            }\n            algorithmFill(directionChange, parent, children) {\n                const childrenArea = [];\n                let pTot, direction = parent.direction, x = parent.x, y = parent.y, width = parent.width, height = parent.height, pX, pY, pW, pH;\n                for (const child of children) {\n                    pTot =\n                        (parent.width * parent.height) * (child.val / parent.val);\n                    pX = x;\n                    pY = y;\n                    if (direction === 0) {\n                        pH = height;\n                        pW = pTot / pH;\n                        width = width - pW;\n                        x = x + pW;\n                    }\n                    else {\n                        pW = width;\n                        pH = pTot / pW;\n                        height = height - pH;\n                        y = y + pH;\n                    }\n                    childrenArea.push({\n                        x: pX,\n                        y: pY,\n                        width: pW,\n                        height: pH\n                    });\n                    if (directionChange) {\n                        direction = 1 - direction;\n                    }\n                }\n                return childrenArea;\n            }\n            algorithmLowAspectRatio(directionChange, parent, children) {\n                const series = this, childrenArea = [], plot = {\n                    x: parent.x,\n                    y: parent.y,\n                    parent: parent\n                }, direction = parent.direction, end = children.length - 1, group = new TreemapAlgorithmGroup(parent.height, parent.width, direction, plot);\n                let pTot, i = 0;\n                // Loop through and calculate all areas\n                for (const child of children) {\n                    pTot =\n                        (parent.width * parent.height) * (child.val / parent.val);\n                    group.addElement(pTot);\n                    if (group.lP.nR > group.lP.lR) {\n                        series.algorithmCalcPoints(directionChange, false, group, childrenArea, plot // @todo no supported\n                        );\n                    }\n                    // If last child, then calculate all remaining areas\n                    if (i === end) {\n                        series.algorithmCalcPoints(directionChange, true, group, childrenArea, plot // @todo not supported\n                        );\n                    }\n                    ++i;\n                }\n                return childrenArea;\n            }\n            /**\n             * Over the alignment method by setting z index.\n             * @private\n             */\n            alignDataLabel(point, dataLabel, labelOptions) {\n                const style = labelOptions.style;\n                // #8160: Prevent the label from exceeding the point's\n                // boundaries in treemaps by applying ellipsis overflow.\n                // The issue was happening when datalabel's text contained a\n                // long sequence of characters without a whitespace.\n                if (style &&\n                    !defined(style.textOverflow) &&\n                    dataLabel.text &&\n                    dataLabel.getBBox().width > (dataLabel.text.textWidth || 0)) {\n                    dataLabel.css({\n                        textOverflow: 'ellipsis',\n                        // Unit (px) is required when useHTML is true\n                        width: style.width += 'px'\n                    });\n                }\n                ColumnSeries.prototype.alignDataLabel.apply(this, arguments);\n                if (point.dataLabel) {\n                    // `point.node.zIndex` could be undefined (#6956)\n                    point.dataLabel.attr({ zIndex: (point.node.zIndex || 0) + 1 });\n                }\n            }\n            /**\n             * Recursive function which calculates the area for all children of a\n             * node.\n             *\n             * @private\n             * @function Highcharts.Series#calculateChildrenAreas\n             *\n             * @param {Object} parent\n             * The node which is parent to the children.\n             *\n             * @param {Object} area\n             * The rectangular area of the parent.\n             */\n            calculateChildrenAreas(parent, area) {\n                const series = this, options = series.options, mapOptionsToLevel = series.mapOptionsToLevel, level = mapOptionsToLevel[parent.level + 1], algorithm = pick((series[(level && level.layoutAlgorithm)] &&\n                    level.layoutAlgorithm), options.layoutAlgorithm), alternate = options.alternateStartingDirection, \n                // Collect all children which should be included\n                children = parent.children.filter((n) => !n.ignore);\n                let childrenValues = [];\n                if (level && level.layoutStartingDirection) {\n                    area.direction = level.layoutStartingDirection === 'vertical' ?\n                        0 :\n                        1;\n                }\n                childrenValues = series[algorithm](area, children);\n                let i = -1;\n                for (const child of children) {\n                    const values = childrenValues[++i];\n                    child.values = merge(values, {\n                        val: child.childrenTotal,\n                        direction: (alternate ? 1 - area.direction : area.direction)\n                    });\n                    child.pointValues = merge(values, {\n                        x: (values.x / series.axisRatio),\n                        // Flip y-values to avoid visual regression with csvCoord in\n                        // Axis.translate at setPointValues. #12488\n                        y: axisMax - values.y - values.height,\n                        width: (values.width / series.axisRatio)\n                    });\n                    // If node has children, then call method recursively\n                    if (child.children.length) {\n                        series.calculateChildrenAreas(child, child.values);\n                    }\n                }\n            }\n            /**\n             * Create level list.\n             * @private\n             */\n            createList(e) {\n                const chart = this.chart, breadcrumbs = chart.breadcrumbs, list = [];\n                if (breadcrumbs) {\n                    let currentLevelNumber = 0;\n                    list.push({\n                        level: currentLevelNumber,\n                        levelOptions: chart.series[0]\n                    });\n                    let node = e.target.nodeMap[e.newRootId];\n                    const extraNodes = [];\n                    // When the root node is set and has parent,\n                    // recreate the path from the node tree.\n                    while (node.parent || node.parent === '') {\n                        extraNodes.push(node);\n                        node = e.target.nodeMap[node.parent];\n                    }\n                    for (const node of extraNodes.reverse()) {\n                        list.push({\n                            level: ++currentLevelNumber,\n                            levelOptions: node\n                        });\n                    }\n                    // If the list has only first element, we should clear it\n                    if (list.length <= 1) {\n                        list.length = 0;\n                    }\n                }\n                return list;\n            }\n            /**\n             * Extend drawDataLabels with logic to handle custom options related to\n             * the treemap series:\n             *\n             * - Points which is not a leaf node, has dataLabels disabled by\n             *   default.\n             *\n             * - Options set on series.levels is merged in.\n             *\n             * - Width of the dataLabel is set to match the width of the point\n             *   shape.\n             *\n             * @private\n             */\n            drawDataLabels() {\n                const series = this, mapOptionsToLevel = series.mapOptionsToLevel, points = series.points.filter(function (n) {\n                    return n.node.visible;\n                });\n                let options, level;\n                for (const point of points) {\n                    level = mapOptionsToLevel[point.node.level];\n                    // Set options to new object to avoid problems with scope\n                    options = { style: {} };\n                    // If not a leaf, then label should be disabled as default\n                    if (!point.node.isLeaf) {\n                        options.enabled = false;\n                    }\n                    // If options for level exists, include them as well\n                    if (level && level.dataLabels) {\n                        options = merge(options, level.dataLabels);\n                        series.hasDataLabels = () => true;\n                    }\n                    // Set dataLabel width to the width of the point shape.\n                    if (point.shapeArgs) {\n                        options.style.width = point.shapeArgs.width;\n                        if (point.dataLabel) {\n                            point.dataLabel.css({\n                                width: point.shapeArgs.width + 'px'\n                            });\n                        }\n                    }\n                    // Merge custom options with point options\n                    point.dlOptions = merge(options, point.options.dataLabels);\n                }\n                super.drawDataLabels();\n            }\n            /**\n             * Override drawPoints\n             * @private\n             */\n            drawPoints(points = this.points) {\n                const series = this, chart = series.chart, renderer = chart.renderer, styledMode = chart.styledMode, options = series.options, shadow = styledMode ? {} : options.shadow, borderRadius = options.borderRadius, withinAnimationLimit = chart.pointCount < options.animationLimit, allowTraversingTree = options.allowTraversingTree;\n                for (const point of points) {\n                    const levelDynamic = point.node.levelDynamic, animatableAttribs = {}, attribs = {}, css = {}, groupKey = 'level-group-' + point.node.level, hasGraphic = !!point.graphic, shouldAnimate = withinAnimationLimit && hasGraphic, shapeArgs = point.shapeArgs;\n                    // Don't bother with calculate styling if the point is not drawn\n                    if (point.shouldDraw()) {\n                        point.isInside = true;\n                        if (borderRadius) {\n                            attribs.r = borderRadius;\n                        }\n                        merge(true, // Extend object\n                        // Which object to extend\n                        shouldAnimate ? animatableAttribs : attribs, \n                        // Add shapeArgs to animate/attr if graphic exists\n                        hasGraphic ? shapeArgs : {}, \n                        // Add style attribs if !styleMode\n                        styledMode ?\n                            {} :\n                            series.pointAttribs(point, point.selected ? 'select' : void 0));\n                        // In styled mode apply point.color. Use CSS, otherwise the\n                        // fill used in the style sheet will take precedence over\n                        // the fill attribute.\n                        if (series.colorAttribs && styledMode) {\n                            // Heatmap is loaded\n                            extend(css, series.colorAttribs(point));\n                        }\n                        if (!series[groupKey]) {\n                            series[groupKey] = renderer.g(groupKey)\n                                .attr({\n                                // @todo Set the zIndex based upon the number of\n                                // levels, instead of using 1000\n                                zIndex: 1000 - (levelDynamic || 0)\n                            })\n                                .add(series.group);\n                            series[groupKey].survive = true;\n                        }\n                    }\n                    // Draw the point\n                    point.draw({\n                        animatableAttribs,\n                        attribs,\n                        css,\n                        group: series[groupKey],\n                        imageUrl: point.imageUrl,\n                        renderer,\n                        shadow,\n                        shapeArgs,\n                        shapeType: point.shapeType\n                    });\n                    // If setRootNode is allowed, set a point cursor on clickables &\n                    // add drillId to point\n                    if (allowTraversingTree && point.graphic) {\n                        point.drillId = options.interactByLeaf ?\n                            series.drillToByLeaf(point) :\n                            series.drillToByGroup(point);\n                    }\n                }\n            }\n            /**\n             * Finds the drill id for a parent node. Returns false if point should\n             * not have a click event.\n             * @private\n             */\n            drillToByGroup(point) {\n                let drillId = false;\n                if (!point.node.isLeaf &&\n                    (point.node.level - this.nodeMap[this.rootNode].level) === 1) {\n                    drillId = point.id;\n                }\n                return drillId;\n            }\n            /**\n             * Finds the drill id for a leaf node. Returns false if point should not\n             * have a click event\n             * @private\n             */\n            drillToByLeaf(point) {\n                let drillId = false, nodeParent;\n                if ((point.node.parent !== this.rootNode) &&\n                    point.node.isLeaf) {\n                    nodeParent = point.node;\n                    while (!drillId) {\n                        nodeParent = this.nodeMap[nodeParent.parent];\n                        if (nodeParent.parent === this.rootNode) {\n                            drillId = nodeParent.id;\n                        }\n                    }\n                }\n                return drillId;\n            }\n            /**\n             * @todo remove this function at a suitable version.\n             * @private\n             */\n            drillToNode(id, redraw) {\n                error(32, false, void 0, { 'treemap.drillToNode': 'use treemap.setRootNode' });\n                this.setRootNode(id, redraw);\n            }\n            drillUp() {\n                const series = this, node = series.nodeMap[series.rootNode];\n                if (node && isString(node.parent)) {\n                    series.setRootNode(node.parent, true, { trigger: 'traverseUpButton' });\n                }\n            }\n            getExtremes() {\n                // Get the extremes from the value data\n                const { dataMin, dataMax } = super.getExtremes(this.colorValueData);\n                this.valueMin = dataMin;\n                this.valueMax = dataMax;\n                // Get the extremes from the y data\n                return super.getExtremes();\n            }\n            /**\n             * Creates an object map from parent id to childrens index.\n             *\n             * @private\n             * @function Highcharts.Series#getListOfParents\n             *\n             * @param {Highcharts.SeriesTreemapDataOptions} [data]\n             *        List of points set in options.\n             *\n             * @param {Array<string>} [existingIds]\n             *        List of all point ids.\n             *\n             * @return {Object}\n             *         Map from parent id to children index in data.\n             */\n            getListOfParents(data, existingIds) {\n                const arr = isArray(data) ? data : [], ids = isArray(existingIds) ? existingIds : [], listOfParents = arr.reduce(function (prev, curr, i) {\n                    const parent = pick(curr.parent, '');\n                    if (typeof prev[parent] === 'undefined') {\n                        prev[parent] = [];\n                    }\n                    prev[parent].push(i);\n                    return prev;\n                }, {\n                    '': [] // Root of tree\n                });\n                // If parent does not exist, hoist parent to root of tree.\n                for (const parent of Object.keys(listOfParents)) {\n                    const children = listOfParents[parent];\n                    if ((parent !== '') && (ids.indexOf(parent) === -1)) {\n                        for (const child of children) {\n                            listOfParents[''].push(child);\n                        }\n                        delete listOfParents[parent];\n                    }\n                }\n                return listOfParents;\n            }\n            /**\n             * Creates a tree structured object from the series points.\n             * @private\n             */\n            getTree() {\n                const series = this, allIds = this.data.map(function (d) {\n                    return d.id;\n                }), parentList = series.getListOfParents(this.data, allIds);\n                series.nodeMap = {};\n                series.nodeList = [];\n                return series.buildTree('', -1, 0, parentList);\n            }\n            buildTree(id, index, level, list, parent) {\n                const series = this, children = [], point = series.points[index];\n                let height = 0, child;\n                // Actions\n                for (const i of (list[id] || [])) {\n                    child = series.buildTree(series.points[i].id, i, level + 1, list, id);\n                    height = Math.max(child.height + 1, height);\n                    children.push(child);\n                }\n                const node = new series.NodeClass().init(id, index, children, height, level, series, parent);\n                for (const child of children) {\n                    child.parentNode = node;\n                }\n                series.nodeMap[node.id] = node;\n                series.nodeList.push(node);\n                if (point) {\n                    point.node = node;\n                    node.point = point;\n                }\n                return node;\n            }\n            /**\n             * Define hasData function for non-cartesian series. Returns true if the\n             * series has points at all.\n             * @private\n             */\n            hasData() {\n                return !!this.processedXData.length; // != 0\n            }\n            init(chart, options) {\n                const series = this, breadcrumbsOptions = merge(options.drillUpButton, options.breadcrumbs), setOptionsEvent = addEvent(series, 'setOptions', (event) => {\n                    const options = event.userOptions;\n                    if (defined(options.allowDrillToNode) &&\n                        !defined(options.allowTraversingTree)) {\n                        options.allowTraversingTree = options.allowDrillToNode;\n                        delete options.allowDrillToNode;\n                    }\n                    if (defined(options.drillUpButton) &&\n                        !defined(options.traverseUpButton)) {\n                        options.traverseUpButton = options.drillUpButton;\n                        delete options.drillUpButton;\n                    }\n                });\n                super.init(chart, options);\n                // Treemap's opacity is a different option from other series\n                delete series.opacity;\n                // Handle deprecated options.\n                series.eventsToUnbind.push(setOptionsEvent);\n                if (series.options.allowTraversingTree) {\n                    series.eventsToUnbind.push(addEvent(series, 'click', series.onClickDrillToNode));\n                    series.eventsToUnbind.push(addEvent(series, 'setRootNode', function (e) {\n                        const chart = series.chart;\n                        if (chart.breadcrumbs) {\n                            // Create a list using the event after drilldown.\n                            chart.breadcrumbs.updateProperties(series.createList(e));\n                        }\n                    }));\n                    series.eventsToUnbind.push(addEvent(series, 'update', \n                    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n                    function (e, redraw) {\n                        const breadcrumbs = this.chart.breadcrumbs;\n                        if (breadcrumbs && e.options.breadcrumbs) {\n                            breadcrumbs.update(e.options.breadcrumbs);\n                        }\n                    }));\n                    series.eventsToUnbind.push(addEvent(series, 'destroy', function destroyEvents(e) {\n                        const chart = this.chart;\n                        if (chart.breadcrumbs && !e.keepEventsForUpdate) {\n                            chart.breadcrumbs.destroy();\n                            chart.breadcrumbs = void 0;\n                        }\n                    }));\n                }\n                if (!chart.breadcrumbs) {\n                    chart.breadcrumbs = new Breadcrumbs(chart, breadcrumbsOptions);\n                }\n                series.eventsToUnbind.push(addEvent(chart.breadcrumbs, 'up', function (e) {\n                    const drillUpsNumber = this.level - e.newLevel;\n                    for (let i = 0; i < drillUpsNumber; i++) {\n                        series.drillUp();\n                    }\n                }));\n            }\n            /**\n             * Add drilling on the suitable points.\n             * @private\n             */\n            onClickDrillToNode(event) {\n                const series = this, point = event.point, drillId = point && point.drillId;\n                // If a drill id is returned, add click event and cursor.\n                if (isString(drillId)) {\n                    point.setState(''); // Remove hover\n                    series.setRootNode(drillId, true, { trigger: 'click' });\n                }\n            }\n            /**\n             * Get presentational attributes\n             * @private\n             */\n            pointAttribs(point, state) {\n                const series = this, mapOptionsToLevel = (isObject(series.mapOptionsToLevel) ?\n                    series.mapOptionsToLevel :\n                    {}), level = point && mapOptionsToLevel[point.node.level] || {}, options = this.options, stateOptions = state && options.states && options.states[state] || {}, className = (point && point.getClassName()) || '', \n                // Set attributes by precedence. Point trumps level trumps series.\n                // Stroke width uses pick because it can be 0.\n                attr = {\n                    'stroke': (point && point.borderColor) ||\n                        level.borderColor ||\n                        stateOptions.borderColor ||\n                        options.borderColor,\n                    'stroke-width': pick(point && point.borderWidth, level.borderWidth, stateOptions.borderWidth, options.borderWidth),\n                    'dashstyle': (point && point.borderDashStyle) ||\n                        level.borderDashStyle ||\n                        stateOptions.borderDashStyle ||\n                        options.borderDashStyle,\n                    'fill': (point && point.color) || this.color\n                };\n                let opacity;\n                // Hide levels above the current view\n                if (className.indexOf('highcharts-above-level') !== -1) {\n                    attr.fill = 'none';\n                    attr['stroke-width'] = 0;\n                    // Nodes with children that accept interaction\n                }\n                else if (className.indexOf('highcharts-internal-node-interactive') !== -1) {\n                    opacity = pick(stateOptions.opacity, options.opacity);\n                    attr.fill = color(attr.fill).setOpacity(opacity).get();\n                    attr.cursor = 'pointer';\n                    // Hide nodes that have children\n                }\n                else if (className.indexOf('highcharts-internal-node') !== -1) {\n                    attr.fill = 'none';\n                }\n                else if (state) {\n                    // Brighten and hoist the hover nodes\n                    attr.fill = color(attr.fill)\n                        .brighten(stateOptions.brightness)\n                        .get();\n                }\n                return attr;\n            }\n            /**\n             * Set the node's color recursively, from the parent down.\n             * @private\n             */\n            setColorRecursive(node, parentColor, colorIndex, index, siblings) {\n                const series = this, chart = series && series.chart, colors = chart && chart.options && chart.options.colors;\n                if (node) {\n                    const colorInfo = getColor(node, {\n                        colors: colors,\n                        index: index,\n                        mapOptionsToLevel: series.mapOptionsToLevel,\n                        parentColor: parentColor,\n                        parentColorIndex: colorIndex,\n                        series: series,\n                        siblings: siblings\n                    }), point = series.points[node.i];\n                    if (point) {\n                        point.color = colorInfo.color;\n                        point.colorIndex = colorInfo.colorIndex;\n                    }\n                    let i = -1;\n                    // Do it all again with the children\n                    for (const child of (node.children || [])) {\n                        series.setColorRecursive(child, colorInfo.color, colorInfo.colorIndex, ++i, node.children.length);\n                    }\n                }\n            }\n            setPointValues() {\n                const series = this;\n                const { points, xAxis, yAxis } = series;\n                const styledMode = series.chart.styledMode;\n                // Get the crisp correction in classic mode. For this to work in\n                // styled mode, we would need to first add the shape (without x,\n                // y, width and height), then read the rendered stroke width\n                // using point.graphic.strokeWidth(), then modify and apply the\n                // shapeArgs. This applies also to column series, but the\n                // downside is performance and code complexity.\n                const getStrokeWidth = (point) => (styledMode ?\n                    0 :\n                    (series.pointAttribs(point)['stroke-width'] || 0));\n                for (const point of points) {\n                    const { pointValues: values, visible } = point.node;\n                    // Points which is ignored, have no values.\n                    if (values && visible) {\n                        const { height, width, x, y } = values;\n                        const strokeWidth = getStrokeWidth(point);\n                        const x1 = crisp(xAxis.toPixels(x, true), strokeWidth, true);\n                        const x2 = crisp(xAxis.toPixels(x + width, true), strokeWidth, true);\n                        const y1 = crisp(yAxis.toPixels(y, true), strokeWidth, true);\n                        const y2 = crisp(yAxis.toPixels(y + height, true), strokeWidth, true);\n                        // Set point values\n                        const shapeArgs = {\n                            x: Math.min(x1, x2),\n                            y: Math.min(y1, y2),\n                            width: Math.abs(x2 - x1),\n                            height: Math.abs(y2 - y1)\n                        };\n                        point.plotX = shapeArgs.x + (shapeArgs.width / 2);\n                        point.plotY = shapeArgs.y + (shapeArgs.height / 2);\n                        point.shapeArgs = shapeArgs;\n                    }\n                    else {\n                        // Reset visibility\n                        delete point.plotX;\n                        delete point.plotY;\n                    }\n                }\n            }\n            /**\n             * Sets a new root node for the series.\n             *\n             * @private\n             * @function Highcharts.Series#setRootNode\n             *\n             * @param {string} id\n             * The id of the new root node.\n             *\n             * @param {boolean} [redraw=true]\n             * Whether to redraw the chart or not.\n             *\n             * @param {Object} [eventArguments]\n             * Arguments to be accessed in event handler.\n             *\n             * @param {string} [eventArguments.newRootId]\n             * Id of the new root.\n             *\n             * @param {string} [eventArguments.previousRootId]\n             * Id of the previous root.\n             *\n             * @param {boolean} [eventArguments.redraw]\n             * Whether to redraw the chart after.\n             *\n             * @param {Object} [eventArguments.series]\n             * The series to update the root of.\n             *\n             * @param {string} [eventArguments.trigger]\n             * The action which triggered the event. Undefined if the setRootNode is\n             * called directly.\n             *\n             * @emits Highcharts.Series#event:setRootNode\n             */\n            setRootNode(id, redraw, eventArguments) {\n                const series = this, eventArgs = extend({\n                    newRootId: id,\n                    previousRootId: series.rootNode,\n                    redraw: pick(redraw, true),\n                    series: series\n                }, eventArguments);\n                /**\n                 * The default functionality of the setRootNode event.\n                 *\n                 * @private\n                 * @param {Object} args The event arguments.\n                 * @param {string} args.newRootId Id of the new root.\n                 * @param {string} args.previousRootId Id of the previous root.\n                 * @param {boolean} args.redraw Whether to redraw the chart after.\n                 * @param {Object} args.series The series to update the root of.\n                 * @param {string} [args.trigger=undefined] The action which\n                 * triggered the event. Undefined if the setRootNode is called\n                 * directly.\n                     */\n                const defaultFn = function (args) {\n                    const series = args.series;\n                    // Store previous and new root ids on the series.\n                    series.idPreviousRoot = args.previousRootId;\n                    series.rootNode = args.newRootId;\n                    // Redraw the chart\n                    series.isDirty = true; // Force redraw\n                    if (args.redraw) {\n                        series.chart.redraw();\n                    }\n                };\n                // Fire setRootNode event.\n                fireEvent(series, 'setRootNode', eventArgs, defaultFn);\n            }\n            /**\n             * Workaround for `inactive` state. Since `series.opacity` option is\n             * already reserved, don't use that state at all by disabling\n             * `inactiveOtherPoints` and not inheriting states by points.\n             * @private\n             */\n            setState(state) {\n                this.options.inactiveOtherPoints = true;\n                super.setState(state, false);\n                this.options.inactiveOtherPoints = false;\n            }\n            setTreeValues(tree) {\n                const series = this, options = series.options, idRoot = series.rootNode, mapIdToNode = series.nodeMap, nodeRoot = mapIdToNode[idRoot], levelIsConstant = (typeof options.levelIsConstant === 'boolean' ?\n                    options.levelIsConstant :\n                    true), children = [], point = series.points[tree.i];\n                // First give the children some values\n                let childrenTotal = 0;\n                for (let child of tree.children) {\n                    child = series.setTreeValues(child);\n                    children.push(child);\n                    if (!child.ignore) {\n                        childrenTotal += child.val;\n                    }\n                }\n                // Sort the children\n                stableSort(children, (a, b) => ((a.sortIndex || 0) - (b.sortIndex || 0)));\n                // Set the values\n                const val = pick(point && point.options.value, childrenTotal);\n                if (point) {\n                    point.value = val;\n                }\n                extend(tree, {\n                    children: children,\n                    childrenTotal: childrenTotal,\n                    // Ignore this node if point is not visible\n                    ignore: !(pick(point && point.visible, true) && (val > 0)),\n                    isLeaf: tree.visible && !childrenTotal,\n                    levelDynamic: (tree.level - (levelIsConstant ? 0 : nodeRoot.level)),\n                    name: pick(point && point.name, ''),\n                    sortIndex: pick(point && point.sortIndex, -val),\n                    val: val\n                });\n                return tree;\n            }\n            sliceAndDice(parent, children) {\n                return this.algorithmFill(true, parent, children);\n            }\n            squarified(parent, children) {\n                return this.algorithmLowAspectRatio(true, parent, children);\n            }\n            strip(parent, children) {\n                return this.algorithmLowAspectRatio(false, parent, children);\n            }\n            stripes(parent, children) {\n                return this.algorithmFill(false, parent, children);\n            }\n            translate() {\n                const series = this, options = series.options;\n                let // NOTE: updateRootId modifies series.\n                rootId = updateRootId(series), rootNode, pointValues, seriesArea, val;\n                // Call prototype function\n                super.translate();\n                // @todo Only if series.isDirtyData is true\n                const tree = series.tree = series.getTree();\n                rootNode = series.nodeMap[rootId];\n                if (rootId !== '' &&\n                    (!rootNode || !rootNode.children.length)) {\n                    series.setRootNode('', false);\n                    rootId = series.rootNode;\n                    rootNode = series.nodeMap[rootId];\n                }\n                series.mapOptionsToLevel = getLevelOptions({\n                    from: rootNode.level + 1,\n                    levels: options.levels,\n                    to: tree.height,\n                    defaults: {\n                        levelIsConstant: series.options.levelIsConstant,\n                        colorByPoint: options.colorByPoint\n                    }\n                });\n                // Parents of the root node is by default visible\n                TreemapUtilities.recursive(series.nodeMap[series.rootNode], (node) => {\n                    const p = node.parent;\n                    let next = false;\n                    node.visible = true;\n                    if (p || p === '') {\n                        next = series.nodeMap[p];\n                    }\n                    return next;\n                });\n                // Children of the root node is by default visible\n                TreemapUtilities.recursive(series.nodeMap[series.rootNode].children, (children) => {\n                    let next = false;\n                    for (const child of children) {\n                        child.visible = true;\n                        if (child.children.length) {\n                            next = (next || []).concat(child.children);\n                        }\n                    }\n                    return next;\n                });\n                series.setTreeValues(tree);\n                // Calculate plotting values.\n                series.axisRatio = (series.xAxis.len / series.yAxis.len);\n                series.nodeMap[''].pointValues = pointValues = {\n                    x: 0,\n                    y: 0,\n                    width: axisMax,\n                    height: axisMax\n                };\n                series.nodeMap[''].values = seriesArea = merge(pointValues, {\n                    width: (pointValues.width * series.axisRatio),\n                    direction: (options.layoutStartingDirection === 'vertical' ? 0 : 1),\n                    val: tree.val\n                });\n                series.calculateChildrenAreas(tree, seriesArea);\n                // Logic for point colors\n                if (!series.colorAxis &&\n                    !options.colorByPoint) {\n                    series.setColorRecursive(series.tree);\n                }\n                // Update axis extremes according to the root node.\n                if (options.allowTraversingTree) {\n                    val = rootNode.pointValues;\n                    series.xAxis.setExtremes(val.x, val.x + val.width, false);\n                    series.yAxis.setExtremes(val.y, val.y + val.height, false);\n                    series.xAxis.setScale();\n                    series.yAxis.setScale();\n                }\n                // Assign values to points.\n                series.setPointValues();\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        TreemapSeries.defaultOptions = merge(ScatterSeries.defaultOptions, TreemapSeriesDefaults);\n        extend(TreemapSeries.prototype, {\n            buildKDTree: noop,\n            colorAttribs: ColorMapComposition.seriesMembers.colorAttribs,\n            colorKey: 'colorValue',\n            directTouch: true,\n            getExtremesFromAll: true,\n            getSymbol: noop,\n            optionalAxis: 'colorAxis',\n            parallelArrays: ['x', 'y', 'value', 'colorValue'],\n            pointArrayMap: ['value'],\n            pointClass: TreemapPoint,\n            NodeClass: TreemapNode,\n            trackerGroups: ['group', 'dataLabelsGroup'],\n            utils: TreemapUtilities\n        });\n        ColorMapComposition.compose(TreemapSeries);\n        SeriesRegistry.registerSeriesType('treemap', TreemapSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return TreemapSeries;\n    });\n    _registerModule(_modules, 'Series/Sunburst/SunburstPoint.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  This module implements sunburst charts in Highcharts.\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { series: { prototype: { pointClass: Point } }, seriesTypes: { treemap: { prototype: { pointClass: TreemapPoint } } } } = SeriesRegistry;\n        const { correctFloat, extend, pInt } = U;\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class SunburstPoint extends TreemapPoint {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            getDataLabelPath(label) {\n                const renderer = this.series.chart.renderer, shapeArgs = this.shapeExisting, r = shapeArgs.r + pInt(label.options?.distance || 0);\n                let start = shapeArgs.start, end = shapeArgs.end;\n                const angle = start + (end - start) / 2; // Arc middle value\n                let upperHalf = angle < 0 &&\n                    angle > -Math.PI ||\n                    angle > Math.PI, moreThanHalf;\n                // Check if point is a full circle\n                if (start === -Math.PI / 2 &&\n                    correctFloat(end) === correctFloat(Math.PI * 1.5)) {\n                    start = -Math.PI + Math.PI / 360;\n                    end = -Math.PI / 360;\n                    upperHalf = true;\n                }\n                // Check if dataLabels should be render in the upper half of the circle\n                if (end - start > Math.PI) {\n                    upperHalf = false;\n                    moreThanHalf = true;\n                    // Close to the full circle, add some padding so that the SVG\n                    // renderer treats it as separate points (#18884).\n                    if ((end - start) > 2 * Math.PI - 0.01) {\n                        start += 0.01;\n                        end -= 0.01;\n                    }\n                }\n                if (this.dataLabelPath) {\n                    this.dataLabelPath = this.dataLabelPath.destroy();\n                }\n                // All times\n                this.dataLabelPath = renderer\n                    .arc({\n                    open: true,\n                    longArc: moreThanHalf ? 1 : 0\n                })\n                    .attr({\n                    start: (upperHalf ? start : end),\n                    end: (upperHalf ? end : start),\n                    clockwise: +upperHalf,\n                    x: shapeArgs.x,\n                    y: shapeArgs.y,\n                    r: (r + shapeArgs.innerR) / 2\n                })\n                    .add(renderer.defs);\n                return this.dataLabelPath;\n            }\n            isValid() {\n                return true;\n            }\n        }\n        extend(SunburstPoint.prototype, {\n            getClassName: Point.prototype.getClassName,\n            haloPath: Point.prototype.haloPath,\n            setState: Point.prototype.setState\n        });\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SunburstPoint;\n    });\n    _registerModule(_modules, 'Series/Sunburst/SunburstUtilities.js', [_modules['Core/Series/SeriesRegistry.js'], _modules['Core/Utilities.js']], function (SeriesRegistry, U) {\n        /* *\n         *\n         *  This module implements sunburst charts in Highcharts.\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { seriesTypes: { treemap: TreemapSeries } } = SeriesRegistry;\n        const { isNumber, isObject, merge } = U;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /**\n         * @private\n         * @function calculateLevelSizes\n         *\n         * @param {Object} levelOptions\n         * Map of level to its options.\n         *\n         * @param {Highcharts.Dictionary<number>} params\n         * Object containing number parameters `innerRadius` and `outerRadius`.\n         *\n         * @return {Highcharts.SunburstSeriesLevelsOptions|undefined}\n         * Returns the modified options, or undefined.\n         */\n        function calculateLevelSizes(levelOptions, params) {\n            const p = isObject(params) ? params : {};\n            let result, totalWeight = 0, diffRadius, levels, levelsNotIncluded, remainingSize, from, to;\n            if (isObject(levelOptions)) {\n                result = merge({}, levelOptions);\n                from = isNumber(p.from) ? p.from : 0;\n                to = isNumber(p.to) ? p.to : 0;\n                levels = range(from, to);\n                levelsNotIncluded = Object.keys(result).filter((key) => (levels.indexOf(+key) === -1));\n                diffRadius = remainingSize = isNumber(p.diffRadius) ?\n                    p.diffRadius : 0;\n                // Convert percentage to pixels.\n                // Calculate the remaining size to divide between \"weight\" levels.\n                // Calculate total weight to use in conversion from weight to\n                // pixels.\n                for (const level of levels) {\n                    const options = result[level], unit = options.levelSize.unit, value = options.levelSize.value;\n                    if (unit === 'weight') {\n                        totalWeight += value;\n                    }\n                    else if (unit === 'percentage') {\n                        options.levelSize = {\n                            unit: 'pixels',\n                            value: (value / 100) * diffRadius\n                        };\n                        remainingSize -= options.levelSize.value;\n                    }\n                    else if (unit === 'pixels') {\n                        remainingSize -= value;\n                    }\n                }\n                // Convert weight to pixels.\n                for (const level of levels) {\n                    const options = result[level];\n                    if (options.levelSize.unit === 'weight') {\n                        const weight = options.levelSize.value;\n                        result[level].levelSize = {\n                            unit: 'pixels',\n                            value: (weight / totalWeight) * remainingSize\n                        };\n                    }\n                }\n                // Set all levels not included in interval [from,to] to have 0\n                // pixels.\n                for (const level of levelsNotIncluded) {\n                    result[level].levelSize = {\n                        value: 0,\n                        unit: 'pixels'\n                    };\n                }\n            }\n            return result;\n        }\n        /**\n         * @private\n         */\n        function getLevelFromAndTo({ level, height }) {\n            //  Never displays level below 1\n            const from = level > 0 ? level : 1;\n            const to = level + height;\n            return { from, to };\n        }\n        /**\n         * TODO introduce step, which should default to 1.\n         * @private\n         */\n        function range(from, to) {\n            const result = [];\n            if (isNumber(from) && isNumber(to) && from <= to) {\n                for (let i = from; i <= to; i++) {\n                    result.push(i);\n                }\n            }\n            return result;\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n        const SunburstUtilities = {\n            calculateLevelSizes,\n            getLevelFromAndTo,\n            range,\n            recursive: TreemapSeries.prototype.utils.recursive\n        };\n\n        return SunburstUtilities;\n    });\n    _registerModule(_modules, 'Series/Sunburst/SunburstNode.js', [_modules['Series/Treemap/TreemapNode.js']], function (TreemapNode) {\n        /* *\n         *\n         *  (c) 2010-2024 Pawel Lysy\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class SunburstNode extends TreemapNode {\n        }\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SunburstNode;\n    });\n    _registerModule(_modules, 'Series/Sunburst/SunburstSeriesDefaults.js', [], function () {\n        /* *\n         *\n         *  This module implements sunburst charts in Highcharts.\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        /* *\n         *\n         *  API Options\n         *\n         * */\n        /**\n         * A Sunburst displays hierarchical data, where a level in the hierarchy is\n         * represented by a circle. The center represents the root node of the tree.\n         * The visualization bears a resemblance to both treemap and pie charts.\n         *\n         * @sample highcharts/demo/sunburst\n         *         Sunburst chart\n         *\n         * @extends      plotOptions.pie\n         * @excluding    allAreas, clip, colorAxis, colorKey, compare, compareBase,\n         *               dataGrouping, depth, dragDrop, endAngle, gapSize, gapUnit,\n         *               ignoreHiddenPoint, innerSize, joinBy, legendType, linecap,\n         *               minSize, navigatorOptions, pointRange\n         * @product      highcharts\n         * @requires     modules/sunburst.js\n         * @optionparent plotOptions.sunburst\n         *\n         * @private\n         */\n        const SunburstSeriesDefaults = {\n            /**\n             * Options for the breadcrumbs, the navigation at the top leading the\n             * way up through the traversed levels.\n             *\n             * @since 10.0.0\n             * @product   highcharts\n             * @extends   navigation.breadcrumbs\n             * @apioption plotOptions.sunburst.breadcrumbs\n             */\n            /**\n             * Set options on specific levels. Takes precedence over series options,\n             * but not point options.\n             *\n             * @sample highcharts/demo/sunburst\n             *         Sunburst chart\n             *\n             * @type      {Array<*>}\n             * @apioption plotOptions.sunburst.levels\n             */\n            /**\n             * Can set a `borderColor` on all points which lies on the same level.\n             *\n             * @type      {Highcharts.ColorString}\n             * @apioption plotOptions.sunburst.levels.borderColor\n             */\n            /**\n             * Can set a `borderWidth` on all points which lies on the same level.\n             *\n             * @type      {number}\n             * @apioption plotOptions.sunburst.levels.borderWidth\n             */\n            /**\n             * Can set a `borderDashStyle` on all points which lies on the same\n             * level.\n             *\n             * @type      {Highcharts.DashStyleValue}\n             * @apioption plotOptions.sunburst.levels.borderDashStyle\n             */\n            /**\n             * Can set a `color` on all points which lies on the same level.\n             *\n             * @type      {Highcharts.ColorString|Highcharts.GradientColorObject|Highcharts.PatternObject}\n             * @apioption plotOptions.sunburst.levels.color\n             */\n            /**\n             * Determines whether the chart should receive one color per point based\n             * on this level.\n             *\n             * @type      {boolean}\n             * @apioption plotOptions.sunburst.levels.colorByPoint\n             */\n            /**\n             * Can set a `colorVariation` on all points which lies on the same\n             * level.\n             *\n             * @apioption plotOptions.sunburst.levels.colorVariation\n             */\n            /**\n             * The key of a color variation. Currently supports `brightness` only.\n             *\n             * @type      {string}\n             * @apioption plotOptions.sunburst.levels.colorVariation.key\n             */\n            /**\n             * The ending value of a color variation. The last sibling will receive\n             * this value.\n             *\n             * @type      {number}\n             * @apioption plotOptions.sunburst.levels.colorVariation.to\n             */\n            /**\n             * Can set `dataLabels` on all points which lies on the same level.\n             *\n             * @extends   plotOptions.sunburst.dataLabels\n             * @apioption plotOptions.sunburst.levels.dataLabels\n             */\n            /**\n             * Decides which level takes effect from the options set in the levels\n             * object.\n             *\n             * @sample highcharts/demo/sunburst\n             *         Sunburst chart\n             *\n             * @type      {number}\n             * @apioption plotOptions.sunburst.levels.level\n             */\n            /**\n             * Can set a `levelSize` on all points which lies on the same level.\n             *\n             * @type      {Object}\n             * @apioption plotOptions.sunburst.levels.levelSize\n             */\n            /**\n             * When enabled the user can click on a point which is a parent and\n             * zoom in on its children. Deprecated and replaced by\n             * [allowTraversingTree](#plotOptions.sunburst.allowTraversingTree).\n             *\n             * @deprecated\n             * @type      {boolean}\n             * @default   false\n             * @since     6.0.0\n             * @product   highcharts\n             * @apioption plotOptions.sunburst.allowDrillToNode\n             */\n            /**\n             * When enabled the user can click on a point which is a parent and\n             * zoom in on its children.\n             *\n             * @type      {boolean}\n             * @default   false\n             * @since     7.0.3\n             * @product   highcharts\n             * @apioption plotOptions.sunburst.allowTraversingTree\n             */\n            /**\n             * The center of the sunburst chart relative to the plot area. Can be\n             * percentages or pixel values.\n             *\n             * @sample {highcharts} highcharts/plotoptions/pie-center/\n             *         Centered at 100, 100\n             *\n             * @type    {Array<number|string>}\n             * @default [\"50%\", \"50%\"]\n             * @product highcharts\n             *\n             * @private\n             */\n            center: ['50%', '50%'],\n            /**\n             * @product highcharts\n             *\n             * @private\n             */\n            clip: false,\n            colorByPoint: false,\n            /**\n             * Disable inherited opacity from Treemap series.\n             *\n             * @ignore-option\n             *\n             * @private\n             */\n            opacity: 1,\n            /**\n             * @declare Highcharts.SeriesSunburstDataLabelsOptionsObject\n             *\n             * @private\n             */\n            dataLabels: {\n                allowOverlap: true,\n                defer: true,\n                /**\n                 * Decides how the data label will be rotated relative to the\n                 * perimeter of the sunburst. Valid values are `circular`, `auto`,\n                 * `parallel` and `perpendicular`. When `circular`, the best fit\n                 * will be computed for the point, so that the label is curved\n                 * around the center when there is room for it, otherwise\n                 * perpendicular. The legacy `auto` option works similar to\n                 * `circular`, but instead of curving the labels they are tangent to\n                 * the perimeter.\n                 *\n                 * The `rotation` option takes precedence over `rotationMode`.\n                 *\n                 * @type       {string}\n                 * @sample {highcharts}\n                 *         highcharts/plotoptions/sunburst-datalabels-rotationmode-circular/\n                 *         Circular rotation mode\n                 * @validvalue [\"auto\", \"perpendicular\", \"parallel\", \"circular\"]\n                 * @since      6.0.0\n                 */\n                rotationMode: 'circular',\n                style: {\n                    /** @internal */\n                    textOverflow: 'ellipsis'\n                }\n            },\n            /**\n             * Which point to use as a root in the visualization.\n             *\n             * @type {string}\n             *\n             * @private\n             */\n            rootId: void 0,\n            /**\n             * Used together with the levels and `allowDrillToNode` options. When\n             * set to false the first level visible when drilling is considered\n             * to be level one. Otherwise the level will be the same as the tree\n             * structure.\n             *\n             * @private\n             */\n            levelIsConstant: true,\n            /**\n             * Determines the width of the ring per level.\n             *\n             * @sample {highcharts} highcharts/plotoptions/sunburst-levelsize/\n             *         Sunburst with various sizes per level\n             *\n             * @since 6.0.5\n             *\n             * @private\n             */\n            levelSize: {\n                /**\n                 * The value used for calculating the width of the ring. Its' affect\n                 * is determined by `levelSize.unit`.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/sunburst-levelsize/\n                 *         Sunburst with various sizes per level\n                 */\n                value: 1,\n                /**\n                 * How to interpret `levelSize.value`.\n                 *\n                 * - `percentage` gives a width relative to result of outer radius\n                 *   minus inner radius.\n                 *\n                 * - `pixels` gives the ring a fixed width in pixels.\n                 *\n                 * - `weight` takes the remaining width after percentage and pixels,\n                 *   and distributes it across all \"weighted\" levels. The value\n                 *   relative to the sum of all weights determines the width.\n                 *\n                 * @sample {highcharts} highcharts/plotoptions/sunburst-levelsize/\n                 *         Sunburst with various sizes per level\n                 *\n                 * @validvalue [\"percentage\", \"pixels\", \"weight\"]\n                 */\n                unit: 'weight'\n            },\n            /**\n             * Options for the button appearing when traversing down in a sunburst.\n             * Since v9.3.3 the `traverseUpButton` is replaced by `breadcrumbs`.\n             *\n             * @extends   plotOptions.treemap.traverseUpButton\n             * @since     6.0.0\n             * @deprecated\n             * @apioption plotOptions.sunburst.traverseUpButton\n             *\n             */\n            /**\n             * If a point is sliced, moved out from the center, how many pixels\n             * should it be moved?.\n             *\n             * @sample highcharts/plotoptions/sunburst-sliced\n             *         Sliced sunburst\n             *\n             * @since 6.0.4\n             *\n             * @private\n             */\n            slicedOffset: 10\n        };\n        /**\n         * A `sunburst` series. If the [type](#series.sunburst.type) option is\n         * not specified, it is inherited from [chart.type](#chart.type).\n         *\n         * @extends   series,plotOptions.sunburst\n         * @excluding dataParser, dataURL, stack, dataSorting, boostThreshold,\n         *            boostBlending\n         * @product   highcharts\n         * @requires  modules/sunburst.js\n         * @apioption series.sunburst\n         */\n        /**\n         * @type      {Array<number|null|*>}\n         * @extends   series.treemap.data\n         * @excluding x, y\n         * @product   highcharts\n         * @apioption series.sunburst.data\n         */\n        /**\n         * @type      {Highcharts.SeriesSunburstDataLabelsOptionsObject|Array<Highcharts.SeriesSunburstDataLabelsOptionsObject>}\n         * @product   highcharts\n         * @apioption series.sunburst.data.dataLabels\n         */\n        /**\n         * The value of the point, resulting in a relative area of the point\n         * in the sunburst.\n         *\n         * @type      {number|null}\n         * @since     6.0.0\n         * @product   highcharts\n         * @apioption series.sunburst.data.value\n         */\n        /**\n         * Use this option to build a tree structure. The value should be the id of the\n         * point which is the parent. If no points has a matching id, or this option is\n         * undefined, then the parent will be set to the root.\n         *\n         * @type      {string}\n         * @since     6.0.0\n         * @product   highcharts\n         * @apioption series.sunburst.data.parent\n         */\n        /**\n          * Whether to display a slice offset from the center. When a sunburst point is\n          * sliced, its children are also offset.\n          *\n          * @sample highcharts/plotoptions/sunburst-sliced\n          *         Sliced sunburst\n          *\n          * @type      {boolean}\n          * @default   false\n          * @since     6.0.4\n          * @product   highcharts\n          * @apioption series.sunburst.data.sliced\n          */\n        ''; // Detach doclets above\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SunburstSeriesDefaults;\n    });\n    _registerModule(_modules, 'Series/Sunburst/SunburstSeries.js', [_modules['Series/CenteredUtilities.js'], _modules['Core/Globals.js'], _modules['Core/Series/SeriesRegistry.js'], _modules['Series/Sunburst/SunburstPoint.js'], _modules['Series/Sunburst/SunburstUtilities.js'], _modules['Series/TreeUtilities.js'], _modules['Core/Utilities.js'], _modules['Series/Sunburst/SunburstNode.js'], _modules['Series/Sunburst/SunburstSeriesDefaults.js']], function (CU, H, SeriesRegistry, SunburstPoint, SunburstUtilities, TU, U, SunburstNode, SunburstSeriesDefaults) {\n        /* *\n         *\n         *  This module implements sunburst charts in Highcharts.\n         *\n         *  (c) 2016-2024 Highsoft AS\n         *\n         *  Authors: Jon Arild Nygard\n         *\n         *  License: www.highcharts.com/license\n         *\n         *  !!!!!!! SOURCE GETS TRANSPILED BY TYPESCRIPT. EDIT TS FILE ONLY. !!!!!!!\n         *\n         * */\n        const { getCenter, getStartAndEndRadians } = CU;\n        const { noop } = H;\n        const { column: ColumnSeries, treemap: TreemapSeries } = SeriesRegistry.seriesTypes;\n        const { getColor, getLevelOptions, setTreeValues, updateRootId } = TU;\n        const { defined, error, extend, fireEvent, isNumber, isObject, isString, merge, splat } = U;\n        /* *\n         *\n         *  Constants\n         *\n         * */\n        const rad2deg = 180 / Math.PI;\n        /* *\n         *\n         *  Functions\n         *\n         * */\n        /** @private */\n        function isBoolean(x) {\n            return typeof x === 'boolean';\n        }\n        /**\n         * Find a set of coordinates given a start coordinates, an angle, and a\n         * distance.\n         *\n         * @private\n         * @function getEndPoint\n         *\n         * @param {number} x\n         *        Start coordinate x\n         *\n         * @param {number} y\n         *        Start coordinate y\n         *\n         * @param {number} angle\n         *        Angle in radians\n         *\n         * @param {number} distance\n         *        Distance from start to end coordinates\n         *\n         * @return {Highcharts.SVGAttributes}\n         *         Returns the end coordinates, x and y.\n         */\n        const getEndPoint = function getEndPoint(x, y, angle, distance) {\n            return {\n                x: x + (Math.cos(angle) * distance),\n                y: y + (Math.sin(angle) * distance)\n            };\n        };\n        /** @private */\n        function getDlOptions(params) {\n            // Set options to new object to avoid problems with scope\n            const point = params.point, shape = isObject(params.shapeArgs) ? params.shapeArgs : {}, optionsPoint = (isObject(params.optionsPoint) ?\n                params.optionsPoint.dataLabels :\n                {}), \n            // The splat was used because levels dataLabels\n            // options doesn't work as an array\n            optionsLevel = splat(isObject(params.level) ?\n                params.level.dataLabels :\n                {})[0], options = merge({\n                style: {}\n            }, optionsLevel, optionsPoint);\n            let rotationRad, rotation, rotationMode = options.rotationMode;\n            if (!isNumber(options.rotation)) {\n                if (rotationMode === 'auto' || rotationMode === 'circular') {\n                    if (options.useHTML &&\n                        rotationMode === 'circular') {\n                        // Change rotationMode to 'auto' to avoid using text paths\n                        // for HTML labels, see #18953\n                        rotationMode = 'auto';\n                    }\n                    if (point.innerArcLength < 1 &&\n                        point.outerArcLength > shape.radius) {\n                        rotationRad = 0;\n                        // Trigger setTextPath function to get textOutline etc.\n                        if (point.dataLabelPath && rotationMode === 'circular') {\n                            options.textPath = {\n                                enabled: true\n                            };\n                        }\n                    }\n                    else if (point.innerArcLength > 1 &&\n                        point.outerArcLength > 1.5 * shape.radius) {\n                        if (rotationMode === 'circular') {\n                            options.textPath = {\n                                enabled: true,\n                                attributes: {\n                                    dy: 5\n                                }\n                            };\n                        }\n                        else {\n                            rotationMode = 'parallel';\n                        }\n                    }\n                    else {\n                        // Trigger the destroyTextPath function\n                        if (point.dataLabel &&\n                            point.dataLabel.textPath &&\n                            rotationMode === 'circular') {\n                            options.textPath = {\n                                enabled: false\n                            };\n                        }\n                        rotationMode = 'perpendicular';\n                    }\n                }\n                if (rotationMode !== 'auto' && rotationMode !== 'circular') {\n                    if (point.dataLabel && point.dataLabel.textPath) {\n                        options.textPath = {\n                            enabled: false\n                        };\n                    }\n                    rotationRad = (shape.end -\n                        (shape.end - shape.start) / 2);\n                }\n                if (rotationMode === 'parallel') {\n                    options.style.width = Math.min(shape.radius * 2.5, (point.outerArcLength + point.innerArcLength) / 2);\n                }\n                else {\n                    if (!defined(options.style.width) &&\n                        shape.radius) {\n                        options.style.width = point.node.level === 1 ?\n                            2 * shape.radius :\n                            shape.radius;\n                    }\n                }\n                if (rotationMode === 'perpendicular' &&\n                    // 16 is the inferred line height. We don't know the real line\n                    // yet because the label is not rendered. A better approach for this\n                    // would be to hide the label from the `alignDataLabel` function\n                    // when the actual line height is known.\n                    point.outerArcLength < 16) {\n                    options.style.width = 1;\n                }\n                // Apply padding (#8515)\n                options.style.width = Math.max(options.style.width - 2 * (options.padding || 0), 1);\n                rotation = (rotationRad * rad2deg) % 180;\n                if (rotationMode === 'parallel') {\n                    rotation -= 90;\n                }\n                // Prevent text from rotating upside down\n                if (rotation > 90) {\n                    rotation -= 180;\n                }\n                else if (rotation < -90) {\n                    rotation += 180;\n                }\n                options.rotation = rotation;\n            }\n            if (options.textPath) {\n                if (point.shapeExisting.innerR === 0 &&\n                    options.textPath.enabled) {\n                    // Enable rotation to render text\n                    options.rotation = 0;\n                    // Center dataLabel - disable textPath\n                    options.textPath.enabled = false;\n                    // Setting width and padding\n                    options.style.width = Math.max((point.shapeExisting.r * 2) -\n                        2 * (options.padding || 0), 1);\n                }\n                else if (point.dlOptions &&\n                    point.dlOptions.textPath &&\n                    !point.dlOptions.textPath.enabled &&\n                    (rotationMode === 'circular')) {\n                    // Bring dataLabel back if was a center dataLabel\n                    options.textPath.enabled = true;\n                }\n                if (options.textPath.enabled) {\n                    // Enable rotation to render text\n                    options.rotation = 0;\n                    // Setting width and padding\n                    options.style.width = Math.max((point.outerArcLength +\n                        point.innerArcLength) / 2 -\n                        2 * (options.padding || 0), 1);\n                }\n            }\n            return options;\n        }\n        /** @private */\n        function getAnimation(shape, params) {\n            const point = params.point, radians = params.radians, innerR = params.innerR, idRoot = params.idRoot, idPreviousRoot = params.idPreviousRoot, shapeExisting = params.shapeExisting, shapeRoot = params.shapeRoot, shapePreviousRoot = params.shapePreviousRoot, visible = params.visible;\n            let from = {}, to = {\n                end: shape.end,\n                start: shape.start,\n                innerR: shape.innerR,\n                r: shape.r,\n                x: shape.x,\n                y: shape.y\n            };\n            if (visible) {\n                // Animate points in\n                if (!point.graphic && shapePreviousRoot) {\n                    if (idRoot === point.id) {\n                        from = {\n                            start: radians.start,\n                            end: radians.end\n                        };\n                    }\n                    else {\n                        from = (shapePreviousRoot.end <= shape.start) ? {\n                            start: radians.end,\n                            end: radians.end\n                        } : {\n                            start: radians.start,\n                            end: radians.start\n                        };\n                    }\n                    // Animate from center and outwards.\n                    from.innerR = from.r = innerR;\n                }\n            }\n            else {\n                // Animate points out\n                if (point.graphic) {\n                    if (idPreviousRoot === point.id) {\n                        to = {\n                            innerR: innerR,\n                            r: innerR\n                        };\n                    }\n                    else if (shapeRoot) {\n                        to = (shapeRoot.end <= shapeExisting.start) ?\n                            {\n                                innerR: innerR,\n                                r: innerR,\n                                start: radians.end,\n                                end: radians.end\n                            } : {\n                            innerR: innerR,\n                            r: innerR,\n                            start: radians.start,\n                            end: radians.start\n                        };\n                    }\n                }\n            }\n            return {\n                from: from,\n                to: to\n            };\n        }\n        /** @private */\n        function getDrillId(point, idRoot, mapIdToNode) {\n            const node = point.node;\n            let drillId, nodeRoot;\n            if (!node.isLeaf) {\n                // When it is the root node, the drillId should be set to parent.\n                if (idRoot === point.id) {\n                    nodeRoot = mapIdToNode[idRoot];\n                    drillId = nodeRoot.parent;\n                }\n                else {\n                    drillId = point.id;\n                }\n            }\n            return drillId;\n        }\n        /** @private */\n        function cbSetTreeValuesBefore(node, options) {\n            const mapIdToNode = options.mapIdToNode, parent = node.parent, nodeParent = parent ? mapIdToNode[parent] : void 0, series = options.series, chart = series.chart, points = series.points, point = points[node.i], colors = series.options.colors || chart && chart.options.colors, colorInfo = getColor(node, {\n                colors: colors,\n                colorIndex: series.colorIndex,\n                index: options.index,\n                mapOptionsToLevel: options.mapOptionsToLevel,\n                parentColor: nodeParent && nodeParent.color,\n                parentColorIndex: nodeParent && nodeParent.colorIndex,\n                series: options.series,\n                siblings: options.siblings\n            });\n            node.color = colorInfo.color;\n            node.colorIndex = colorInfo.colorIndex;\n            if (point) {\n                point.color = node.color;\n                point.colorIndex = node.colorIndex;\n                // Set slicing on node, but avoid slicing the top node.\n                node.sliced = (node.id !== options.idRoot) ? point.sliced : false;\n            }\n            return node;\n        }\n        /* *\n         *\n         *  Class\n         *\n         * */\n        class SunburstSeries extends TreemapSeries {\n            /* *\n             *\n             *  Functions\n             *\n             * */\n            alignDataLabel(point, dataLabel, labelOptions) {\n                if (labelOptions.textPath && labelOptions.textPath.enabled) {\n                    return;\n                }\n                return super.alignDataLabel.apply(this, arguments);\n            }\n            /**\n             * Animate the slices in. Similar to the animation of polar charts.\n             * @private\n             */\n            animate(init) {\n                const chart = this.chart, center = [\n                    chart.plotWidth / 2,\n                    chart.plotHeight / 2\n                ], plotLeft = chart.plotLeft, plotTop = chart.plotTop, group = this.group;\n                let attribs;\n                // Initialize the animation\n                if (init) {\n                    // Scale down the group and place it in the center\n                    attribs = {\n                        translateX: center[0] + plotLeft,\n                        translateY: center[1] + plotTop,\n                        scaleX: 0.001,\n                        scaleY: 0.001,\n                        rotation: 10,\n                        opacity: 0.01\n                    };\n                    group.attr(attribs);\n                    // Run the animation\n                }\n                else {\n                    attribs = {\n                        translateX: plotLeft,\n                        translateY: plotTop,\n                        scaleX: 1,\n                        scaleY: 1,\n                        rotation: 0,\n                        opacity: 1\n                    };\n                    group.animate(attribs, this.options.animation);\n                }\n            }\n            drawPoints() {\n                const series = this, mapOptionsToLevel = series.mapOptionsToLevel, shapeRoot = series.shapeRoot, group = series.group, hasRendered = series.hasRendered, idRoot = series.rootNode, idPreviousRoot = series.idPreviousRoot, nodeMap = series.nodeMap, nodePreviousRoot = nodeMap[idPreviousRoot], shapePreviousRoot = nodePreviousRoot && nodePreviousRoot.shapeArgs, points = series.points, radians = series.startAndEndRadians, chart = series.chart, optionsChart = chart && chart.options && chart.options.chart || {}, animation = (isBoolean(optionsChart.animation) ?\n                    optionsChart.animation :\n                    true), positions = series.center, center = {\n                    x: positions[0],\n                    y: positions[1]\n                }, innerR = positions[3] / 2, renderer = series.chart.renderer, hackDataLabelAnimation = !!(animation &&\n                    hasRendered &&\n                    idRoot !== idPreviousRoot &&\n                    series.dataLabelsGroup);\n                let animateLabels, animateLabelsCalled = false, addedHack = false;\n                if (hackDataLabelAnimation) {\n                    series.dataLabelsGroup.attr({ opacity: 0 });\n                    animateLabels = function () {\n                        const s = series;\n                        animateLabelsCalled = true;\n                        if (s.dataLabelsGroup) {\n                            s.dataLabelsGroup.animate({\n                                opacity: 1,\n                                visibility: 'inherit'\n                            });\n                        }\n                    };\n                }\n                for (const point of points) {\n                    const node = point.node, level = mapOptionsToLevel[node.level], shapeExisting = (point.shapeExisting || {}), shape = node.shapeArgs || {}, visible = !!(node.visible && node.shapeArgs);\n                    let animationInfo, onComplete;\n                    // Border radius requires the border-radius.js module. Adding it\n                    // here because the SunburstSeries is a mess and I can't find the\n                    // regular shapeArgs. Usually shapeArgs are created in the series'\n                    // `translate` function and then passed directly on to the renderer\n                    // in the `drawPoints` function.\n                    shape.borderRadius = series.options.borderRadius;\n                    if (hasRendered && animation) {\n                        animationInfo = getAnimation(shape, {\n                            center: center,\n                            point: point,\n                            radians: radians,\n                            innerR: innerR,\n                            idRoot: idRoot,\n                            idPreviousRoot: idPreviousRoot,\n                            shapeExisting: shapeExisting,\n                            shapeRoot: shapeRoot,\n                            shapePreviousRoot: shapePreviousRoot,\n                            visible: visible\n                        });\n                    }\n                    else {\n                        // When animation is disabled, attr is called from animation.\n                        animationInfo = {\n                            to: shape,\n                            from: {}\n                        };\n                    }\n                    extend(point, {\n                        shapeExisting: shape,\n                        tooltipPos: [shape.plotX, shape.plotY],\n                        drillId: getDrillId(point, idRoot, nodeMap),\n                        name: '' + (point.name || point.id || point.index),\n                        plotX: shape.plotX,\n                        plotY: shape.plotY,\n                        value: node.val,\n                        isInside: visible,\n                        isNull: !visible // Used for dataLabels & point.draw\n                    });\n                    point.dlOptions = getDlOptions({\n                        point: point,\n                        level: level,\n                        optionsPoint: point.options,\n                        shapeArgs: shape\n                    });\n                    if (!addedHack && visible) {\n                        addedHack = true;\n                        onComplete = animateLabels;\n                    }\n                    point.draw({\n                        animatableAttribs: animationInfo.to,\n                        attribs: extend(animationInfo.from, (!chart.styledMode && series.pointAttribs(point, (point.selected && 'select')))),\n                        onComplete: onComplete,\n                        group: group,\n                        renderer: renderer,\n                        shapeType: 'arc',\n                        shapeArgs: shape\n                    });\n                }\n                // Draw data labels after points\n                // TODO draw labels one by one to avoid additional looping\n                if (hackDataLabelAnimation && addedHack) {\n                    series.hasRendered = false;\n                    series.options.dataLabels.defer = true;\n                    ColumnSeries.prototype.drawDataLabels.call(series);\n                    series.hasRendered = true;\n                    // If animateLabels is called before labels were hidden, then call\n                    // it again.\n                    if (animateLabelsCalled) {\n                        animateLabels();\n                    }\n                }\n                else {\n                    ColumnSeries.prototype.drawDataLabels.call(series);\n                }\n                series.idPreviousRoot = idRoot;\n            }\n            /**\n             * The layout algorithm for the levels.\n             * @private\n             */\n            layoutAlgorithm(parent, children, options) {\n                let startAngle = parent.start;\n                const range = parent.end - startAngle, total = parent.val, x = parent.x, y = parent.y, radius = ((options &&\n                    isObject(options.levelSize) &&\n                    isNumber(options.levelSize.value)) ?\n                    options.levelSize.value :\n                    0), innerRadius = parent.r, outerRadius = innerRadius + radius, slicedOffset = options && isNumber(options.slicedOffset) ?\n                    options.slicedOffset :\n                    0;\n                return (children || []).reduce((arr, child) => {\n                    const percentage = (1 / total) * child.val, radians = percentage * range, radiansCenter = startAngle + (radians / 2), offsetPosition = getEndPoint(x, y, radiansCenter, slicedOffset), values = {\n                        x: child.sliced ? offsetPosition.x : x,\n                        y: child.sliced ? offsetPosition.y : y,\n                        innerR: innerRadius,\n                        r: outerRadius,\n                        radius: radius,\n                        start: startAngle,\n                        end: startAngle + radians\n                    };\n                    arr.push(values);\n                    startAngle = values.end;\n                    return arr;\n                }, []);\n            }\n            setRootNode(id, redraw, eventArguments) {\n                const series = this;\n                if ( // If the target node is the only one at level 1, skip it. (#18658)\n                series.nodeMap[id].level === 1 &&\n                    series.nodeList\n                        .filter((node) => node.level === 1)\n                        .length === 1) {\n                    if (series.idPreviousRoot === '') {\n                        return;\n                    }\n                    id = '';\n                }\n                super.setRootNode(id, redraw, eventArguments);\n            }\n            /**\n             * Set the shape arguments on the nodes. Recursive from root down.\n             * @private\n             */\n            setShapeArgs(parent, parentValues, mapOptionsToLevel) {\n                const level = parent.level + 1, options = mapOptionsToLevel[level], \n                // Collect all children which should be included\n                children = parent.children.filter(function (n) {\n                    return n.visible;\n                }), twoPi = 6.28; // Two times Pi.\n                let childrenValues = [];\n                childrenValues = this.layoutAlgorithm(parentValues, children, options);\n                let i = -1;\n                for (const child of children) {\n                    const values = childrenValues[++i], angle = values.start + ((values.end - values.start) / 2), radius = values.innerR + ((values.r - values.innerR) / 2), radians = (values.end - values.start), isCircle = (values.innerR === 0 && radians > twoPi), center = (isCircle ?\n                        { x: values.x, y: values.y } :\n                        getEndPoint(values.x, values.y, angle, radius)), val = (child.val ?\n                        (child.childrenTotal > child.val ?\n                            child.childrenTotal :\n                            child.val) :\n                        child.childrenTotal);\n                    // The inner arc length is a convenience for data label filters.\n                    if (this.points[child.i]) {\n                        this.points[child.i].innerArcLength = radians * values.innerR;\n                        this.points[child.i].outerArcLength = radians * values.r;\n                    }\n                    child.shapeArgs = merge(values, {\n                        plotX: center.x,\n                        plotY: center.y\n                    });\n                    child.values = merge(values, {\n                        val: val\n                    });\n                    // If node has children, then call method recursively\n                    if (child.children.length) {\n                        this.setShapeArgs(child, child.values, mapOptionsToLevel);\n                    }\n                }\n            }\n            translate() {\n                const series = this, options = series.options, positions = series.center = series.getCenter(), radians = series.startAndEndRadians = getStartAndEndRadians(options.startAngle, options.endAngle), innerRadius = positions[3] / 2, outerRadius = positions[2] / 2, diffRadius = outerRadius - innerRadius, \n                // NOTE: updateRootId modifies series.\n                rootId = updateRootId(series);\n                let mapIdToNode = series.nodeMap, mapOptionsToLevel, nodeRoot = mapIdToNode && mapIdToNode[rootId], nodeIds = {};\n                series.shapeRoot = nodeRoot && nodeRoot.shapeArgs;\n                if (!series.processedXData) { // Hidden series\n                    series.processData();\n                }\n                series.generatePoints();\n                fireEvent(series, 'afterTranslate');\n                // @todo Only if series.isDirtyData is true\n                const tree = series.tree = series.getTree();\n                // Render traverseUpButton, after series.nodeMap i calculated.\n                mapIdToNode = series.nodeMap;\n                nodeRoot = mapIdToNode[rootId];\n                const idTop = isString(nodeRoot.parent) ? nodeRoot.parent : '', nodeTop = mapIdToNode[idTop], { from, to } = SunburstUtilities.getLevelFromAndTo(nodeRoot);\n                mapOptionsToLevel = getLevelOptions({\n                    from,\n                    levels: series.options.levels,\n                    to,\n                    defaults: {\n                        colorByPoint: options.colorByPoint,\n                        dataLabels: options.dataLabels,\n                        levelIsConstant: options.levelIsConstant,\n                        levelSize: options.levelSize,\n                        slicedOffset: options.slicedOffset\n                    }\n                });\n                // NOTE consider doing calculateLevelSizes in a callback to\n                // getLevelOptions\n                mapOptionsToLevel = SunburstUtilities.calculateLevelSizes(mapOptionsToLevel, {\n                    diffRadius,\n                    from,\n                    to\n                });\n                // TODO Try to combine setTreeValues & setColorRecursive to avoid\n                //  unnecessary looping.\n                setTreeValues(tree, {\n                    before: cbSetTreeValuesBefore,\n                    idRoot: rootId,\n                    levelIsConstant: options.levelIsConstant,\n                    mapOptionsToLevel: mapOptionsToLevel,\n                    mapIdToNode: mapIdToNode,\n                    points: series.points,\n                    series: series\n                });\n                const values = mapIdToNode[''].shapeArgs = {\n                    end: radians.end,\n                    r: innerRadius,\n                    start: radians.start,\n                    val: nodeRoot.val,\n                    x: positions[0],\n                    y: positions[1]\n                };\n                this.setShapeArgs(nodeTop, values, mapOptionsToLevel);\n                // Set mapOptionsToLevel on series for use in drawPoints.\n                series.mapOptionsToLevel = mapOptionsToLevel;\n                // #10669 - verify if all nodes have unique ids\n                for (const point of series.points) {\n                    if (nodeIds[point.id]) {\n                        error(31, false, series.chart);\n                    }\n                    // Map\n                    nodeIds[point.id] = true;\n                }\n                // Reset object\n                nodeIds = {};\n            }\n        }\n        /* *\n         *\n         *  Static Properties\n         *\n         * */\n        SunburstSeries.defaultOptions = merge(TreemapSeries.defaultOptions, SunburstSeriesDefaults);\n        extend(SunburstSeries.prototype, {\n            axisTypes: [],\n            drawDataLabels: noop,\n            getCenter: getCenter,\n            isCartesian: false,\n            // Mark that the sunburst is supported by the series on point feature.\n            onPointSupported: true,\n            pointAttribs: ColumnSeries.prototype.pointAttribs,\n            pointClass: SunburstPoint,\n            NodeClass: SunburstNode,\n            utils: SunburstUtilities\n        });\n        SeriesRegistry.registerSeriesType('sunburst', SunburstSeries);\n        /* *\n         *\n         *  Default Export\n         *\n         * */\n\n        return SunburstSeries;\n    });\n    _registerModule(_modules, 'masters/modules/sunburst.src.js', [_modules['Core/Globals.js'], _modules['Extensions/Breadcrumbs/Breadcrumbs.js']], function (Highcharts, Breadcrumbs) {\n\n        const G = Highcharts;\n        G.Breadcrumbs = G.Breadcrumbs || Breadcrumbs;\n        G.Breadcrumbs.compose(G.Chart, G.defaultOptions);\n\n        return Highcharts;\n    });\n}));"],"names":["factory","module","exports","define","amd","Highcharts","undefined","_modules","_registerModule","obj","path","args","fn","hasOwnProperty","apply","CustomEvent","window","dispatchEvent","detail","lang","mainBreadcrumb","options","buttonTheme","fill","height","padding","zIndex","states","select","style","color","buttonSpacing","floating","format","relativeTo","rtl","position","align","verticalAlign","x","y","separator","text","fontSize","showFullPath","useHTML","BreadcrumbsDefaults","F","H","U","composed","addEvent","defined","extend","fireEvent","isString","merge","objectEach","pick","pushUnique","onChartAfterShowResetZoom","chart","breadcrumbs","bbox","resetZoomButton","getBBox","breadcrumbsOptions","alignBreadcrumbsGroup","width","onChartDestroy","destroy","onChartGetMargins","level","breadcrumbsHeight","marginBottom","yOffset","plotTop","onChartRedraw","redraw","onChartSelection","event","resetSelection","Breadcrumbs","compose","ChartClass","highchartsDefaultOptions","constructor","userOptions","elementList","isDirty","list","chartOptions","drilldown","drillUpButton","defaultOptions","navigation","updateProperties","setList","setLevel","length","getLevel","getButtonText","breadcrumb","textFormat","defaultText","drillUpText","returnText","formatter","levelOptions","render","group","renderer","g","addClass","attr","add","renderFullPathButtons","renderSingleButton","destroySingleButton","resetElementListState","updateListElements","destroyListElements","posX","previousBreadcrumb","renderButton","updateSingleButton","xOffset","positionOptions","alignTo","bBox","additionalSpace","newPositions","posY","button","e","callDefaultEvent","buttonEvents","events","click","call","newLevel","styledMode","renderSeparator","separatorOptions","label","css","update","currentBreadcrumb","force","element","updated","rtlFactor","updateXPosition","spacing","adjustToRTL","translate","i","iEnd","isLast","setState","SeriesRegistry","SVGElement","ColorMapComposition","column","prototype","columnProto","seriesTypes","onPointAfterSetState","series","point","moveToTopOnHover","graphic","stateMarkerGraphic","pointerEvents","parentGroup","state","id","href","url","visibility","pointMembers","dataLabelOnNull","isValid","value","Infinity","isNaN","seriesMembers","colorKey","axisTypes","parallelArrays","pointArrayMap","trackerGroups","colorAttribs","ret","colorProp","pointAttribs","SeriesClass","pointClass","h","w","d","p","plot","direction","startDirection","total","nW","lW","nH","lH","elArr","lP","nR","lR","aspectRatio","Math","max","addElement","el","push","reset","childrenTotal","visible","init","children","parent","draw","params","animatableAttribs","onComplete","animation","hasRendered","attribs","getClassName","shouldDraw","shapeType","image","imageUrl","shapeArgs","animate","isNew","Object","keys","DPU","pie","PiePoint","scatter","ScatterPoint","isNumber","TreemapPoint","arguments","className","node","nodeMap","rootNode","isLeaf","interactByLeaf","allowTraversingTree","Boolean","plotY","setVisible","animationLimit","borderRadius","showInLegend","marker","colorByPoint","dataLabels","defer","enabled","name","inside","tooltip","headerFormat","pointFormat","ignoreHiddenPoint","layoutAlgorithm","layoutStartingDirection","alternateStartingDirection","levelIsConstant","traverseUpButton","borderColor","borderWidth","opacity","hover","brightness","heatmap","halo","shadow","legendSymbol","TreemapUtilities","recursive","item","func","context","next","Color","isArray","isObject","relativeLength","getColor","colorIndexByPoint","colorIndex","index","mapOptionsToLevel","parentColor","parentColorIndex","colors","siblings","points","chartOptionsChart","colorCount","variateColor","colorVariation","key","parse","brighten","to","get","getLevelOptions","defaults","converted","from","levels","result","reduce","getNodeWidth","columnCount","nodeDistance","nodeWidth","plotSizeX","test","fraction","parseFloat","nDistance","Number","setTreeValues","tree","before","idRoot","nodeRoot","mapIdToNode","optionsPoint","levelDynamic","forEach","child","newOptions","val","updateRootId","rootId","TreemapAlgorithmGroup","TreemapNode","TreemapSeriesDefaults","TU","noop","ColumnSeries","ScatterSeries","correctFloat","crisp","error","stableSort","treemapAxisDefaultValues","onSeriesAfterBindAxes","treeAxis","xAxis","yAxis","is","endOnTick","gridLineWidth","lineWidth","min","minPadding","maxPadding","startOnTick","title","tickPositions","setOptions","TreemapSeries","algorithmCalcPoints","directionChange","last","childrenArea","end","pX","pY","pW","pH","gW","gH","keep","algorithmFill","pTot","algorithmLowAspectRatio","alignDataLabel","dataLabel","labelOptions","textOverflow","textWidth","calculateChildrenAreas","area","algorithm","alternate","filter","n","ignore","childrenValues","values","pointValues","axisRatio","axisMax","createList","currentLevelNumber","target","newRootId","extraNodes","reverse","drawDataLabels","hasDataLabels","dlOptions","drawPoints","withinAnimationLimit","pointCount","groupKey","hasGraphic","shouldAnimate","isInside","r","selected","survive","drillId","drillToByLeaf","drillToByGroup","nodeParent","drillToNode","setRootNode","drillUp","trigger","getExtremes","dataMin","dataMax","colorValueData","valueMin","valueMax","getListOfParents","data","existingIds","arr","ids","listOfParents","prev","curr","indexOf","getTree","allIds","map","parentList","nodeList","buildTree","NodeClass","parentNode","hasData","processedXData","setOptionsEvent","allowDrillToNode","eventsToUnbind","onClickDrillToNode","keepEventsForUpdate","drillUpsNumber","stateOptions","borderDashStyle","setOpacity","cursor","setColorRecursive","colorInfo","setPointValues","getStrokeWidth","strokeWidth","x1","toPixels","x2","y1","y2","abs","plotX","eventArguments","previousRootId","idPreviousRoot","inactiveOtherPoints","a","b","sortIndex","sliceAndDice","squarified","strip","stripes","seriesArea","concat","len","colorAxis","setExtremes","setScale","buildKDTree","directTouch","getExtremesFromAll","getSymbol","optionalAxis","utils","registerSeriesType","Point","treemap","pInt","SunburstPoint","getDataLabelPath","shapeExisting","distance","start","angle","upperHalf","PI","moreThanHalf","dataLabelPath","arc","open","longArc","clockwise","innerR","defs","haloPath","range","calculateLevelSizes","totalWeight","diffRadius","levelsNotIncluded","remainingSize","unit","levelSize","weight","getLevelFromAndTo","center","clip","allowOverlap","rotationMode","slicedOffset","CU","SunburstUtilities","SunburstNode","SunburstSeriesDefaults","getCenter","getStartAndEndRadians","splat","rad2deg","getEndPoint","cos","sin","cbSetTreeValuesBefore","sliced","SunburstSeries","textPath","plotWidth","plotHeight","plotLeft","translateX","translateY","scaleX","scaleY","rotation","shapeRoot","nodePreviousRoot","shapePreviousRoot","radians","startAndEndRadians","optionsChart","isBoolean","positions","hackDataLabelAnimation","dataLabelsGroup","animateLabels","animateLabelsCalled","addedHack","s","animationInfo","shape","getAnimation","tooltipPos","getDrillId","isNull","getDlOptions","rotationRad","innerArcLength","outerArcLength","radius","attributes","dy","startAngle","innerRadius","outerRadius","percentage","offsetPosition","setShapeArgs","parentValues","isCircle","endAngle","nodeIds","processData","generatePoints","idTop","nodeTop","isCartesian","onPointSupported","G","Chart"],"mappings":"CAAA;;;;;;;CAOC,EACA,SAAUA,CAAO,EACV,AAAkB,UAAlB,OAAOC,QAAuBA,OAAOC,OAAO,EAC5CF,EAAQ,OAAU,CAAGA,EACrBC,OAAOC,OAAO,CAAGF,GACV,AAAkB,YAAlB,OAAOG,QAAyBA,OAAOC,GAAG,CACjDD,OAAO,8BAA+B,CAAC,aAAa,CAAE,SAAUE,CAAU,EAGtE,OAFAL,EAAQK,GACRL,EAAQK,UAAU,CAAGA,EACdL,CACX,GAEAA,EAAQ,AAAsB,aAAtB,OAAOK,WAA6BA,WAAaC,KAAAA,EAEjE,EAAE,SAAUD,CAAU,EAClB,aACA,IAAIE,EAAWF,EAAaA,EAAWE,QAAQ,CAAG,CAAC,EACnD,SAASC,EAAgBC,CAAG,CAAEC,CAAI,CAAEC,CAAI,CAAEC,CAAE,EACnCH,EAAII,cAAc,CAACH,KACpBD,CAAG,CAACC,EAAK,CAAGE,EAAGE,KAAK,CAAC,KAAMH,GAEA,YAAvB,OAAOI,aACPC,OAAOC,aAAa,CAAC,IAAIF,YACrB,yBACA,CAAEG,OAAQ,CAAER,KAAMA,EAAMT,OAAQQ,CAAG,CAACC,EAAK,AAAC,CAAE,IAI5D,CACAF,EAAgBD,EAAU,gDAAiD,EAAE,CAAE,WA2Q3E,MAL4B,CACxBY,KAnPS,CAOTC,eAAgB,MACpB,EA4OIC,QAjOY,CAiBZC,YAAa,CAETC,KAAM,OAENC,OAAQ,GAERC,QAAS,EAET,eAAgB,EAEhBC,OAAQ,EAERC,OAAQ,CACJC,OAAQ,CACJL,KAAM,MACV,CACJ,EACAM,MAAO,CACHC,MAAO,SACX,CACJ,EAOAC,cAAe,EA8BfC,SAAU,CAAA,EAYVC,OAAQ,KAAK,EAkBbC,WAAY,UAWZC,IAAK,CAAA,EAcLC,SAAU,CAMNC,MAAO,OAMPC,cAAe,MAMfC,EAAG,EAQHC,EAAG,KAAK,CACZ,EAMAC,UAAW,CAMPC,KAAM,IASNb,MAAO,CACHC,MAAO,UACPa,SAAU,OACd,CACJ,EAUAC,aAAc,CAAA,EAWdf,MAAO,CAAC,EAORgB,QAAS,CAAA,EAOTnB,OAAQ,CACZ,CASA,CAGJ,GACAlB,EAAgBD,EAAU,wCAAyC,CAACA,CAAQ,CAAC,gDAAgD,CAAEA,CAAQ,CAAC,qBAAqB,CAAEA,CAAQ,CAAC,kBAAkB,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAUuC,CAAmB,CAAEC,CAAC,CAAEC,CAAC,CAAEC,CAAC,EAY9P,GAAM,CAAEhB,OAAAA,CAAM,CAAE,CAAGc,EACb,CAAEG,SAAAA,CAAQ,CAAE,CAAGF,EACf,CAAEG,SAAAA,CAAQ,CAAEC,QAAAA,CAAO,CAAEC,OAAAA,CAAM,CAAEC,UAAAA,CAAS,CAAEC,SAAAA,CAAQ,CAAEC,MAAAA,CAAK,CAAEC,WAAAA,CAAU,CAAEC,KAAAA,CAAI,CAAEC,WAAAA,CAAU,CAAE,CAAGV,EAUhG,SAASW,IAEL,GAAIC,AADU,IAAI,CACRC,WAAW,CAAE,CACnB,IAAMC,EAAOF,AAFH,IAAI,CAEKG,eAAe,EAC9BH,AAHM,IAAI,CAGJG,eAAe,CAACC,OAAO,GAAIC,EAAqBL,AAHhD,IAAI,CAGkDC,WAAW,CAACzC,OAAO,CAC/E0C,GACAG,AAAsC,UAAtCA,EAAmB9B,QAAQ,CAACC,KAAK,EACjC6B,AAAkC,YAAlCA,EAAmBhC,UAAU,EAC7B2B,AAPM,IAAI,CAOJC,WAAW,CAACK,qBAAqB,CAAC,CAACJ,EAAKK,KAAK,CAAGF,EAAmBnC,aAAa,CAE9F,CACJ,CAKA,SAASsC,IACD,IAAI,CAACP,WAAW,GAChB,IAAI,CAACA,WAAW,CAACQ,OAAO,GACxB,IAAI,CAACR,WAAW,CAAG,KAAK,EAEhC,CAKA,SAASS,IACL,IAAMT,EAAc,IAAI,CAACA,WAAW,CACpC,GAAIA,GACA,CAACA,EAAYzC,OAAO,CAACW,QAAQ,EAC7B8B,EAAYU,KAAK,CAAE,CACnB,IAAMN,EAAqBJ,EAAYzC,OAAO,CAAEC,EAAc4C,EAAmB5C,WAAW,CAAEmD,EAAqB,AAACnD,CAAAA,EAAYE,MAAM,EAAI,CAAA,EACtI,EAAKF,CAAAA,EAAYG,OAAO,EAAI,CAAA,EAC5ByC,EAAmBnC,aAAa,CAAGO,EAAgB4B,EAAmB9B,QAAQ,CAACE,aAAa,AAC5FA,AAAkB,CAAA,WAAlBA,GACA,IAAI,CAACoC,YAAY,CAAG,AAAC,CAAA,IAAI,CAACA,YAAY,EAAI,CAAA,EAAKD,EAC/CX,EAAYa,OAAO,CAAGF,GAEjBnC,AAAkB,WAAlBA,GACL,IAAI,CAACsC,OAAO,EAAIH,EAChBX,EAAYa,OAAO,CAAG,CAACF,GAGvBX,EAAYa,OAAO,CAAG,KAAK,CAEnC,CACJ,CAIA,SAASE,IACL,IAAI,CAACf,WAAW,EAAI,IAAI,CAACA,WAAW,CAACgB,MAAM,EAC/C,CAKA,SAASC,EAAiBC,CAAK,EACE,CAAA,IAAzBA,EAAMC,cAAc,EACpB,IAAI,CAACnB,WAAW,EAChB,IAAI,CAACA,WAAW,CAACK,qBAAqB,EAE9C,CAkBA,MAAMe,EAMF,OAAOC,QAAQC,CAAU,CAAEC,CAAwB,CAAE,CAC7C1B,EAAWT,EAAU,iBACrBC,EAASiC,EAAY,UAAWf,GAChClB,EAASiC,EAAY,qBAAsBxB,GAC3CT,EAASiC,EAAY,aAAcb,GACnCpB,EAASiC,EAAY,SAAUP,GAC/B1B,EAASiC,EAAY,YAAaL,GAElC1B,EAAOgC,EAAyBlE,IAAI,CAAE2B,EAAoB3B,IAAI,EAEtE,CAMAmE,YAAYzB,CAAK,CAAE0B,CAAW,CAAE,CAC5B,IAAI,CAACC,WAAW,CAAG,CAAC,EACpB,IAAI,CAACC,OAAO,CAAG,CAAA,EACf,IAAI,CAACjB,KAAK,CAAG,EACb,IAAI,CAACkB,IAAI,CAAG,EAAE,CACd,IAAMC,EAAenC,EAAMK,EAAMxC,OAAO,CAACuE,SAAS,EAC9C/B,EAAMxC,OAAO,CAACuE,SAAS,CAACC,aAAa,CAAEX,EAAYY,cAAc,CAAEjC,EAAMxC,OAAO,CAAC0E,UAAU,EAAIlC,EAAMxC,OAAO,CAAC0E,UAAU,CAACjC,WAAW,CAAEyB,EACzI,CAAA,IAAI,CAAC1B,KAAK,CAAGA,EACb,IAAI,CAACxC,OAAO,CAAGsE,GAAgB,CAAC,CACpC,CAeAK,iBAAiBN,CAAI,CAAE,CACnB,IAAI,CAACO,OAAO,CAACP,GACb,IAAI,CAACQ,QAAQ,GACb,IAAI,CAACT,OAAO,CAAG,CAAA,CACnB,CAYAQ,QAAQP,CAAI,CAAE,CACV,IAAI,CAACA,IAAI,CAAGA,CAChB,CAUAQ,UAAW,CACP,IAAI,CAAC1B,KAAK,CAAG,IAAI,CAACkB,IAAI,CAACS,MAAM,EAAI,IAAI,CAACT,IAAI,CAACS,MAAM,CAAG,CACxD,CAUAC,UAAW,CACP,OAAO,IAAI,CAAC5B,KAAK,AACrB,CAcA6B,cAAcC,CAAU,CAAE,CACtB,IAA0BzC,EAAQC,AAAd,IAAI,CAAsBD,KAAK,CAAEK,EAAqBJ,AAAtD,IAAI,CAA8DzC,OAAO,CAAEF,EAAO0C,EAAMxC,OAAO,CAACF,IAAI,CAAEoF,EAAa7C,EAAKQ,EAAmBjC,MAAM,CAAEiC,EAAmBtB,YAAY,CAClM,eAAiB,kBAAmB4D,EAAcrF,GAAQuC,EAAKvC,EAAKsF,WAAW,CAAEtF,EAAKC,cAAc,EACpGsF,EAAaxC,EAAmByC,SAAS,EACzCzC,EAAmByC,SAAS,CAACL,IAC7BrE,EAAOsE,EAAY,CAAE/B,MAAO8B,EAAWM,YAAY,AAAC,EAAG/C,IAAU,GASrE,MARK,CAAA,AAACN,EAASmD,IACX,CAACA,EAAWP,MAAM,EAClBO,AAAe,OAAfA,CAAkB,GAClBtD,EAAQoD,IACRE,CAAAA,EAAa,AAACxC,EAAmBtB,YAAY,CAEzC4D,EADA,KAAOA,CACG,EAEXE,CACX,CAUA5B,QAAS,CACD,IAAI,CAACW,OAAO,EACZ,IAAI,CAACoB,MAAM,GAEX,IAAI,CAACC,KAAK,EACV,IAAI,CAACA,KAAK,CAACzE,KAAK,GAEpB,IAAI,CAACoD,OAAO,CAAG,CAAA,CACnB,CAUAoB,QAAS,CACL,IAA0BhD,EAAQC,AAAd,IAAI,CAAsBD,KAAK,CAAEK,EAAqBJ,AAAtD,IAAI,CAA8DzC,OAAO,AAEzF,EAACyC,AAFe,IAAI,CAEPgD,KAAK,EAAI5C,GACtBJ,CAAAA,AAHgB,IAAI,CAGRgD,KAAK,CAAGjD,EAAMkD,QAAQ,CAC7BC,CAAC,CAAC,qBACFC,QAAQ,CAAC,gDACTC,IAAI,CAAC,CACNxF,OAAQwC,EAAmBxC,MAAM,AACrC,GACKyF,GAAG,EAAC,EAGTjD,EAAmBtB,YAAY,CAC/B,IAAI,CAACwE,qBAAqB,GAG1B,IAAI,CAACC,kBAAkB,GAE3B,IAAI,CAAClD,qBAAqB,EAC9B,CAUAiD,uBAAwB,CAEpB,IAAI,CAACE,mBAAmB,GACxB,IAAI,CAACC,qBAAqB,GAC1B,IAAI,CAACC,kBAAkB,GACvB,IAAI,CAACC,mBAAmB,EAC5B,CAUAJ,oBAAqB,CACjB,IAA0BxD,EAAQC,AAAd,IAAI,CAAsBD,KAAK,CAAE6B,EAAO5B,AAAxC,IAAI,CAAgD4B,IAAI,CAA4C3D,EAAgBmC,AAArCJ,AAA/E,IAAI,CAAuFzC,OAAO,CAAqCU,aAAa,CAExK,IAAI,CAAC0F,mBAAmB,GAGxB,IAAMC,EAAO5D,AALO,IAAI,CAKCgD,KAAK,CAC1BhD,AANgB,IAAI,CAMRgD,KAAK,CAAC7C,OAAO,GAAGG,KAAK,CACjCrC,EACE4F,EAAqBjC,CAAI,CAACA,EAAKS,MAAM,CAAG,EAAE,AAC5C,EAACtC,EAAMgC,aAAa,EAAK,IAAI,CAACrB,KAAK,CAAG,EACtCX,EAAMgC,aAAa,CAAG/B,AAVN,IAAI,CAUc8D,YAAY,CAACD,EAAoBD,EAH7C3F,GAKjB8B,EAAMgC,aAAa,GACpB,IAAI,CAACrB,KAAK,CAAG,EAEb,IAAI,CAACqD,kBAAkB,GAGvB,IAAI,CAACP,mBAAmB,GAGpC,CAUAnD,sBAAsB2D,CAAO,CAAE,CAE3B,GAAIhE,AADgB,IAAI,CACRgD,KAAK,CAAE,CACnB,IAAM5C,EAAqBJ,AAFX,IAAI,CAEmBzC,OAAO,CAAEC,EAAc4C,EAAmB5C,WAAW,CAAEyG,EAAkB7D,EAAmB9B,QAAQ,CAAE4F,EAAW9D,AAAkC,UAAlCA,EAAmBhC,UAAU,EACjLgC,AAAkC,eAAlCA,EAAmBhC,UAAU,CAC7B,KAAK,EACL,UAAY+F,EAAOnE,AALP,IAAI,CAKegD,KAAK,CAAC7C,OAAO,GAAIiE,EAAkB,EAAK5G,CAAAA,EAAYG,OAAO,EAAI,CAAA,EAC9FyC,EAAmBnC,aAAa,AAEpCgG,CAAAA,EAAgB3D,KAAK,CAAG6D,EAAK7D,KAAK,CAAG8D,EACrCH,EAAgBvG,MAAM,CAAGyG,EAAKzG,MAAM,CAAG0G,EACvC,IAAMC,EAAe3E,EAAMuE,GAEvBD,GACAK,CAAAA,EAAa5F,CAAC,EAAIuF,CAAM,EAExBhE,AAfY,IAAI,CAeJzC,OAAO,CAACc,GAAG,EACvBgG,CAAAA,EAAa5F,CAAC,EAAIwF,EAAgB3D,KAAK,AAAD,EAE1C+D,EAAa3F,CAAC,CAAGkB,EAAKyE,EAAa3F,CAAC,CAAE,IAAI,CAACmC,OAAO,CAAE,GACpDb,AAnBgB,IAAI,CAmBRgD,KAAK,CAACzE,KAAK,CAAC8F,EAAc,CAAA,EAAMH,EAChD,CACJ,CAkBAJ,aAAatB,CAAU,CAAEoB,CAAI,CAAEU,CAAI,CAAE,CACjC,IAAMtE,EAAc,IAAI,CAAED,EAAQ,IAAI,CAACA,KAAK,CAAEK,EAAqBJ,EAAYzC,OAAO,CAAEC,EAAckC,EAAMU,EAAmB5C,WAAW,EACpI+G,EAASxE,EAAMkD,QAAQ,CACxBsB,MAAM,CAACvE,EAAYuC,aAAa,CAACC,GAAaoB,EAAMU,EAAM,SAAUE,CAAC,MAIlEC,EAFJ,IAAMC,EAAetE,EAAmBuE,MAAM,EAC1CvE,EAAmBuE,MAAM,CAACC,KAAK,CAE/BF,GACAD,CAAAA,EAAmBC,EAAaG,IAAI,CAAC7E,EAAawE,EAAGhC,EAAU,EAG1C,CAAA,IAArBiC,IAGKrE,EAAmBtB,YAAY,CAIhC0F,EAAEM,QAAQ,CAAGtC,EAAW9B,KAAK,CAH7B8D,EAAEM,QAAQ,CAAG9E,EAAYU,KAAK,CAAG,EAKrClB,EAAUQ,EAAa,KAAMwE,GAErC,EAAGhH,GACE2F,QAAQ,CAAC,iCACTE,GAAG,CAACrD,EAAYgD,KAAK,EAI1B,OAHKjD,EAAMgF,UAAU,EACjBR,EAAOnB,IAAI,CAAChD,EAAmBrC,KAAK,EAEjCwG,CACX,CAgBAS,gBAAgBpB,CAAI,CAAEU,CAAI,CAAE,CACxB,IAA0BvE,EAAQ,IAAI,CAACA,KAAK,CAA4CkF,EAAmB7E,AAAxCJ,AAA/C,IAAI,CAAuDzC,OAAO,CAAwCoB,SAAS,CACjIA,EAAYoB,EAAMkD,QAAQ,CAC3BiC,KAAK,CAACD,EAAiBrG,IAAI,CAAEgF,EAAMU,EAAM,KAAK,EAAG,KAAK,EAAG,KAAK,EAAG,CAAA,GACjEnB,QAAQ,CAAC,oCACTE,GAAG,CAACrD,AAJW,IAAI,CAIHgD,KAAK,EAI1B,OAHKjD,EAAMgF,UAAU,EACjBpG,EAAUwG,GAAG,CAACF,EAAiBlH,KAAK,EAEjCY,CACX,CAcAyG,OAAO7H,CAAO,CAAE,CACZmC,EAAM,CAAA,EAAM,IAAI,CAACnC,OAAO,CAAEA,GAC1B,IAAI,CAACiD,OAAO,GACZ,IAAI,CAACmB,OAAO,CAAG,CAAA,CACnB,CAUAoC,oBAAqB,CACjB,IAAMhE,EAAQ,IAAI,CAACA,KAAK,CAAEsF,EAAoB,IAAI,CAACzD,IAAI,CAAC,IAAI,CAAClB,KAAK,CAAG,EAAE,AACnEX,CAAAA,EAAMgC,aAAa,EACnBhC,EAAMgC,aAAa,CAACqB,IAAI,CAAC,CACrBxE,KAAM,IAAI,CAAC2D,aAAa,CAAC8C,EAC7B,EAER,CAUA7E,SAAU,CACN,IAAI,CAACgD,mBAAmB,GAGxB,IAAI,CAACG,mBAAmB,CAAC,CAAA,GAErB,IAAI,CAACX,KAAK,EACV,IAAI,CAACA,KAAK,CAACxC,OAAO,GAEtB,IAAI,CAACwC,KAAK,CAAG,KAAK,CACtB,CAUAW,oBAAoB2B,CAAK,CAAE,CACvB,IAAM5D,EAAc,IAAI,CAACA,WAAW,CACpC/B,EAAW+B,EAAa,CAAC6D,EAAS7E,KAC1B4E,CAAAA,GACA,CAAC5D,CAAW,CAAChB,EAAM,CAAC8E,OAAO,AAAD,IAE1BD,AADAA,CAAAA,EAAU7D,CAAW,CAAChB,EAAM,AAAD,EACnB6D,MAAM,EAAIgB,EAAQhB,MAAM,CAAC/D,OAAO,GACxC+E,EAAQ5G,SAAS,EAAI4G,EAAQ5G,SAAS,CAAC6B,OAAO,GAC9C,OAAO+E,EAAQhB,MAAM,CACrB,OAAOgB,EAAQ5G,SAAS,CACxB,OAAO+C,CAAW,CAAChB,EAAM,CAEjC,GACI4E,GACA,CAAA,IAAI,CAAC5D,WAAW,CAAG,CAAC,CAAA,CAE5B,CAUA8B,qBAAsB,CACd,IAAI,CAACzD,KAAK,CAACgC,aAAa,GACxB,IAAI,CAAChC,KAAK,CAACgC,aAAa,CAACvB,OAAO,GAChC,IAAI,CAACT,KAAK,CAACgC,aAAa,CAAG,KAAK,EAExC,CAUA0B,uBAAwB,CACpB9D,EAAW,IAAI,CAAC+B,WAAW,CAAE,AAAC6D,IAC1BA,EAAQC,OAAO,CAAG,CAAA,CACtB,EACJ,CAWA9B,oBAAqB,CACjB,IAA0BhC,EAAc1B,AAApB,IAAI,CAA4B0B,WAAW,CAAEzD,EAAgB+B,AAA7D,IAAI,CAAqEzC,OAAO,CAACU,aAAa,CAAwB2D,EAAO5B,AAA7H,IAAI,CAAqI4B,IAAI,CAAEvD,EAAM2B,AAArJ,IAAI,CAA6JzC,OAAO,CAACc,GAAG,CAAEoH,EAAYpH,EAAM,GAAK,EAAGqH,EAAkB,SAAUH,CAAO,CAAEI,CAAO,EACpQ,OAAOF,EAAYF,EAAQpF,OAAO,GAAGG,KAAK,CACtCmF,EAAYE,CACpB,EAAGC,EAAc,SAAUL,CAAO,CAAE3B,CAAI,CAAEU,CAAI,EAC1CiB,EAAQM,SAAS,CAACjC,EAAO2B,EAAQpF,OAAO,GAAGG,KAAK,CAAEgE,EACtD,EAEIV,EAAO5D,AAPS,IAAI,CAODgD,KAAK,CACxB0C,EAAgB1F,AARA,IAAI,CAQQgD,KAAK,CAAE/E,GACnCA,EAAeoH,EAAmB7C,EACtC,IAAK,IAAIsD,EAAI,EAAGC,EAAOnE,EAAKS,MAAM,CAAEyD,EAAIC,EAAM,EAAED,EAAG,KAE3CvB,EAAQ5F,EADZ,IAAMqH,EAASF,IAAMC,EAAO,CAGxBrE,CAAAA,CAAW,CAACc,AADhBA,CAAAA,EAAaZ,CAAI,CAACkE,EAAE,AAAD,EACQpF,KAAK,CAAC,EAE7B6D,EAASc,AADTA,CAAAA,EAAoB3D,CAAW,CAACc,EAAW9B,KAAK,CAAC,AAAD,EACrB6D,MAAM,CAE7B,AAACc,EAAkB1G,SAAS,EAC3BqH,EAUIX,EAAkB1G,SAAS,EAChCqH,IACAX,EAAkB1G,SAAS,CAAC6B,OAAO,GACnC,OAAO6E,EAAkB1G,SAAS,GAXlCiF,GAAQ6B,EAAYxH,EACpBoH,EAAkB1G,SAAS,CACvBqB,AAvBI,IAAI,CAuBIgF,eAAe,CAACpB,EAvB+E3F,GAwB3GI,GACAuH,EAAYP,EAAkB1G,SAAS,CAAEiF,EAzBkE3F,GA2B/G2F,GAAQ8B,EAAgBL,EAAkB1G,SAAS,CAAEV,IAOzDyD,CAAW,CAACc,EAAW9B,KAAK,CAAC,CAAC8E,OAAO,CAAG,CAAA,IAIxCjB,EAASvE,AAtCG,IAAI,CAsCK8D,YAAY,CAACtB,EAAYoB,EAtCqE3F,GAuC/GI,GACAuH,EAAYrB,EAAQX,EAxC2F3F,GA0CnH2F,GAAQ8B,EAAgBnB,EAAQtG,GAE3B+H,IACDrH,EAAYqB,AA7CJ,IAAI,CA6CYgF,eAAe,CAACpB,EA7CuE3F,GA8C3GI,GACAuH,EAAYjH,EAAWiF,EA/CoF3F,GAiD/G2F,GAAQ8B,EAAgB/G,EAAWV,IAEvCyD,CAAW,CAACc,EAAW9B,KAAK,CAAC,CAAG,CAC5B6D,OAAAA,EACA5F,UAAAA,EACA6G,QAAS,CAAA,CACb,GAEAjB,GACAA,EAAO0B,QAAQ,CAACD,EAAS,EAAI,EAErC,CACJ,CACJ,CAmGA,OA7FA5E,EAAYY,cAAc,CAAGhD,EAAoBzB,OAAO,CA6FjD6D,CACX,GACA1E,EAAgBD,EAAU,gCAAiC,CAACA,CAAQ,CAAC,gCAAgC,CAAEA,CAAQ,CAAC,kCAAkC,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAUyJ,CAAc,CAAEC,CAAU,CAAEhH,CAAC,MAiBnNiH,EAPJ,GAAM,CAAEC,OAAQ,CAAEC,UAAWC,CAAW,CAAE,CAAE,CAAGL,EAAeM,WAAW,CACnE,CAAEnH,SAAAA,CAAQ,CAAEC,QAAAA,CAAO,CAAE,CAAGH,EAgH9B,OAzGA,AAAC,SAAUiH,CAAmB,EAsC1B,SAASK,EAAqBjC,CAAC,EAC3B,IAAoBkC,EAASC,AAAf,IAAI,CAAiBD,MAAM,CAAEzD,EAAWyD,EAAO3G,KAAK,CAACkD,QAAQ,AACvE0D,CADU,IAAI,CACRC,gBAAgB,EAAID,AADhB,IAAI,CACkBE,OAAO,GAClCH,EAAOI,kBAAkB,EAI1BJ,CAAAA,EAAOI,kBAAkB,CAAG,IAAIX,EAAWlD,EAAU,OAChDkC,GAAG,CAAC,CACL4B,cAAe,MACnB,GACK1D,GAAG,CAACsD,AAVH,IAAI,CAUKE,OAAO,CAACG,WAAW,CAAA,EAElCxC,GAAGyC,QAAU,SAGbN,AAfM,IAAI,CAeJE,OAAO,CAACzD,IAAI,CAAC,CACf8D,GAAI,IAAI,CAACA,EAAE,AACf,GACAR,EAAOI,kBAAkB,CAAC1D,IAAI,CAAC,CAC3B+D,KAAM,CAAC,EAAElE,EAASmE,GAAG,CAAC,CAAC,EAAE,IAAI,CAACF,EAAE,CAAC,CAAC,CAClCG,WAAY,SAChB,IAGAX,EAAOI,kBAAkB,CAAC1D,IAAI,CAAC,CAC3B+D,KAAM,EACV,GAGZ,CA9DAf,EAAoBkB,YAAY,CAAG,CAC/BC,gBAAiB,CAAA,EACjBX,iBAAkB,CAAA,EAClBY,QAiEJ,WACI,OAAQ,AAAe,OAAf,IAAI,CAACC,KAAK,EACd,IAAI,CAACA,KAAK,GAAKC,KACf,IAAI,CAACD,KAAK,GAAK,CAACC,KAEf,CAAA,AAAe,KAAK,IAApB,IAAI,CAACD,KAAK,EAAe,CAACE,MAAM,IAAI,CAACF,KAAK,CAAA,CACnD,CAtEA,EACArB,EAAoBwB,aAAa,CAAG,CAChCC,SAAU,QACVC,UAAW,CAAC,QAAS,QAAS,YAAY,CAC1CC,eAAgB,CAAC,IAAK,IAAK,QAAQ,CACnCC,cAAe,CAAC,QAAQ,CACxBC,cAAe,CAAC,QAAS,cAAe,kBAAkB,CAC1DC,aAwEJ,SAA4BvB,CAAK,EAC7B,IAAMwB,EAAM,CAAC,EAMb,OALI7I,EAAQqH,EAAM3I,KAAK,GAClB,CAAA,CAAC2I,EAAMM,KAAK,EAAIN,AAAgB,WAAhBA,EAAMM,KAAK,AAAY,GAExCkB,CAAAA,CAAG,CAAC,IAAI,CAACC,SAAS,EAAI,OAAO,CAAGzB,EAAM3I,KAAK,AAAD,EAEvCmK,CACX,EA/EIE,aAAc9B,EAAY8B,YAAY,AAC1C,EAcAjC,EAAoB/E,OAAO,CAL3B,SAAiBiH,CAAW,EAGxB,OADAjJ,EADmBiJ,EAAYhC,SAAS,CAACiC,UAAU,CAC9B,gBAAiB9B,GAC/B6B,CACX,CAkEJ,EAAGlC,GAAwBA,CAAAA,EAAsB,CAAC,CAAA,GAO3CA,CACX,GACA1J,EAAgBD,EAAU,0CAA2C,EAAE,CAAE,WA2FrE,OA1EA,MAMI+E,YAAYgH,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAEC,CAAC,CAAE,CACpB,IAAI,CAACjL,MAAM,CAAG8K,EACd,IAAI,CAAClI,KAAK,CAAGmI,EACb,IAAI,CAACG,IAAI,CAAGD,EACZ,IAAI,CAACE,SAAS,CAAGH,EACjB,IAAI,CAACI,cAAc,CAAGJ,EACtB,IAAI,CAACK,KAAK,CAAG,EACb,IAAI,CAACC,EAAE,CAAG,EACV,IAAI,CAACC,EAAE,CAAG,EACV,IAAI,CAACC,EAAE,CAAG,EACV,IAAI,CAACC,EAAE,CAAG,EACV,IAAI,CAACC,KAAK,CAAG,EAAE,CACf,IAAI,CAACC,EAAE,CAAG,CACNN,MAAO,EACPI,GAAI,EACJD,GAAI,EACJD,GAAI,EACJD,GAAI,EACJM,GAAI,EACJC,GAAI,EACJC,YAAa,SAAUf,CAAC,CAAED,CAAC,EACvB,OAAOiB,KAAKC,GAAG,CAAEjB,EAAID,EAAKA,EAAIC,EAClC,CACJ,CACJ,CAMAkB,WAAWC,CAAE,CAAE,CACX,IAAI,CAACP,EAAE,CAACN,KAAK,CAAG,IAAI,CAACK,KAAK,CAAC,IAAI,CAACA,KAAK,CAAC/G,MAAM,CAAG,EAAE,CACjD,IAAI,CAAC0G,KAAK,CAAG,IAAI,CAACA,KAAK,CAAGa,EACtB,AAAmB,IAAnB,IAAI,CAACf,SAAS,EAEd,IAAI,CAACI,EAAE,CAAG,IAAI,CAACD,EAAE,CACjB,IAAI,CAACK,EAAE,CAACF,EAAE,CAAG,IAAI,CAACE,EAAE,CAACN,KAAK,CAAG,IAAI,CAACE,EAAE,CACpC,IAAI,CAACI,EAAE,CAACE,EAAE,CAAG,IAAI,CAACF,EAAE,CAACG,WAAW,CAAC,IAAI,CAACP,EAAE,CAAE,IAAI,CAACI,EAAE,CAACF,EAAE,EAEpD,IAAI,CAACH,EAAE,CAAG,IAAI,CAACD,KAAK,CAAG,IAAI,CAACrL,MAAM,CAClC,IAAI,CAAC2L,EAAE,CAACH,EAAE,CAAG,IAAI,CAACG,EAAE,CAACN,KAAK,CAAG,IAAI,CAACC,EAAE,CACpC,IAAI,CAACK,EAAE,CAACC,EAAE,CAAG,IAAI,CAACD,EAAE,CAACG,WAAW,CAAC,IAAI,CAACR,EAAE,CAAE,IAAI,CAACK,EAAE,CAACH,EAAE,IAIpD,IAAI,CAACC,EAAE,CAAG,IAAI,CAACD,EAAE,CACjB,IAAI,CAACG,EAAE,CAACJ,EAAE,CAAG,IAAI,CAACI,EAAE,CAACN,KAAK,CAAG,IAAI,CAACI,EAAE,CACpC,IAAI,CAACE,EAAE,CAACE,EAAE,CAAG,IAAI,CAACF,EAAE,CAACG,WAAW,CAAC,IAAI,CAACH,EAAE,CAACJ,EAAE,CAAE,IAAI,CAACE,EAAE,EAEpD,IAAI,CAACD,EAAE,CAAG,IAAI,CAACH,KAAK,CAAG,IAAI,CAACzI,KAAK,CACjC,IAAI,CAAC+I,EAAE,CAACL,EAAE,CAAG,IAAI,CAACK,EAAE,CAACN,KAAK,CAAG,IAAI,CAACG,EAAE,CACpC,IAAI,CAACG,EAAE,CAACC,EAAE,CAAG,IAAI,CAACD,EAAE,CAACG,WAAW,CAAC,IAAI,CAACH,EAAE,CAACL,EAAE,CAAE,IAAI,CAACE,EAAE,GAExD,IAAI,CAACE,KAAK,CAACS,IAAI,CAACD,EACpB,CACAE,OAAQ,CACJ,IAAI,CAACd,EAAE,CAAG,EACV,IAAI,CAACC,EAAE,CAAG,EACV,IAAI,CAACG,KAAK,CAAG,EAAE,CACf,IAAI,CAACL,KAAK,CAAG,CACjB,CACJ,CAQJ,GACArM,EAAgBD,EAAU,gCAAiC,EAAE,CAAE,WA+C3D,OAhCA,MACI+E,aAAc,CAMV,IAAI,CAACuI,aAAa,CAAG,EACrB,IAAI,CAACC,OAAO,CAAG,CAAA,CACnB,CAMAC,KAAK/C,CAAE,CAAEpB,CAAC,CAAEoE,CAAQ,CAAExM,CAAM,CAAEgD,CAAK,CAAEgG,CAAM,CAAEyD,CAAM,CAAE,CAQjD,OAPA,IAAI,CAACjD,EAAE,CAAGA,EACV,IAAI,CAACpB,CAAC,CAAGA,EACT,IAAI,CAACoE,QAAQ,CAAGA,EAChB,IAAI,CAACxM,MAAM,CAAGA,EACd,IAAI,CAACgD,KAAK,CAAGA,EACb,IAAI,CAACgG,MAAM,CAAGA,EACd,IAAI,CAACyD,MAAM,CAAGA,EACP,IAAI,AACf,CACJ,CAQJ,GACAzN,EAAgBD,EAAU,+BAAgC,EAAE,CAAE,WAiF1D,MAJ2B,CACvB2N,KAzDJ,SAAczD,CAAK,CAAE0D,CAAM,EACvB,GAAM,CAAEC,kBAAAA,CAAiB,CAAEC,WAAAA,CAAU,CAAEpF,IAAAA,CAAG,CAAElC,SAAAA,CAAQ,CAAE,CAAGoH,EACnDG,EAAY,AAAC7D,EAAMD,MAAM,EAAIC,EAAMD,MAAM,CAAC3G,KAAK,CAAC0K,WAAW,CAE7D,KAAK,EAEJ9D,EAAMD,MAAM,EACTC,EAAMD,MAAM,CAACnJ,OAAO,CAACiN,SAAS,CAClC3D,EAAUF,EAAME,OAAO,CAK3B,GAJAwD,EAAOK,OAAO,CAAG,CACb,GAAGL,EAAOK,OAAO,CACjB,MAAS/D,EAAMgE,YAAY,EAC/B,EACKhE,EAAMiE,UAAU,GACZ/D,IAEGA,EADAwD,AAAqB,SAArBA,EAAOQ,SAAS,CACN5H,EAASrE,IAAI,GAElByL,AAAqB,UAArBA,EAAOQ,SAAS,CACX5H,EAAS6H,KAAK,CAACT,EAAOU,QAAQ,EAAI,IACvC3H,IAAI,CAACiH,EAAOW,SAAS,EAAI,CAAC,GAGrB/H,CAAQ,CAACoH,EAAOQ,SAAS,CAAC,CAACR,EAAOW,SAAS,EAAI,CAAC,GAE9DrE,EAAME,OAAO,CAAGA,EAChBA,EAAQxD,GAAG,CAACgH,EAAOrH,KAAK,GAExBmC,GACA0B,EAAQ1B,GAAG,CAACA,GAEhB0B,EACKzD,IAAI,CAACiH,EAAOK,OAAO,EACnBO,OAAO,CAACX,EAAmBD,CAAAA,EAAOa,KAAK,EAAWV,EAAWD,QAEjE,GAAI1D,EAAS,CACd,IAAMrG,EAAU,KACZmG,EAAME,OAAO,CAAGA,EAAWA,GAAWA,EAAQrG,OAAO,GAC3B,YAAtB,OAAO+J,GACPA,GAER,CAEIY,CAAAA,OAAOC,IAAI,CAACd,GAAmBjI,MAAM,CACrCwE,EAAQoE,OAAO,CAACX,EAAmB,KAAK,EAAG,IAAM9J,KAGjDA,GAER,CACJ,CAQA,CAGJ,GACA9D,EAAgBD,EAAU,iCAAkC,CAACA,CAAQ,CAAC,+BAA+B,CAAEA,CAAQ,CAAC,gCAAgC,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAU4O,CAAG,CAAEnF,CAAc,CAAE/G,CAAC,EAY9M,GAAM,CAAEmM,IAAK,CAAEhF,UAAW,CAAEiC,WAAYgD,CAAQ,CAAE,CAAE,CAAEC,QAAS,CAAElF,UAAW,CAAEiC,WAAYkD,CAAY,CAAE,CAAE,CAAE,CAAGvF,EAAeM,WAAW,CACnI,CAAEjH,OAAAA,CAAM,CAAEmM,SAAAA,CAAQ,CAAE9L,KAAAA,CAAI,CAAE,CAAGT,CAMnC,OAAMwM,UAAqBF,EACvBjK,aAAc,CAMV,KAAK,IAAIoK,WACT,IAAI,CAACf,SAAS,CAAG,MACrB,CAMAT,KAAKC,CAAM,CAAE,CACTgB,EAAIjB,IAAI,CAAC,IAAI,CAAEC,EACnB,CACAM,cAAe,CACX,IAAMjE,EAAS,IAAI,CAACA,MAAM,CAAEnJ,EAAUmJ,EAAOnJ,OAAO,CAChDsO,EAAY,KAAK,CAAClB,eAYtB,OAVI,IAAI,CAACmB,IAAI,CAACpL,KAAK,EAAIgG,EAAOqF,OAAO,CAACrF,EAAOsF,QAAQ,CAAC,CAACtL,KAAK,CACxDmL,GAAa,0BAER,AAAC,IAAI,CAACC,IAAI,CAACG,MAAM,EACrBrM,EAAKrC,EAAQ2O,cAAc,CAAE,CAAC3O,EAAQ4O,mBAAmB,EAGpD,IAAI,CAACL,IAAI,CAACG,MAAM,EACtBJ,CAAAA,GAAa,2BAA0B,EAHvCA,GAAa,wCAKVA,CACX,CAQArE,SAAU,CACN,MAAO4E,CAAAA,CAAQ,CAAA,IAAI,CAAClF,EAAE,EAAIwE,EAAS,IAAI,CAACjE,KAAK,CAAA,CACjD,CACAxB,SAASgB,CAAK,CAAE,CACZ,KAAK,CAAChB,SAASjJ,KAAK,CAAC,IAAI,CAAE4O,WAEvB,IAAI,CAAC/E,OAAO,EACZ,IAAI,CAACA,OAAO,CAACzD,IAAI,CAAC,CACdxF,OAAQqJ,AAAU,UAAVA,EAAoB,EAAI,CACpC,EAER,CACA2D,YAAa,CACT,OAAOc,EAAS,IAAI,CAACW,KAAK,GAAK,AAAW,OAAX,IAAI,CAAC3N,CAAC,AACzC,CACJ,CAUA,OATAa,EAAOoM,EAAarF,SAAS,CAAE,CAC3BgG,WAAYf,EAASjF,SAAS,CAACgG,UAAU,AAC7C,GAOOX,CACX,GACAjP,EAAgBD,EAAU,0CAA2C,CAACA,CAAQ,CAAC,gCAAgC,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAUyJ,CAAc,CAAE/G,CAAC,EAYxK,GAAM,CAAEM,SAAAA,CAAQ,CAAE,CAAGN,EA0hBrB,MAvgB8B,CA0B1BgN,oBAAqB,CAAA,EACrBI,eAAgB,IAIhBC,aAAc,EAmFdC,aAAc,CAAA,EAIdC,OAAQ,KAAK,EAYbC,aAAc,CAAA,EAIdC,WAAY,CACRC,MAAO,CAAA,EACPC,QAAS,CAAA,EACTjK,UAAW,WACP,IAAM8D,EAAQ,IAAI,EAAI,IAAI,CAACA,KAAK,CAC5B,IAAI,CAACA,KAAK,CACV,CAAC,EACL,OADelH,EAASkH,EAAMoG,IAAI,EAAIpG,EAAMoG,IAAI,CAAG,EAEvD,EACAC,OAAQ,CAAA,EACRxO,cAAe,QACnB,EACAyO,QAAS,CACLC,aAAc,GACdC,YAAa,yCACjB,EAOAC,kBAAmB,CAAA,EAmBnBC,gBAAiB,eAOjBC,wBAAyB,WAWzBC,2BAA4B,CAAA,EAS5BC,gBAAiB,CAAA,EAQjBC,iBAAkB,CAIdnP,SAAU,CAcNC,MAAO,QAIPE,EAAG,IAIHC,EAAG,EACP,CACJ,EAuIAgP,YAAa,UAIbC,YAAa,EACb9F,SAAU,aAOV+F,QAAS,IAMT/P,OAAQ,CAOJgQ,MAAO,CAIHH,YAAa,UAQbI,WAAY5H,EAAeM,WAAW,CAACuH,OAAO,CAAG,EAAI,GAIrDC,KAAM,CAAA,EAONJ,QAAS,IAITK,OAAQ,CAAA,CACZ,CACJ,EACAC,aAAc,WAClB,CA2FJ,GACAxR,EAAgBD,EAAU,qCAAsC,EAAE,CAAE,WAiBhE,IAAI0R,EA8BJ,MARIA,AACDA,CAAAA,GAAqBA,CAAAA,EAAmB,CAAC,CAAA,CAAC,EADxBC,SAAS,CAN1B,SAASA,EAAUC,CAAI,CAAEC,CAAI,CAAEC,CAAO,EAClC,IAAMC,EAAOF,EAAKzJ,IAAI,CAAC0J,GAAW,IAAI,CAAEF,EAC3B,EAAA,IAATG,GACAJ,EAAUI,EAAMF,EAAMC,EAE9B,EASGJ,CACX,GACAzR,EAAgBD,EAAU,0BAA2B,CAACA,CAAQ,CAAC,sBAAsB,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAUgS,CAAK,CAAEtP,CAAC,EAYrI,GAAM,CAAEI,OAAAA,CAAM,CAAEmP,QAAAA,CAAO,CAAEhD,SAAAA,CAAQ,CAAEiD,SAAAA,CAAQ,CAAEjP,MAAAA,CAAK,CAAEE,KAAAA,CAAI,CAAEgP,eAAAA,CAAc,CAAE,CAAGzP,EAwM7E,MARsB,CAClB0P,SAvLJ,SAAkB/C,CAAI,CAAEvO,CAAO,MAENoJ,EAAOjG,EAAOiM,EAAcmC,EAAmB9Q,EAAO+Q,EAD3E,IAAMC,EAAQzR,EAAQyR,KAAK,CAAEC,EAAoB1R,EAAQ0R,iBAAiB,CAAEC,EAAc3R,EAAQ2R,WAAW,CAAEC,EAAmB5R,EAAQ4R,gBAAgB,CAAEzI,EAASnJ,EAAQmJ,MAAM,CAAE0I,EAAS7R,EAAQ6R,MAAM,CAAEC,EAAW9R,EAAQ8R,QAAQ,CAAEC,EAAS5I,EAAO4I,MAAM,CAAEC,EAAoB7I,EAAO3G,KAAK,CAACxC,OAAO,CAACwC,KAAK,CA+BjT,OAhBI+L,IACAnF,EAAQ2I,CAAM,CAACxD,EAAKhG,CAAC,CAAC,CACtBpF,EAAQuO,CAAiB,CAACnD,EAAKpL,KAAK,CAAC,EAAI,CAAC,EACxBiG,GAASjG,EAAMiM,YAAY,GAEzCmC,EAAoBnI,EAAMqI,KAAK,CAAII,CAAAA,EAC/BA,EAAO/M,MAAM,CACbkN,EAAkBC,UAAU,AAAD,EAC/B7C,EAAeyC,GAAUA,CAAM,CAACN,EAAkB,EAGjDpI,EAAO3G,KAAK,CAACgF,UAAU,EACxB/G,CAAAA,EAAQ4B,EAAK+G,GAASA,EAAMpJ,OAAO,CAACS,KAAK,CAAE0C,GAASA,EAAM1C,KAAK,CAAE2O,EAAcuC,GAAeO,AAtBjF,CAAA,AAACzR,IAClB,IAAM0R,EAAiBhP,GAASA,EAAMgP,cAAc,QACpD,AAAIA,GACAA,AAAuB,eAAvBA,EAAeC,GAAG,EAClBX,GACAK,EACOZ,EAAMmB,KAAK,CAAC5R,GAAO6R,QAAQ,CAACH,EAAeI,EAAE,CAAId,CAAAA,EAAQK,CAAO,GAAIU,GAAG,GAE3E/R,CACX,CAAA,EAamHkR,GAAcxI,EAAO1I,KAAK,CAAA,EAEzI+Q,EAAanP,EAAK+G,GAASA,EAAMpJ,OAAO,CAACwR,UAAU,CAAErO,GAASA,EAAMqO,UAAU,CAAED,EAAmBK,EAAkB5R,EAAQwR,UAAU,GAEpI,CACH/Q,MAAOA,EACP+Q,WAAYA,CAChB,CACJ,EAoJIiB,gBAlIJ,SAAyB3F,CAAM,MAEvB4F,EAAUC,EAAWpK,EAAGqK,EAAML,EAAIM,EADtC,IAAMC,EAAS,CAAC,EAEhB,GAAI1B,EAAStE,GA2BT,IA1BA8F,EAAOzE,EAASrB,EAAO8F,IAAI,EAAI9F,EAAO8F,IAAI,CAAG,EAC7CC,EAAS/F,EAAO+F,MAAM,CACtBF,EAAY,CAAC,EACbD,EAAWtB,EAAStE,EAAO4F,QAAQ,EAAI5F,EAAO4F,QAAQ,CAAG,CAAC,EACtDvB,EAAQ0B,IACRF,CAAAA,EAAYE,EAAOE,MAAM,CAAC,CAAC3T,EAAK0R,KAC5B,IAAI3N,EAAO8M,EAAiBjQ,EAgB5B,OAfIoR,EAASN,IAAS3C,EAAS2C,EAAK3N,KAAK,IAErC8M,EAAkB5N,EAAKrC,AADvBA,CAAAA,EAAUmC,EAAM,CAAC,EAAG2O,EAAI,EACOb,eAAe,CAAEyC,EAASzC,eAAe,EAExE,OAAOjQ,EAAQiQ,eAAe,CAC9B,OAAOjQ,EAAQmD,KAAK,CAGhBiO,EAAShS,CAAG,CADhB+D,EAAQ2N,EAAK3N,KAAK,CAAI8M,CAAAA,EAAkB,EAAI2C,EAAO,CAAA,EAC5B,EACnBzQ,EAAM,CAAA,EAAM/C,CAAG,CAAC+D,EAAM,CAAEnD,GAGxBZ,CAAG,CAAC+D,EAAM,CAAGnD,GAGdZ,CACX,EAAG,CAAC,EAAC,EAETmT,EAAKpE,EAASrB,EAAOyF,EAAE,EAAIzF,EAAOyF,EAAE,CAAG,EAClChK,EAAI,EAAGA,GAAKgK,EAAIhK,IACjBuK,CAAM,CAACvK,EAAE,CAAGpG,EAAM,CAAC,EAAGuQ,EAAUtB,EAASuB,CAAS,CAACpK,EAAE,EAAIoK,CAAS,CAACpK,EAAE,CAAG,CAAC,GAGjF,OAAOuK,CACX,EAgGIE,aAvBJ,SAAsB7J,CAAM,CAAE8J,CAAW,EACrC,GAAM,CAAEzQ,MAAAA,CAAK,CAAExC,QAAAA,CAAO,CAAE,CAAGmJ,EAAQ,CAAE+J,aAAAA,EAAe,CAAC,CAAEC,UAAAA,EAAY,CAAC,CAAE,CAAGnT,EAAS,CAAEoT,UAAAA,EAAY,CAAC,CAAE,CAAG5Q,EAGtG,GAAI2Q,AAAc,SAAdA,EAAsB,CACtB,GAAI,AAAwB,UAAxB,OAAOD,GAA6B,KAAKG,IAAI,CAACH,GAE9C,OAAOE,EADkDH,CAAAA,EAAcK,AAAtDC,WAAWL,GAAgB,IAAuCD,CAAAA,EAAc,CAAA,CAAC,EAGtG,IAAMO,EAAYC,OAAOP,GACzB,MAAO,AAAEE,CAAAA,EAAYI,CAAQ,EACxBP,CAAAA,GAAe,CAAA,EAAMO,CAC9B,CACA,OAAOnC,EAAe8B,EAAWC,EACrC,EAUIM,cA3FJ,SAASA,EAAcC,CAAI,CAAE3T,CAAO,EAChC,IAAM4T,EAAS5T,EAAQ4T,MAAM,CAAEC,EAAS7T,EAAQ6T,MAAM,CAAqCC,EAAWC,AAAhC/T,EAAQ+T,WAAW,AAAwB,CAACF,EAAO,CAAE5D,EAAmBjQ,AAA4B,CAAA,IAA5BA,EAAQiQ,eAAe,CAAsC7G,EAAQ2I,AAAxB/R,EAAQ+R,MAAM,AAAgB,CAAC4B,EAAKpL,CAAC,CAAC,CAAEyL,EAAe5K,GAASA,EAAMpJ,OAAO,EAAI,CAAC,EAAG2M,EAAW,EAAE,CACzRH,EAAgB,CACpBmH,CAAAA,EAAKM,YAAY,CAAGN,EAAKxQ,KAAK,CAAI8M,CAAAA,EAAkB,EAAI6D,EAAS3Q,KAAK,AAAD,EACrEwQ,EAAKnE,IAAI,CAAGnN,EAAK+G,GAASA,EAAMoG,IAAI,CAAE,IACtCmE,EAAKlH,OAAO,CAAIoH,IAAWF,EAAKhK,EAAE,EAC9B3J,AAAoB,CAAA,IAApBA,EAAQyM,OAAO,CACG,YAAlB,OAAOmH,GACPD,CAAAA,EAAOC,EAAOD,EAAM3T,EAAO,EAG/B2T,EAAKhH,QAAQ,CAACuH,OAAO,CAAC,CAACC,EAAO5L,KAC1B,IAAM6L,EAAapS,EAAO,CAAC,EAAGhC,GAC9BgC,EAAOoS,EAAY,CACf3C,MAAOlJ,EACPuJ,SAAU6B,EAAKhH,QAAQ,CAAC7H,MAAM,CAC9B2H,QAASkH,EAAKlH,OAAO,AACzB,GACA0H,EAAQT,EAAcS,EAAOC,GAC7BzH,EAASL,IAAI,CAAC6H,GACVA,EAAM1H,OAAO,EACbD,CAAAA,GAAiB2H,EAAME,GAAG,AAAD,CAEjC,GAEA,IAAMnK,EAAQ7H,EAAK2R,EAAa9J,KAAK,CAAEsC,GAMvC,OALAmH,EAAKlH,OAAO,CAAGvC,GAAS,GAAMsC,CAAAA,EAAgB,GAAKmH,EAAKlH,OAAO,AAAD,EAC9DkH,EAAKhH,QAAQ,CAAGA,EAChBgH,EAAKnH,aAAa,CAAGA,EACrBmH,EAAKjF,MAAM,CAAGiF,EAAKlH,OAAO,EAAI,CAACD,EAC/BmH,EAAKU,GAAG,CAAGnK,EACJyJ,CACX,EA4DIW,aA/CJ,SAAsBnL,CAAM,EACxB,IAAIoL,EAAQvU,EAaZ,OAZIoR,EAASjI,KAETnJ,EAAUoR,EAASjI,EAAOnJ,OAAO,EAAImJ,EAAOnJ,OAAO,CAAG,CAAC,EAEvDuU,EAASlS,EAAK8G,EAAOsF,QAAQ,CAAEzO,EAAQuU,MAAM,CAAE,IAE3CnD,EAASjI,EAAOjF,WAAW,GAC3BiF,CAAAA,EAAOjF,WAAW,CAACqQ,MAAM,CAAGA,CAAK,EAGrCpL,EAAOsF,QAAQ,CAAG8F,GAEfA,CACX,CAiCA,CAGJ,GACApV,EAAgBD,EAAU,kCAAmC,CAACA,CAAQ,CAAC,wCAAwC,CAAEA,CAAQ,CAAC,sBAAsB,CAAEA,CAAQ,CAAC,gCAAgC,CAAEA,CAAQ,CAAC,kBAAkB,CAAEA,CAAQ,CAAC,gCAAgC,CAAEA,CAAQ,CAAC,0CAA0C,CAAEA,CAAQ,CAAC,gCAAgC,CAAEA,CAAQ,CAAC,iCAAiC,CAAEA,CAAQ,CAAC,0CAA0C,CAAEA,CAAQ,CAAC,qCAAqC,CAAEA,CAAQ,CAAC,0BAA0B,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAU2E,CAAW,CAAEqN,CAAK,CAAErI,CAAmB,CAAElH,CAAC,CAAEgH,CAAc,CAAE6L,CAAqB,CAAEC,CAAW,CAAErG,CAAY,CAAEsG,CAAqB,CAAE9D,CAAgB,CAAE+D,CAAE,CAAE/S,CAAC,EAY7tB,GAAM,CAAEyQ,MAAO5R,CAAK,CAAE,CAAGyQ,EACnB,CAAErP,SAAAA,CAAQ,CAAE+S,KAAAA,CAAI,CAAE,CAAGjT,EACrB,CAAEmH,OAAQ+L,CAAY,CAAE5G,QAAS6G,CAAa,CAAE,CAAGnM,EAAeM,WAAW,CAC7E,CAAEqI,SAAAA,CAAQ,CAAEmB,gBAAAA,CAAe,CAAE6B,aAAAA,CAAY,CAAE,CAAGK,EAC9C,CAAE7S,SAAAA,CAAQ,CAAEiT,aAAAA,CAAY,CAAEC,MAAAA,CAAK,CAAEjT,QAAAA,CAAO,CAAEkT,MAAAA,CAAK,CAAEjT,OAAAA,CAAM,CAAEC,UAAAA,CAAS,CAAEkP,QAAAA,CAAO,CAAEC,SAAAA,CAAQ,CAAElP,SAAAA,CAAQ,CAAEC,MAAAA,CAAK,CAAEE,KAAAA,CAAI,CAAEC,WAAAA,CAAU,CAAE4S,WAAAA,CAAU,CAAE,CAAGtT,EAY3IuT,EAA2B,CAAA,EAO/B,SAASC,QAEDC,EADJ,IAAqBC,EAAQnM,AAAd,IAAI,CAAiBmM,KAAK,CAAEC,EAAQpM,AAApC,IAAI,CAAuCoM,KAAK,CAE3DD,GAASC,IACLpM,AAHO,IAAI,CAGJqM,EAAE,CAAC,YACVH,EAAW,CACPI,UAAW,CAAA,EACXC,cAAe,EACfC,UAAW,EACXC,IAAK,EACLC,WAAY,EACZ1J,IAxBA,IAyBA2J,WAAY,EACZC,YAAa,CAAA,EACbC,MAAO,KAAK,EACZC,cAAe,EAAE,AACrB,EACAjU,EAAOuT,EAAMvV,OAAO,CAAEqV,GACtBrT,EAAOsT,EAAMtV,OAAO,CAAEqV,GACtBF,EAA2B,CAAA,GAEtBA,IACLI,EAAMW,UAAU,CAACX,EAAMrR,WAAW,EAClCoR,EAAMY,UAAU,CAACZ,EAAMpR,WAAW,EAClCiR,EAA2B,CAAA,GAGvC,CAaA,MAAMgB,UAAsBrB,EAMxB,OAAOhR,QAAQiH,CAAW,CAAE,CACpBzI,EAAWT,EAAU,kBACrBC,EAASiJ,EAAa,gBAAiBqK,EAE/C,CAOAgB,oBAAoBC,CAAe,CAAEC,CAAI,CAAE7Q,CAAK,CAAE8Q,CAAY,CAAE,CAC5D,IAAMlL,EAAO5F,EAAM4F,IAAI,CAAEmL,EAAM/Q,EAAMoG,KAAK,CAAC/G,MAAM,CAAG,EAChD2R,EAAIC,EAAIC,EAAIC,EAAIC,EAAKpR,EAAMiG,EAAE,CAAEoL,EAAKrR,EAAMmG,EAAE,CAAEmL,EAAMxO,EAAI,EAQ5D,IAAK,IAAM6C,KAPPkL,GACAO,EAAKpR,EAAMgG,EAAE,CACbqL,EAAKrR,EAAMkG,EAAE,EAGboL,EAAOtR,EAAMoG,KAAK,CAAC2K,EAAI,CAEX/Q,EAAMoG,KAAK,EACnByK,CAAAA,GAAS/N,EAAIiO,CAAG,IACZ/Q,AAAoB,IAApBA,EAAM6F,SAAS,EACfmL,EAAKpL,EAAKnK,CAAC,CACXwV,EAAKrL,EAAKlK,CAAC,CAEXyV,EAAKxL,EADLuL,CAAAA,EAAKE,CAAC,IAINJ,EAAKpL,EAAKnK,CAAC,CACXwV,EAAKrL,EAAKlK,CAAC,CAEXwV,EAAKvL,EADLwL,CAAAA,EAAKE,CAAC,GAGVP,EAAajK,IAAI,CAAC,CACdpL,EAAGuV,EACHtV,EAAGuV,EACH3T,MAAO4T,EACPxW,OAAQ4U,EAAa6B,EACzB,GACInR,AAAoB,IAApBA,EAAM6F,SAAS,CACfD,EAAKlK,CAAC,CAAGkK,EAAKlK,CAAC,CAAGyV,EAGlBvL,EAAKnK,CAAC,CAAGmK,EAAKnK,CAAC,CAAGyV,GAG1BpO,GAAQ,EAGZ9C,EAAM8G,KAAK,GACP9G,AAAoB,IAApBA,EAAM6F,SAAS,CACf7F,EAAM1C,KAAK,CAAG0C,EAAM1C,KAAK,CAAG8T,EAG5BpR,EAAMtF,MAAM,CAAGsF,EAAMtF,MAAM,CAAG2W,EAElCzL,EAAKlK,CAAC,CAAGkK,EAAKuB,MAAM,CAACzL,CAAC,CAAIkK,CAAAA,EAAKuB,MAAM,CAACzM,MAAM,CAAGsF,EAAMtF,MAAM,AAAD,EAC1DkL,EAAKnK,CAAC,CAAGmK,EAAKuB,MAAM,CAAC1L,CAAC,CAAImK,CAAAA,EAAKuB,MAAM,CAAC7J,KAAK,CAAG0C,EAAM1C,KAAK,AAAD,EACpDsT,GACA5Q,CAAAA,EAAM6F,SAAS,CAAG,EAAI7F,EAAM6F,SAAS,AAAD,EAGnCgL,GACD7Q,EAAM2G,UAAU,CAAC2K,EAEzB,CACAC,cAAcX,CAAe,CAAEzJ,CAAM,CAAED,CAAQ,CAAE,CAC7C,IAAM4J,EAAe,EAAE,CACnBU,EAAM3L,EAAYsB,EAAOtB,SAAS,CAAEpK,EAAI0L,EAAO1L,CAAC,CAAEC,EAAIyL,EAAOzL,CAAC,CAAE4B,EAAQ6J,EAAO7J,KAAK,CAAE5C,EAASyM,EAAOzM,MAAM,CAAEsW,EAAIC,EAAIC,EAAIC,EAC9H,IAAK,IAAMzC,KAASxH,EAChBsK,EACI,AAACrK,EAAO7J,KAAK,CAAG6J,EAAOzM,MAAM,CAAKgU,CAAAA,EAAME,GAAG,CAAGzH,EAAOyH,GAAG,AAAD,EAC3DoC,EAAKvV,EACLwV,EAAKvV,EACDmK,AAAc,IAAdA,GAGAvI,GADA4T,EAAKM,EADLL,CAAAA,EAAKzW,CAAK,EAGVe,GAAQyV,IAKRxW,GADAyW,EAAKK,EADLN,CAAAA,EAAK5T,CAAI,EAGT5B,GAAQyV,GAEZL,EAAajK,IAAI,CAAC,CACdpL,EAAGuV,EACHtV,EAAGuV,EACH3T,MAAO4T,EACPxW,OAAQyW,CACZ,GACIP,GACA/K,CAAAA,EAAY,EAAIA,CAAQ,EAGhC,OAAOiL,CACX,CACAW,wBAAwBb,CAAe,CAAEzJ,CAAM,CAAED,CAAQ,CAAE,CACvD,IAAqB4J,EAAe,EAAE,CAAElL,EAAO,CAC3CnK,EAAG0L,EAAO1L,CAAC,CACXC,EAAGyL,EAAOzL,CAAC,CACXyL,OAAQA,CACZ,EAAGtB,EAAYsB,EAAOtB,SAAS,CAAEkL,EAAM7J,EAAS7H,MAAM,CAAG,EAAGW,EAAQ,IAAI+O,EAAsB5H,EAAOzM,MAAM,CAAEyM,EAAO7J,KAAK,CAAEuI,EAAWD,GAClI4L,EAAM1O,EAAI,EAEd,IAAK,IAAM4L,KAASxH,EAChBsK,EACI,AAACrK,EAAO7J,KAAK,CAAG6J,EAAOzM,MAAM,CAAKgU,CAAAA,EAAME,GAAG,CAAGzH,EAAOyH,GAAG,AAAD,EAC3D5O,EAAM2G,UAAU,CAAC6K,GACbxR,EAAMqG,EAAE,CAACC,EAAE,CAAGtG,EAAMqG,EAAE,CAACE,EAAE,EACzB7C,AAZO,IAAI,CAYJiN,mBAAmB,CAACC,EAAiB,CAAA,EAAO5Q,EAAO8Q,EAAclL,GAIxE9C,IAAMiO,GACNrN,AAjBO,IAAI,CAiBJiN,mBAAmB,CAACC,EAAiB,CAAA,EAAM5Q,EAAO8Q,EAAclL,GAG3E,EAAE9C,EAEN,OAAOgO,CACX,CAKAY,eAAe/N,CAAK,CAAEgO,CAAS,CAAEC,CAAY,CAAE,CAC3C,IAAM7W,EAAQ6W,EAAa7W,KAAK,CAK5BA,GACA,CAACuB,EAAQvB,EAAM8W,YAAY,GAC3BF,EAAU/V,IAAI,EACd+V,EAAUxU,OAAO,GAAGG,KAAK,CAAIqU,CAAAA,EAAU/V,IAAI,CAACkW,SAAS,EAAI,CAAA,GACzDH,EAAUxP,GAAG,CAAC,CACV0P,aAAc,WAEdvU,MAAOvC,EAAMuC,KAAK,EAAI,IAC1B,GAEJ8R,EAAa9L,SAAS,CAACoO,cAAc,CAAC1X,KAAK,CAAC,IAAI,CAAE4O,WAC9CjF,EAAMgO,SAAS,EAEfhO,EAAMgO,SAAS,CAACvR,IAAI,CAAC,CAAExF,OAAQ,AAAC+I,CAAAA,EAAMmF,IAAI,CAAClO,MAAM,EAAI,CAAA,EAAK,CAAE,EAEpE,CAcAmX,uBAAuB5K,CAAM,CAAE6K,CAAI,CAAE,CACjC,IAAqBzX,EAAUmJ,AAAhB,IAAI,CAAmBnJ,OAAO,CAAgDmD,EAAQuO,AAAlCvI,AAApD,IAAI,CAAuDuI,iBAAiB,AAA2B,CAAC9E,EAAOzJ,KAAK,CAAG,EAAE,CAAEuU,EAAYrV,EAAM8G,AAA7I,IAAI,AAA+I,CAAEhG,GAASA,EAAM2M,eAAe,CAAE,EAChM3M,EAAM2M,eAAe,CAAG9P,EAAQ8P,eAAe,EAAG6H,EAAY3X,EAAQgQ,0BAA0B,CAEpGrD,EAAWC,EAAOD,QAAQ,CAACiL,MAAM,CAAC,AAACC,GAAM,CAACA,EAAEC,MAAM,EAC9CC,EAAiB,EAAE,CACnB5U,GAASA,EAAM4M,uBAAuB,EACtC0H,CAAAA,EAAKnM,SAAS,CAAGnI,AAAkC,aAAlCA,EAAM4M,uBAAuB,CAC1C,EACA,CAAA,EAERgI,EAAiB5O,AAVF,IAAI,AAUI,CAACuO,EAAU,CAACD,EAAM9K,GACzC,IAAIpE,EAAI,GACR,IAAK,IAAM4L,KAASxH,EAAU,CAC1B,IAAMqL,EAASD,CAAc,CAAC,EAAExP,EAAE,AAClC4L,CAAAA,EAAM6D,MAAM,CAAG7V,EAAM6V,EAAQ,CACzB3D,IAAKF,EAAM3H,aAAa,CACxBlB,UAAYqM,EAAY,EAAIF,EAAKnM,SAAS,CAAGmM,EAAKnM,SAAS,AAC/D,GACA6I,EAAM8D,WAAW,CAAG9V,EAAM6V,EAAQ,CAC9B9W,EAAI8W,EAAO9W,CAAC,CAAGiI,AAnBR,IAAI,CAmBW+O,SAAS,CAG/B/W,EAAGgX,AAtPH,IAsPaH,EAAO7W,CAAC,CAAG6W,EAAO7X,MAAM,CACrC4C,MAAQiV,EAAOjV,KAAK,CAAGoG,AAvBhB,IAAI,CAuBmB+O,SAAS,AAC3C,GAEI/D,EAAMxH,QAAQ,CAAC7H,MAAM,EACrBqE,AA3BO,IAAI,CA2BJqO,sBAAsB,CAACrD,EAAOA,EAAM6D,MAAM,CAEzD,CACJ,CAKAI,WAAWnR,CAAC,CAAE,CACV,IAAMzE,EAAQ,IAAI,CAACA,KAAK,CAAEC,EAAcD,EAAMC,WAAW,CAAE4B,EAAO,EAAE,CACpE,GAAI5B,EAAa,CACb,IAAI4V,EAAqB,EACzBhU,EAAKiI,IAAI,CAAC,CACNnJ,MAAOkV,EACP9S,aAAc/C,EAAM2G,MAAM,CAAC,EAAE,AACjC,GACA,IAAIoF,EAAOtH,EAAEqR,MAAM,CAAC9J,OAAO,CAACvH,EAAEsR,SAAS,CAAC,CAClCC,EAAa,EAAE,CAGrB,KAAOjK,EAAK3B,MAAM,EAAI2B,AAAgB,KAAhBA,EAAK3B,MAAM,EAC7B4L,EAAWlM,IAAI,CAACiC,GAChBA,EAAOtH,EAAEqR,MAAM,CAAC9J,OAAO,CAACD,EAAK3B,MAAM,CAAC,CAExC,IAAK,IAAM2B,KAAQiK,EAAWC,OAAO,GACjCpU,EAAKiI,IAAI,CAAC,CACNnJ,MAAO,EAAEkV,EACT9S,aAAcgJ,CAClB,EAGAlK,CAAAA,EAAKS,MAAM,EAAI,GACfT,CAAAA,EAAKS,MAAM,CAAG,CAAA,CAEtB,CACA,OAAOT,CACX,CAeAqU,gBAAiB,KAIT1Y,EAASmD,EAHb,IAAqBuO,EAAoBvI,AAA1B,IAAI,CAA6BuI,iBAAiB,CAIjE,IAAK,IAAMtI,KAJiED,AAA7D,IAAI,CAAgE4I,MAAM,CAAC6F,MAAM,CAAC,SAAUC,CAAC,EACxG,OAAOA,EAAEtJ,IAAI,CAAC9B,OAAO,AACzB,GAGItJ,EAAQuO,CAAiB,CAACtI,EAAMmF,IAAI,CAACpL,KAAK,CAAC,CAE3CnD,EAAU,CAAEQ,MAAO,CAAC,CAAE,EAEjB4I,EAAMmF,IAAI,CAACG,MAAM,EAClB1O,CAAAA,EAAQuP,OAAO,CAAG,CAAA,CAAI,EAGtBpM,GAASA,EAAMkM,UAAU,GACzBrP,EAAUmC,EAAMnC,EAASmD,EAAMkM,UAAU,EACzClG,AAfO,IAAI,CAeJwP,aAAa,CAAG,IAAM,CAAA,GAG7BvP,EAAMqE,SAAS,GACfzN,EAAQQ,KAAK,CAACuC,KAAK,CAAGqG,EAAMqE,SAAS,CAAC1K,KAAK,CACvCqG,EAAMgO,SAAS,EACfhO,EAAMgO,SAAS,CAACxP,GAAG,CAAC,CAChB7E,MAAOqG,EAAMqE,SAAS,CAAC1K,KAAK,CAAG,IACnC,IAIRqG,EAAMwP,SAAS,CAAGzW,EAAMnC,EAASoJ,EAAMpJ,OAAO,CAACqP,UAAU,EAE7D,KAAK,CAACqJ,gBACV,CAKAG,WAAW9G,EAAS,IAAI,CAACA,MAAM,CAAE,CAC7B,IAAqBvP,EAAQ2G,AAAd,IAAI,CAAiB3G,KAAK,CAAEkD,EAAWlD,EAAMkD,QAAQ,CAAE8B,EAAahF,EAAMgF,UAAU,CAAExH,EAAUmJ,AAAhG,IAAI,CAAmGnJ,OAAO,CAAE0Q,EAASlJ,EAAa,CAAC,EAAIxH,EAAQ0Q,MAAM,CAAEzB,EAAejP,EAAQiP,YAAY,CAAE6J,EAAuBtW,EAAMuW,UAAU,CAAG/Y,EAAQgP,cAAc,CAAEJ,EAAsB5O,EAAQ4O,mBAAmB,CAClU,IAAK,IAAMxF,KAAS2I,EAAQ,CACxB,IAAMkC,EAAe7K,EAAMmF,IAAI,CAAC0F,YAAY,CAAElH,EAAoB,CAAC,EAAGI,EAAU,CAAC,EAAGvF,EAAM,CAAC,EAAGoR,EAAW,eAAiB5P,EAAMmF,IAAI,CAACpL,KAAK,CAAE8V,EAAa,CAAC,CAAC7P,EAAME,OAAO,CAAE4P,EAAgBJ,GAAwBG,EAAYxL,EAAYrE,EAAMqE,SAAS,CAErPrE,EAAMiE,UAAU,KAChBjE,EAAM+P,QAAQ,CAAG,CAAA,EACblK,GACA9B,CAAAA,EAAQiM,CAAC,CAAGnK,CAAW,EAE3B9M,EAAM,CAAA,EAEN+W,EAAgBnM,EAAoBI,EAEpC8L,EAAaxL,EAAY,CAAC,EAE1BjG,EACI,CAAC,EACD2B,AAjBG,IAAI,CAiBA2B,YAAY,CAAC1B,EAAOA,EAAMiQ,QAAQ,CAAG,SAAW,KAAK,IAI5DlQ,AArBG,IAAI,CAqBAwB,YAAY,EAAInD,GAEvBxF,EAAO4F,EAAKuB,AAvBT,IAAI,CAuBYwB,YAAY,CAACvB,IAE/BD,AAzBE,IAAI,AAyBA,CAAC6P,EAAS,GACjB7P,AA1BG,IAAI,AA0BD,CAAC6P,EAAS,CAAGtT,EAASC,CAAC,CAACqT,GACzBnT,IAAI,CAAC,CAGNxF,OAAQ,IAAQ4T,CAAAA,GAAgB,CAAA,CACpC,GACKnO,GAAG,CAACqD,AAhCN,IAAI,CAgCS1D,KAAK,EACrB0D,AAjCG,IAAI,AAiCD,CAAC6P,EAAS,CAACM,OAAO,CAAG,CAAA,IAInClQ,EAAMyD,IAAI,CAAC,CACPE,kBAAAA,EACAI,QAAAA,EACAvF,IAAAA,EACAnC,MAAO0D,AAzCA,IAAI,AAyCE,CAAC6P,EAAS,CACvBxL,SAAUpE,EAAMoE,QAAQ,CACxB9H,SAAAA,EACAgL,OAAAA,EACAjD,UAAAA,EACAH,UAAWlE,EAAMkE,SAAS,AAC9B,GAGIsB,GAAuBxF,EAAME,OAAO,EACpCF,CAAAA,EAAMmQ,OAAO,CAAGvZ,EAAQ2O,cAAc,CAClCxF,AApDG,IAAI,CAoDAqQ,aAAa,CAACpQ,GACrBD,AArDG,IAAI,CAqDAsQ,cAAc,CAACrQ,EAAK,CAEvC,CACJ,CAMAqQ,eAAerQ,CAAK,CAAE,CAClB,IAAImQ,EAAU,CAAA,EAKd,OAJKnQ,EAAMmF,IAAI,CAACG,MAAM,EAClB,AAACtF,EAAMmF,IAAI,CAACpL,KAAK,CAAG,IAAI,CAACqL,OAAO,CAAC,IAAI,CAACC,QAAQ,CAAC,CAACtL,KAAK,EAAM,GAC3DoW,CAAAA,EAAUnQ,EAAMO,EAAE,AAAD,EAEd4P,CACX,CAMAC,cAAcpQ,CAAK,CAAE,CACjB,IAAImQ,EAAU,CAAA,EAAOG,EACrB,GAAI,AAACtQ,EAAMmF,IAAI,CAAC3B,MAAM,GAAK,IAAI,CAAC6B,QAAQ,EACpCrF,EAAMmF,IAAI,CAACG,MAAM,CAEjB,IADAgL,EAAatQ,EAAMmF,IAAI,CAChB,CAACgL,GAEAG,AADJA,CAAAA,EAAa,IAAI,CAAClL,OAAO,CAACkL,EAAW9M,MAAM,CAAC,AAAD,EAC5BA,MAAM,GAAK,IAAI,CAAC6B,QAAQ,EACnC8K,CAAAA,EAAUG,EAAW/P,EAAE,AAAD,EAIlC,OAAO4P,CACX,CAKAI,YAAYhQ,CAAE,CAAElG,CAAM,CAAE,CACpBwR,EAAM,GAAI,CAAA,EAAO,KAAK,EAAG,CAAE,sBAAuB,yBAA0B,GAC5E,IAAI,CAAC2E,WAAW,CAACjQ,EAAIlG,EACzB,CACAoW,SAAU,CACN,IAAqBtL,EAAOpF,AAAb,IAAI,CAAgBqF,OAAO,CAACrF,AAA5B,IAAI,CAA+BsF,QAAQ,CAAC,CACvDF,GAAQrM,EAASqM,EAAK3B,MAAM,GAC5BzD,AAFW,IAAI,CAERyQ,WAAW,CAACrL,EAAK3B,MAAM,CAAE,CAAA,EAAM,CAAEkN,QAAS,kBAAmB,EAE5E,CACAC,aAAc,CAEV,GAAM,CAAEC,QAAAA,CAAO,CAAEC,QAAAA,CAAO,CAAE,CAAG,KAAK,CAACF,YAAY,IAAI,CAACG,cAAc,EAIlE,OAHA,IAAI,CAACC,QAAQ,CAAGH,EAChB,IAAI,CAACI,QAAQ,CAAGH,EAET,KAAK,CAACF,aACjB,CAgBAM,iBAAiBC,CAAI,CAAEC,CAAW,CAAE,CAChC,IAAMC,EAAMrJ,EAAQmJ,GAAQA,EAAO,EAAE,CAAEG,EAAMtJ,EAAQoJ,GAAeA,EAAc,EAAE,CAAEG,EAAgBF,EAAIzH,MAAM,CAAC,SAAU4H,CAAI,CAAEC,CAAI,CAAErS,CAAC,EACpI,IAAMqE,EAASvK,EAAKuY,EAAKhO,MAAM,CAAE,IAKjC,OAJ4B,KAAA,IAAjB+N,CAAI,CAAC/N,EAAO,EACnB+N,CAAAA,CAAI,CAAC/N,EAAO,CAAG,EAAE,AAAD,EAEpB+N,CAAI,CAAC/N,EAAO,CAACN,IAAI,CAAC/D,GACXoS,CACX,EAAG,CACC,GAAI,EAAE,AACV,GAEA,IAAK,IAAM/N,KAAUgB,OAAOC,IAAI,CAAC6M,GAAgB,CAC7C,IAAM/N,EAAW+N,CAAa,CAAC9N,EAAO,CACtC,GAAI,AAAY,KAAXA,GAAmB6N,AAAwB,KAAxBA,EAAII,OAAO,CAACjO,GAAiB,CACjD,IAAK,IAAMuH,KAASxH,EAChB+N,CAAa,CAAC,GAAG,CAACpO,IAAI,CAAC6H,EAE3B,QAAOuG,CAAa,CAAC9N,EAAO,AAChC,CACJ,CACA,OAAO8N,CACX,CAKAI,SAAU,CACN,IAAqBC,EAAS,IAAI,CAACT,IAAI,CAACU,GAAG,CAAC,SAAU7P,CAAC,EACnD,OAAOA,EAAExB,EAAE,AACf,GAAIsR,EAAa9R,AAFF,IAAI,CAEKkR,gBAAgB,CAAC,IAAI,CAACC,IAAI,CAAES,GAGpD,OAFA5R,AAHe,IAAI,CAGZqF,OAAO,CAAG,CAAC,EAClBrF,AAJe,IAAI,CAIZ+R,QAAQ,CAAG,EAAE,CACb/R,AALQ,IAAI,CAKLgS,SAAS,CAAC,GAAI,GAAI,EAAGF,EACvC,CACAE,UAAUxR,CAAE,CAAE8H,CAAK,CAAEtO,CAAK,CAAEkB,CAAI,CAAEuI,CAAM,CAAE,CACtC,IAAqBD,EAAW,EAAE,CAAEvD,EAAQD,AAA7B,IAAI,CAAgC4I,MAAM,CAACN,EAAM,CAC5DtR,EAAS,EAAGgU,EAEhB,IAAK,IAAM5L,KAAMlE,CAAI,CAACsF,EAAG,EAAI,EAAE,CAE3BxJ,EAAS+L,KAAKC,GAAG,CAACgI,AADlBA,CAAAA,EAAQhL,AAJG,IAAI,CAIAgS,SAAS,CAAChS,AAJd,IAAI,CAIiB4I,MAAM,CAACxJ,EAAE,CAACoB,EAAE,CAAEpB,EAAGpF,EAAQ,EAAGkB,EAAMsF,EAAE,EAC5CxJ,MAAM,CAAG,EAAGA,GACpCwM,EAASL,IAAI,CAAC6H,GAElB,IAAM5F,EAAO,IAAIpF,AARF,IAAI,CAQKiS,SAAS,GAAG1O,IAAI,CAAC/C,EAAI8H,EAAO9E,EAAUxM,EAAQgD,EARvD,IAAI,CAQkEyJ,GACrF,IAAK,IAAMuH,KAASxH,EAChBwH,EAAMkH,UAAU,CAAG9M,EAQvB,OANApF,AAZe,IAAI,CAYZqF,OAAO,CAACD,EAAK5E,EAAE,CAAC,CAAG4E,EAC1BpF,AAbe,IAAI,CAaZ+R,QAAQ,CAAC5O,IAAI,CAACiC,GACjBnF,IACAA,EAAMmF,IAAI,CAAGA,EACbA,EAAKnF,KAAK,CAAGA,GAEVmF,CACX,CAMA+M,SAAU,CACN,MAAO,CAAC,CAAC,IAAI,CAACC,cAAc,CAACzW,MAAM,AACvC,CACA4H,KAAKlK,CAAK,CAAExC,CAAO,CAAE,CACjB,IAAMmJ,EAAS,IAAI,CAAEtG,EAAqBV,EAAMnC,EAAQwE,aAAa,CAAExE,EAAQyC,WAAW,EAAG+Y,EAAkB1Z,EAASqH,EAAQ,aAAc,AAACxF,IAC3I,IAAM3D,EAAU2D,EAAMO,WAAW,CAC7BnC,EAAQ/B,EAAQyb,gBAAgB,GAChC,CAAC1Z,EAAQ/B,EAAQ4O,mBAAmB,IACpC5O,EAAQ4O,mBAAmB,CAAG5O,EAAQyb,gBAAgB,CACtD,OAAOzb,EAAQyb,gBAAgB,EAE/B1Z,EAAQ/B,EAAQwE,aAAa,GAC7B,CAACzC,EAAQ/B,EAAQkQ,gBAAgB,IACjClQ,EAAQkQ,gBAAgB,CAAGlQ,EAAQwE,aAAa,CAChD,OAAOxE,EAAQwE,aAAa,CAEpC,GACA,KAAK,CAACkI,KAAKlK,EAAOxC,GAElB,OAAOmJ,EAAOkH,OAAO,CAErBlH,EAAOuS,cAAc,CAACpP,IAAI,CAACkP,GACvBrS,EAAOnJ,OAAO,CAAC4O,mBAAmB,GAClCzF,EAAOuS,cAAc,CAACpP,IAAI,CAACxK,EAASqH,EAAQ,QAASA,EAAOwS,kBAAkB,GAC9ExS,EAAOuS,cAAc,CAACpP,IAAI,CAACxK,EAASqH,EAAQ,cAAe,SAAUlC,CAAC,EAClE,IAAMzE,EAAQ2G,EAAO3G,KAAK,AACtBA,CAAAA,EAAMC,WAAW,EAEjBD,EAAMC,WAAW,CAACkC,gBAAgB,CAACwE,EAAOiP,UAAU,CAACnR,GAE7D,IACAkC,EAAOuS,cAAc,CAACpP,IAAI,CAACxK,EAASqH,EAAQ,SAE5C,SAAUlC,CAAC,CAAExD,CAAM,EACf,IAAMhB,EAAc,IAAI,CAACD,KAAK,CAACC,WAAW,CACtCA,GAAewE,EAAEjH,OAAO,CAACyC,WAAW,EACpCA,EAAYoF,MAAM,CAACZ,EAAEjH,OAAO,CAACyC,WAAW,CAEhD,IACA0G,EAAOuS,cAAc,CAACpP,IAAI,CAACxK,EAASqH,EAAQ,UAAW,SAAuBlC,CAAC,EAC3E,IAAMzE,EAAQ,IAAI,CAACA,KAAK,AACpBA,CAAAA,EAAMC,WAAW,EAAI,CAACwE,EAAE2U,mBAAmB,GAC3CpZ,EAAMC,WAAW,CAACQ,OAAO,GACzBT,EAAMC,WAAW,CAAG,KAAK,EAEjC,KAECD,EAAMC,WAAW,EAClBD,CAAAA,EAAMC,WAAW,CAAG,IAAIoB,EAAYrB,EAAOK,EAAkB,EAEjEsG,EAAOuS,cAAc,CAACpP,IAAI,CAACxK,EAASU,EAAMC,WAAW,CAAE,KAAM,SAAUwE,CAAC,EACpE,IAAM4U,EAAiB,IAAI,CAAC1Y,KAAK,CAAG8D,EAAEM,QAAQ,CAC9C,IAAK,IAAIgB,EAAI,EAAGA,EAAIsT,EAAgBtT,IAChCY,EAAO0Q,OAAO,EAEtB,GACJ,CAKA8B,mBAAmBhY,CAAK,CAAE,CACtB,IAAqByF,EAAQzF,EAAMyF,KAAK,CAAEmQ,EAAUnQ,GAASA,EAAMmQ,OAAO,CAEtErX,EAASqX,KACTnQ,EAAMV,QAAQ,CAAC,IACfS,AAJW,IAAI,CAIRyQ,WAAW,CAACL,EAAS,CAAA,EAAM,CAAEO,QAAS,OAAQ,GAE7D,CAKAhP,aAAa1B,CAAK,CAAEM,CAAK,CAAE,KAkBnB2G,EAjBJ,IAAqBqB,EAAqBN,EAASjI,AAApC,IAAI,CAAuCuI,iBAAiB,EACvEvI,AADW,IAAI,CACRuI,iBAAiB,CACxB,CAAC,EAAIvO,EAAQiG,GAASsI,CAAiB,CAACtI,EAAMmF,IAAI,CAACpL,KAAK,CAAC,EAAI,CAAC,EAAGnD,EAAU,IAAI,CAACA,OAAO,CAAE8b,EAAepS,GAAS1J,EAAQM,MAAM,EAAIN,EAAQM,MAAM,CAACoJ,EAAM,EAAI,CAAC,EAAG4E,EAAY,AAAClF,GAASA,EAAMgE,YAAY,IAAO,GAGnNvH,EAAO,CACH,OAAU,AAACuD,GAASA,EAAM+G,WAAW,EACjChN,EAAMgN,WAAW,EACjB2L,EAAa3L,WAAW,EACxBnQ,EAAQmQ,WAAW,CACvB,eAAgB9N,EAAK+G,GAASA,EAAMgH,WAAW,CAAEjN,EAAMiN,WAAW,CAAE0L,EAAa1L,WAAW,CAAEpQ,EAAQoQ,WAAW,EACjH,UAAa,AAAChH,GAASA,EAAM2S,eAAe,EACxC5Y,EAAM4Y,eAAe,EACrBD,EAAaC,eAAe,EAC5B/b,EAAQ+b,eAAe,CAC3B,KAAQ,AAAC3S,GAASA,EAAM3I,KAAK,EAAK,IAAI,CAACA,KAAK,AAChD,EAuBA,OApBI6N,AAAgD,KAAhDA,EAAUuM,OAAO,CAAC,2BAClBhV,EAAK3F,IAAI,CAAG,OACZ2F,CAAI,CAAC,eAAe,CAAG,GAGlByI,AAA8D,KAA9DA,EAAUuM,OAAO,CAAC,yCACvBxK,EAAUhO,EAAKyZ,EAAazL,OAAO,CAAErQ,EAAQqQ,OAAO,EACpDxK,EAAK3F,IAAI,CAAGO,EAAMoF,EAAK3F,IAAI,EAAE8b,UAAU,CAAC3L,GAASmC,GAAG,GACpD3M,EAAKoW,MAAM,CAAG,WAGT3N,AAAkD,KAAlDA,EAAUuM,OAAO,CAAC,4BACvBhV,EAAK3F,IAAI,CAAG,OAEPwJ,GAEL7D,CAAAA,EAAK3F,IAAI,CAAGO,EAAMoF,EAAK3F,IAAI,EACtBoS,QAAQ,CAACwJ,EAAavL,UAAU,EAChCiC,GAAG,EAAC,EAEN3M,CACX,CAKAqW,kBAAkB3N,CAAI,CAAEoD,CAAW,CAAEH,CAAU,CAAEC,CAAK,CAAEK,CAAQ,CAAE,CAC9D,IAAqBtP,EAAQ2G,AAAd,IAAI,EAAoBA,AAAxB,IAAI,CAA2B3G,KAAK,CAAEqP,EAASrP,GAASA,EAAMxC,OAAO,EAAIwC,EAAMxC,OAAO,CAAC6R,MAAM,CAC5G,GAAItD,EAAM,CACN,IAAM4N,EAAY7K,EAAS/C,EAAM,CAC7BsD,OAAQA,EACRJ,MAAOA,EACPC,kBAAmBvI,AALZ,IAAI,CAKeuI,iBAAiB,CAC3CC,YAAaA,EACbC,iBAAkBJ,EAClBrI,OARO,IAAI,CASX2I,SAAUA,CACd,GAAI1I,EAAQD,AAVD,IAAI,CAUI4I,MAAM,CAACxD,EAAKhG,CAAC,CAAC,CAC7Ba,IACAA,EAAM3I,KAAK,CAAG0b,EAAU1b,KAAK,CAC7B2I,EAAMoI,UAAU,CAAG2K,EAAU3K,UAAU,EAE3C,IAAIjJ,EAAI,GAER,IAAK,IAAM4L,KAAU5F,EAAK5B,QAAQ,EAAI,EAAE,CACpCxD,AAlBO,IAAI,CAkBJ+S,iBAAiB,CAAC/H,EAAOgI,EAAU1b,KAAK,CAAE0b,EAAU3K,UAAU,CAAE,EAAEjJ,EAAGgG,EAAK5B,QAAQ,CAAC7H,MAAM,CAExG,CACJ,CACAsX,gBAAiB,CACb,IAAMjT,EAAS,IAAI,CACb,CAAE4I,OAAAA,CAAM,CAAEuD,MAAAA,CAAK,CAAEC,MAAAA,CAAK,CAAE,CAAGpM,EAC3B3B,EAAa2B,EAAO3G,KAAK,CAACgF,UAAU,CAOpC6U,EAAiB,AAACjT,GAAW5B,EAC/B,EACC2B,EAAO2B,YAAY,CAAC1B,EAAM,CAAC,eAAe,EAAI,EACnD,IAAK,IAAMA,KAAS2I,EAAQ,CACxB,GAAM,CAAEkG,YAAaD,CAAM,CAAEvL,QAAAA,CAAO,CAAE,CAAGrD,EAAMmF,IAAI,CAEnD,GAAIyJ,GAAUvL,EAAS,CACnB,GAAM,CAAEtM,OAAAA,CAAM,CAAE4C,MAAAA,CAAK,CAAE7B,EAAAA,CAAC,CAAEC,EAAAA,CAAC,CAAE,CAAG6W,EAC1BsE,EAAcD,EAAejT,GAC7BmT,EAAKvH,EAAMM,EAAMkH,QAAQ,CAACtb,EAAG,CAAA,GAAOob,EAAa,CAAA,GACjDG,EAAKzH,EAAMM,EAAMkH,QAAQ,CAACtb,EAAI6B,EAAO,CAAA,GAAOuZ,EAAa,CAAA,GACzDI,EAAK1H,EAAMO,EAAMiH,QAAQ,CAACrb,EAAG,CAAA,GAAOmb,EAAa,CAAA,GACjDK,EAAK3H,EAAMO,EAAMiH,QAAQ,CAACrb,EAAIhB,EAAQ,CAAA,GAAOmc,EAAa,CAAA,GAE1D7O,EAAY,CACdvM,EAAGgL,KAAK0J,GAAG,CAAC2G,EAAIE,GAChBtb,EAAG+K,KAAK0J,GAAG,CAAC8G,EAAIC,GAChB5Z,MAAOmJ,KAAK0Q,GAAG,CAACH,EAAKF,GACrBpc,OAAQ+L,KAAK0Q,GAAG,CAACD,EAAKD,EAC1B,CACAtT,CAAAA,EAAMyT,KAAK,CAAGpP,EAAUvM,CAAC,CAAIuM,EAAU1K,KAAK,CAAG,EAC/CqG,EAAM0F,KAAK,CAAGrB,EAAUtM,CAAC,CAAIsM,EAAUtN,MAAM,CAAG,EAChDiJ,EAAMqE,SAAS,CAAGA,CACtB,MAGI,OAAOrE,EAAMyT,KAAK,CAClB,OAAOzT,EAAM0F,KAAK,AAE1B,CACJ,CAkCA8K,YAAYjQ,CAAE,CAAElG,CAAM,CAAEqZ,CAAc,CAAE,CAgCpC7a,EA/Be,IAAI,CA+BD,cA/BeD,EAAO,CACpCuW,UAAW5O,EACXoT,eAAgB5T,AAFL,IAAI,CAEQsF,QAAQ,CAC/BhL,OAAQpB,EAAKoB,EAAQ,CAAA,GACrB0F,OAJW,IAAI,AAKnB,EAAG2T,GAce,SAAUxd,CAAI,EAC5B,IAAM6J,EAAS7J,EAAK6J,MAAM,AAE1BA,CAAAA,EAAO6T,cAAc,CAAG1d,EAAKyd,cAAc,CAC3C5T,EAAOsF,QAAQ,CAAGnP,EAAKiZ,SAAS,CAEhCpP,EAAO/E,OAAO,CAAG,CAAA,EACb9E,EAAKmE,MAAM,EACX0F,EAAO3G,KAAK,CAACiB,MAAM,EAE3B,EAGJ,CAOAiF,SAASgB,CAAK,CAAE,CACZ,IAAI,CAAC1J,OAAO,CAACid,mBAAmB,CAAG,CAAA,EACnC,KAAK,CAACvU,SAASgB,EAAO,CAAA,GACtB,IAAI,CAAC1J,OAAO,CAACid,mBAAmB,CAAG,CAAA,CACvC,CACAvJ,cAAcC,CAAI,CAAE,CAChB,IAAqB3T,EAAUmJ,AAAhB,IAAI,CAAmBnJ,OAAO,CAAE6T,EAAS1K,AAAzC,IAAI,CAA4CsF,QAAQ,CAAgCqF,EAAWC,AAA3B5K,AAAxE,IAAI,CAA2EqF,OAAO,AAAwB,CAACqF,EAAO,CAAE5D,EAAmB,AAAmC,WAAnC,OAAOjQ,EAAQiQ,eAAe,EACpLjQ,EAAQiQ,eAAe,CAChBtD,EAAW,EAAE,CAAEvD,EAAQD,AAFnB,IAAI,CAEsB4I,MAAM,CAAC4B,EAAKpL,CAAC,CAAC,CAEnDiE,EAAgB,EACpB,IAAK,IAAI2H,KAASR,EAAKhH,QAAQ,CAC3BwH,EAAQhL,AANG,IAAI,CAMAuK,aAAa,CAACS,GAC7BxH,EAASL,IAAI,CAAC6H,GACTA,EAAM2D,MAAM,EACbtL,CAAAA,GAAiB2H,EAAME,GAAG,AAAD,EAIjCa,EAAWvI,EAAU,CAACuQ,EAAGC,IAAO,AAACD,CAAAA,EAAEE,SAAS,EAAI,CAAA,EAAMD,CAAAA,EAAEC,SAAS,EAAI,CAAA,GAErE,IAAM/I,EAAMhS,EAAK+G,GAASA,EAAMpJ,OAAO,CAACkK,KAAK,CAAEsC,GAe/C,OAdIpD,GACAA,CAAAA,EAAMc,KAAK,CAAGmK,CAAE,EAEpBrS,EAAO2R,EAAM,CACThH,SAAUA,EACVH,cAAeA,EAEfsL,OAAQ,CAAEzV,CAAAA,EAAK+G,GAASA,EAAMqD,OAAO,CAAE,CAAA,IAAU4H,EAAM,CAAC,EACxD3F,OAAQiF,EAAKlH,OAAO,EAAI,CAACD,EACzByH,aAAeN,EAAKxQ,KAAK,CAAI8M,CAAAA,EAAkB,EAAI6D,EAAS3Q,KAAK,AAAD,EAChEqM,KAAMnN,EAAK+G,GAASA,EAAMoG,IAAI,CAAE,IAChC4N,UAAW/a,EAAK+G,GAASA,EAAMgU,SAAS,CAAE,CAAC/I,GAC3CA,IAAKA,CACT,GACOV,CACX,CACA0J,aAAazQ,CAAM,CAAED,CAAQ,CAAE,CAC3B,OAAO,IAAI,CAACqK,aAAa,CAAC,CAAA,EAAMpK,EAAQD,EAC5C,CACA2Q,WAAW1Q,CAAM,CAAED,CAAQ,CAAE,CACzB,OAAO,IAAI,CAACuK,uBAAuB,CAAC,CAAA,EAAMtK,EAAQD,EACtD,CACA4Q,MAAM3Q,CAAM,CAAED,CAAQ,CAAE,CACpB,OAAO,IAAI,CAACuK,uBAAuB,CAAC,CAAA,EAAOtK,EAAQD,EACvD,CACA6Q,QAAQ5Q,CAAM,CAAED,CAAQ,CAAE,CACtB,OAAO,IAAI,CAACqK,aAAa,CAAC,CAAA,EAAOpK,EAAQD,EAC7C,CACArE,WAAY,CACR,IAAMa,EAAS,IAAI,CAAEnJ,EAAUmJ,EAAOnJ,OAAO,CAE7CuU,EAASD,EAAanL,GAASsF,EAAUwJ,EAAawF,EAAYpJ,EAElE,KAAK,CAAC/L,YAEN,IAAMqL,EAAOxK,EAAOwK,IAAI,CAAGxK,EAAO2R,OAAO,GACzCrM,EAAWtF,EAAOqF,OAAO,CAAC+F,EAAO,CAClB,KAAXA,GACC,AAAC9F,GAAaA,EAAS9B,QAAQ,CAAC7H,MAAM,GACvCqE,EAAOyQ,WAAW,CAAC,GAAI,CAAA,GACvBrF,EAASpL,EAAOsF,QAAQ,CACxBA,EAAWtF,EAAOqF,OAAO,CAAC+F,EAAO,EAErCpL,EAAOuI,iBAAiB,CAAGe,EAAgB,CACvCG,KAAMnE,EAAStL,KAAK,CAAG,EACvB0P,OAAQ7S,EAAQ6S,MAAM,CACtBN,GAAIoB,EAAKxT,MAAM,CACfuS,SAAU,CACNzC,gBAAiB9G,EAAOnJ,OAAO,CAACiQ,eAAe,CAC/Cb,aAAcpP,EAAQoP,YAAY,AACtC,CACJ,GAEAwB,EAAiBC,SAAS,CAAC1H,EAAOqF,OAAO,CAACrF,EAAOsF,QAAQ,CAAC,CAAE,AAACF,IACzD,IAAMnD,EAAImD,EAAK3B,MAAM,CACjBqE,EAAO,CAAA,EAKX,OAJA1C,EAAK9B,OAAO,CAAG,CAAA,EACXrB,CAAAA,GAAKA,AAAM,KAANA,CAAO,GACZ6F,CAAAA,EAAO9H,EAAOqF,OAAO,CAACpD,EAAE,AAAD,EAEpB6F,CACX,GAEAL,EAAiBC,SAAS,CAAC1H,EAAOqF,OAAO,CAACrF,EAAOsF,QAAQ,CAAC,CAAC9B,QAAQ,CAAE,AAACA,IAClE,IAAIsE,EAAO,CAAA,EACX,IAAK,IAAMkD,KAASxH,EAChBwH,EAAM1H,OAAO,CAAG,CAAA,EACZ0H,EAAMxH,QAAQ,CAAC7H,MAAM,EACrBmM,CAAAA,EAAO,AAACA,CAAAA,GAAQ,EAAE,AAAD,EAAGyM,MAAM,CAACvJ,EAAMxH,QAAQ,CAAA,EAGjD,OAAOsE,CACX,GACA9H,EAAOuK,aAAa,CAACC,GAErBxK,EAAO+O,SAAS,CAAI/O,EAAOmM,KAAK,CAACqI,GAAG,CAAGxU,EAAOoM,KAAK,CAACoI,GAAG,CACvDxU,EAAOqF,OAAO,CAAC,GAAG,CAACyJ,WAAW,CAAGA,EAAc,CAC3C/W,EAAG,EACHC,EAAG,EACH4B,MAn3BI,IAo3BJ5C,OAp3BI,GAq3BR,EACAgJ,EAAOqF,OAAO,CAAC,GAAG,CAACwJ,MAAM,CAAGyF,EAAatb,EAAM8V,EAAa,CACxDlV,MAAQkV,EAAYlV,KAAK,CAAGoG,EAAO+O,SAAS,CAC5C5M,UAAYtL,AAAoC,aAApCA,EAAQ+P,uBAAuB,CAAkB,EAAI,EACjEsE,IAAKV,EAAKU,GAAG,AACjB,GACAlL,EAAOqO,sBAAsB,CAAC7D,EAAM8J,GAE/BtU,EAAOyU,SAAS,EAChB5d,EAAQoP,YAAY,EACrBjG,EAAO+S,iBAAiB,CAAC/S,EAAOwK,IAAI,EAGpC3T,EAAQ4O,mBAAmB,GAC3ByF,EAAM5F,EAASwJ,WAAW,CAC1B9O,EAAOmM,KAAK,CAACuI,WAAW,CAACxJ,EAAInT,CAAC,CAAEmT,EAAInT,CAAC,CAAGmT,EAAItR,KAAK,CAAE,CAAA,GACnDoG,EAAOoM,KAAK,CAACsI,WAAW,CAACxJ,EAAIlT,CAAC,CAAEkT,EAAIlT,CAAC,CAAGkT,EAAIlU,MAAM,CAAE,CAAA,GACpDgJ,EAAOmM,KAAK,CAACwI,QAAQ,GACrB3U,EAAOoM,KAAK,CAACuI,QAAQ,IAGzB3U,EAAOiT,cAAc,EACzB,CACJ,CA8BA,OAxBAjG,EAAc1R,cAAc,CAAGtC,EAAM2S,EAAcrQ,cAAc,CAAEiQ,GACnE1S,EAAOmU,EAAcpN,SAAS,CAAE,CAC5BgV,YAAanJ,EACbjK,aAAc9B,EAAoBwB,aAAa,CAACM,YAAY,CAC5DL,SAAU,aACV0T,YAAa,CAAA,EACbC,mBAAoB,CAAA,EACpBC,UAAWtJ,EACXuJ,aAAc,YACd3T,eAAgB,CAAC,IAAK,IAAK,QAAS,aAAa,CACjDC,cAAe,CAAC,QAAQ,CACxBO,WAAYoD,EACZgN,UAAW3G,EACX/J,cAAe,CAAC,QAAS,kBAAkB,CAC3C0T,MAAOxN,CACX,GACA/H,EAAoB/E,OAAO,CAACqS,GAC5BxN,EAAe0V,kBAAkB,CAAC,UAAWlI,GAOtCA,CACX,GACAhX,EAAgBD,EAAU,mCAAoC,CAACA,CAAQ,CAAC,gCAAgC,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAUyJ,CAAc,CAAE/G,CAAC,EAcjK,GAAM,CAAEuH,OAAQ,CAAEJ,UAAW,CAAEiC,WAAYsT,CAAK,CAAE,CAAE,CAAErV,YAAa,CAAEsV,QAAS,CAAExV,UAAW,CAAEiC,WAAYoD,CAAY,CAAE,CAAE,CAAE,CAAE,CAAGzF,EAC1H,CAAEoM,aAAAA,CAAY,CAAE/S,OAAAA,CAAM,CAAEwc,KAAAA,CAAI,CAAE,CAAG5c,CAMvC,OAAM6c,UAAsBrQ,EAMxBsQ,iBAAiB/W,CAAK,CAAE,CACpB,IAAMjC,EAAW,IAAI,CAACyD,MAAM,CAAC3G,KAAK,CAACkD,QAAQ,CAAE+H,EAAY,IAAI,CAACkR,aAAa,CAAEvF,EAAI3L,EAAU2L,CAAC,CAAGoF,EAAK7W,EAAM3H,OAAO,EAAE4e,UAAY,GAC3HC,EAAQpR,EAAUoR,KAAK,CAAErI,EAAM/I,EAAU+I,GAAG,CAC1CsI,EAAQD,EAAQ,AAACrI,CAAAA,EAAMqI,CAAI,EAAK,EAClCE,EAAYD,EAAQ,GACpBA,EAAQ,CAAC5S,KAAK8S,EAAE,EAChBF,EAAQ5S,KAAK8S,EAAE,CAAEC,EAqCrB,OAnCIJ,IAAU,CAAC3S,KAAK8S,EAAE,CAAG,GACrBjK,EAAayB,KAASzB,EAAa7I,AAAU,IAAVA,KAAK8S,EAAE,IAC1CH,EAAQ,CAAC3S,KAAK8S,EAAE,CAAG9S,KAAK8S,EAAE,CAAG,IAC7BxI,EAAM,CAACtK,KAAK8S,EAAE,CAAG,IACjBD,EAAY,CAAA,GAGZvI,EAAMqI,EAAQ3S,KAAK8S,EAAE,GACrBD,EAAY,CAAA,EACZE,EAAe,CAAA,EAGVzI,EAAMqI,EAAS,EAAI3S,KAAK8S,EAAE,CAAG,MAC9BH,GAAS,IACTrI,GAAO,MAGX,IAAI,CAAC0I,aAAa,EAClB,CAAA,IAAI,CAACA,aAAa,CAAG,IAAI,CAACA,aAAa,CAACjc,OAAO,EAAC,EAGpD,IAAI,CAACic,aAAa,CAAGxZ,EAChByZ,GAAG,CAAC,CACLC,KAAM,CAAA,EACNC,QAASJ,EAAe,EAAI,CAChC,GACKpZ,IAAI,CAAC,CACNgZ,MAAQE,EAAYF,EAAQrI,EAC5BA,IAAMuI,EAAYvI,EAAMqI,EACxBS,UAAW,CAACP,EACZ7d,EAAGuM,EAAUvM,CAAC,CACdC,EAAGsM,EAAUtM,CAAC,CACdiY,EAAG,AAACA,CAAAA,EAAI3L,EAAU8R,MAAM,AAAD,EAAK,CAChC,GACKzZ,GAAG,CAACJ,EAAS8Z,IAAI,EACf,IAAI,CAACN,aAAa,AAC7B,CACAjV,SAAU,CACN,MAAO,CAAA,CACX,CACJ,CAYA,OAXAjI,EAAOyc,EAAc1V,SAAS,CAAE,CAC5BqE,aAAckR,EAAMvV,SAAS,CAACqE,YAAY,CAC1CqS,SAAUnB,EAAMvV,SAAS,CAAC0W,QAAQ,CAClC/W,SAAU4V,EAAMvV,SAAS,CAACL,QAAQ,AACtC,GAOO+V,CACX,GACAtf,EAAgBD,EAAU,uCAAwC,CAACA,CAAQ,CAAC,gCAAgC,CAAEA,CAAQ,CAAC,oBAAoB,CAAC,CAAE,SAAUyJ,CAAc,CAAE/G,CAAC,EAcrK,GAAM,CAAEqH,YAAa,CAAEsV,QAASpI,CAAa,CAAE,CAAE,CAAGxN,EAC9C,CAAEwF,SAAAA,CAAQ,CAAEiD,SAAAA,CAAQ,CAAEjP,MAAAA,CAAK,CAAE,CAAGP,EAqFtC,SAAS8d,EAAM9M,CAAI,CAAEL,CAAE,EACnB,IAAMO,EAAS,EAAE,CACjB,GAAI3E,EAASyE,IAASzE,EAASoE,IAAOK,GAAQL,EAC1C,IAAK,IAAIhK,EAAIqK,EAAMrK,GAAKgK,EAAIhK,IACxBuK,EAAOxG,IAAI,CAAC/D,GAGpB,OAAOuK,CACX,CAaA,MAP0B,CACtB6M,oBAjFJ,SAA6Bpa,CAAY,CAAEuH,CAAM,EAC7C,IAAM1B,EAAIgG,EAAStE,GAAUA,EAAS,CAAC,EACnCgG,EAAQ8M,EAAc,EAAGC,EAAYhN,EAAQiN,EAAmBC,EACpE,GAAI3O,EAAS7L,GAAe,CAYxB,IAAK,IAAMpC,KAXX2P,EAAS3Q,EAAM,CAAC,EAAGoD,GAGnBsN,EAAS6M,EAFFvR,EAAS/C,EAAEwH,IAAI,EAAIxH,EAAEwH,IAAI,CAAG,EAC9BzE,EAAS/C,EAAEmH,EAAE,EAAInH,EAAEmH,EAAE,CAAG,GAE7BuN,EAAoBlS,OAAOC,IAAI,CAACiF,GAAQ8E,MAAM,CAAC,AAACxF,GAASS,AAAyB,KAAzBA,EAAOgI,OAAO,CAAC,CAACzI,IACzEyN,EAAaE,EAAgB5R,EAAS/C,EAAEyU,UAAU,EAC9CzU,EAAEyU,UAAU,CAAG,EAKChN,GAAQ,CACxB,IAAM7S,EAAU8S,CAAM,CAAC3P,EAAM,CAAE6c,EAAOhgB,EAAQigB,SAAS,CAACD,IAAI,CAAE9V,EAAQlK,EAAQigB,SAAS,CAAC/V,KAAK,AACzF8V,AAAS,CAAA,WAATA,EACAJ,GAAe1V,EAEV8V,AAAS,eAATA,GACLhgB,EAAQigB,SAAS,CAAG,CAChBD,KAAM,SACN9V,MAAO,AAACA,EAAQ,IAAO2V,CAC3B,EACAE,GAAiB/f,EAAQigB,SAAS,CAAC/V,KAAK,EAE1B,WAAT8V,GACLD,CAAAA,GAAiB7V,CAAI,CAE7B,CAEA,IAAK,IAAM/G,KAAS0P,EAAQ,CACxB,IAAM7S,EAAU8S,CAAM,CAAC3P,EAAM,CAC7B,GAAInD,AAA2B,WAA3BA,EAAQigB,SAAS,CAACD,IAAI,CAAe,CACrC,IAAME,EAASlgB,EAAQigB,SAAS,CAAC/V,KAAK,AACtC4I,CAAAA,CAAM,CAAC3P,EAAM,CAAC8c,SAAS,CAAG,CACtBD,KAAM,SACN9V,MAAO,AAACgW,EAASN,EAAeG,CACpC,CACJ,CACJ,CAGA,IAAK,IAAM5c,KAAS2c,EAChBhN,CAAM,CAAC3P,EAAM,CAAC8c,SAAS,CAAG,CACtB/V,MAAO,EACP8V,KAAM,QACV,CAER,CACA,OAAOlN,CACX,EA8BIqN,kBA1BJ,SAA2B,CAAEhd,MAAAA,CAAK,CAAEhD,OAAAA,CAAM,CAAE,EAIxC,MAAO,CAAEyS,KAFIzP,EAAQ,EAAIA,EAAQ,EAElBoP,GADJpP,EAAQhD,CACD,CACtB,EAsBIuf,MAAAA,EACA7O,UAAWsF,EAAcpN,SAAS,CAACqV,KAAK,CAACvN,SAAS,AACtD,CAGJ,GACA1R,EAAgBD,EAAU,kCAAmC,CAACA,CAAQ,CAAC,gCAAgC,CAAC,CAAE,SAAUuV,CAAW,EAuB3H,OARA,cAA2BA,EAC3B,CAQJ,GACAtV,EAAgBD,EAAU,4CAA6C,EAAE,CAAE,WAmWvE,MA7T+B,CAgI3BkhB,OAAQ,CAAC,MAAO,MAAM,CAMtBC,KAAM,CAAA,EACNjR,aAAc,CAAA,EAQdiB,QAAS,EAMThB,WAAY,CACRiR,aAAc,CAAA,EACdhR,MAAO,CAAA,EAoBPiR,aAAc,WACd/f,MAAO,CAEH8W,aAAc,UAClB,CACJ,EAQA/C,OAAQ,KAAK,EASbtE,gBAAiB,CAAA,EAWjBgQ,UAAW,CAQP/V,MAAO,EAkBP8V,KAAM,QACV,EAsBAQ,aAAc,EAClB,CAgEJ,GACArhB,EAAgBD,EAAU,oCAAqC,CAACA,CAAQ,CAAC,8BAA8B,CAAEA,CAAQ,CAAC,kBAAkB,CAAEA,CAAQ,CAAC,gCAAgC,CAAEA,CAAQ,CAAC,mCAAmC,CAAEA,CAAQ,CAAC,uCAAuC,CAAEA,CAAQ,CAAC,0BAA0B,CAAEA,CAAQ,CAAC,oBAAoB,CAAEA,CAAQ,CAAC,kCAAkC,CAAEA,CAAQ,CAAC,4CAA4C,CAAC,CAAE,SAAUuhB,CAAE,CAAE9e,CAAC,CAAEgH,CAAc,CAAE8V,CAAa,CAAEiC,CAAiB,CAAE/L,CAAE,CAAE/S,CAAC,CAAE+e,CAAY,CAAEC,CAAsB,EAcpiB,GAAM,CAAEC,UAAAA,CAAS,CAAEC,sBAAAA,CAAqB,CAAE,CAAGL,EACvC,CAAE7L,KAAAA,CAAI,CAAE,CAAGjT,EACX,CAAEmH,OAAQ+L,CAAY,CAAE0J,QAASpI,CAAa,CAAE,CAAGxN,EAAeM,WAAW,CAC7E,CAAEqI,SAAAA,CAAQ,CAAEmB,gBAAAA,CAAe,CAAEiB,cAAAA,CAAa,CAAEY,aAAAA,CAAY,CAAE,CAAGK,EAC7D,CAAE5S,QAAAA,CAAO,CAAEkT,MAAAA,CAAK,CAAEjT,OAAAA,CAAM,CAAEC,UAAAA,CAAS,CAAEkM,SAAAA,CAAQ,CAAEiD,SAAAA,CAAQ,CAAElP,SAAAA,CAAQ,CAAEC,MAAAA,CAAK,CAAE4e,MAAAA,CAAK,CAAE,CAAGnf,EAMpFof,EAAU,IAAM9U,KAAK8S,EAAE,CAgCvBiC,EAAc,SAAqB/f,CAAC,CAAEC,CAAC,CAAE2d,CAAK,CAAEF,CAAQ,EAC1D,MAAO,CACH1d,EAAGA,EAAKgL,KAAKgV,GAAG,CAACpC,GAASF,EAC1Bzd,EAAGA,EAAK+K,KAAKiV,GAAG,CAACrC,GAASF,CAC9B,CACJ,EAmNA,SAASwC,EAAsB7S,CAAI,CAAEvO,CAAO,EACxC,IAAM+T,EAAc/T,EAAQ+T,WAAW,CAAEnH,EAAS2B,EAAK3B,MAAM,CAAE8M,EAAa9M,EAASmH,CAAW,CAACnH,EAAO,CAAG,KAAK,EAAGzD,EAASnJ,EAAQmJ,MAAM,CAAE3G,EAAQ2G,EAAO3G,KAAK,CAA0B4G,EAAQ2I,AAAvB5I,EAAO4I,MAAM,AAAgB,CAACxD,EAAKhG,CAAC,CAAC,CAAmE4T,EAAY7K,EAAS/C,EAAM,CAC1SsD,OADuN1I,EAAOnJ,OAAO,CAAC6R,MAAM,EAAIrP,GAASA,EAAMxC,OAAO,CAAC6R,MAAM,CAE7QL,WAAYrI,EAAOqI,UAAU,CAC7BC,MAAOzR,EAAQyR,KAAK,CACpBC,kBAAmB1R,EAAQ0R,iBAAiB,CAC5CC,YAAa+H,GAAcA,EAAWjZ,KAAK,CAC3CmR,iBAAkB8H,GAAcA,EAAWlI,UAAU,CACrDrI,OAAQnJ,EAAQmJ,MAAM,CACtB2I,SAAU9R,EAAQ8R,QAAQ,AAC9B,GASA,OARAvD,EAAK9N,KAAK,CAAG0b,EAAU1b,KAAK,CAC5B8N,EAAKiD,UAAU,CAAG2K,EAAU3K,UAAU,CAClCpI,IACAA,EAAM3I,KAAK,CAAG8N,EAAK9N,KAAK,CACxB2I,EAAMoI,UAAU,CAAGjD,EAAKiD,UAAU,CAElCjD,EAAK8S,MAAM,CAAG,AAAC9S,EAAK5E,EAAE,GAAK3J,EAAQ6T,MAAM,EAAIzK,EAAMiY,MAAM,EAEtD9S,CACX,CAMA,MAAM+S,UAAuBnL,EAMzBgB,eAAe/N,CAAK,CAAEgO,CAAS,CAAEC,CAAY,CAAE,CAC3C,GAAIA,CAAAA,EAAakK,QAAQ,GAAIlK,EAAakK,QAAQ,CAAChS,OAAO,CAG1D,OAAO,KAAK,CAAC4H,eAAe1X,KAAK,CAAC,IAAI,CAAE4O,UAC5C,CAKAX,QAAQhB,CAAI,CAAE,KAKNS,EAJJ,IAAM3K,EAAQ,IAAI,CAACA,KAAK,CAAE4d,EAAS,CAC/B5d,EAAMgf,SAAS,CAAG,EAClBhf,EAAMif,UAAU,CAAG,EACtB,CAAEC,EAAWlf,EAAMkf,QAAQ,CAAEne,EAAUf,EAAMe,OAAO,CAAEkC,EAAQ,IAAI,CAACA,KAAK,CAGrEiH,GAEAS,EAAU,CACNwU,WAAYvB,CAAM,CAAC,EAAE,CAAGsB,EACxBE,WAAYxB,CAAM,CAAC,EAAE,CAAG7c,EACxBse,OAAQ,KACRC,OAAQ,KACRC,SAAU,GACV1R,QAAS,GACb,EACA5K,EAAMI,IAAI,CAACsH,KAIXA,EAAU,CACNwU,WAAYD,EACZE,WAAYre,EACZse,OAAQ,EACRC,OAAQ,EACRC,SAAU,EACV1R,QAAS,CACb,EACA5K,EAAMiI,OAAO,CAACP,EAAS,IAAI,CAACnN,OAAO,CAACiN,SAAS,EAErD,CACA4L,YAAa,CACT,IAAM1P,EAAS,IAAI,CAAEuI,EAAoBvI,EAAOuI,iBAAiB,CAAEsQ,EAAY7Y,EAAO6Y,SAAS,CAAEvc,EAAQ0D,EAAO1D,KAAK,CAAEyH,EAAc/D,EAAO+D,WAAW,CAAE2G,EAAS1K,EAAOsF,QAAQ,CAAEuO,EAAiB7T,EAAO6T,cAAc,CAAExO,EAAUrF,EAAOqF,OAAO,CAAEyT,EAAmBzT,CAAO,CAACwO,EAAe,CAAEkF,EAAoBD,GAAoBA,EAAiBxU,SAAS,CAAEsE,EAAS5I,EAAO4I,MAAM,CAAEoQ,EAAUhZ,EAAOiZ,kBAAkB,CAAE5f,EAAQ2G,EAAO3G,KAAK,CAAE6f,EAAe7f,GAASA,EAAMxC,OAAO,EAAIwC,EAAMxC,OAAO,CAACwC,KAAK,EAAI,CAAC,EAAGyK,EAAaqV,AA3Tzf,WAAb,OA2TghBD,EAAapV,SAAS,EACriBoV,EAAapV,SAAS,CACfsV,EAAYpZ,EAAOiX,MAAM,CAAEA,EAAS,CAC3Clf,EAAGqhB,CAAS,CAAC,EAAE,CACfphB,EAAGohB,CAAS,CAAC,EAAE,AACnB,EAAGhD,EAASgD,CAAS,CAAC,EAAE,CAAG,EAAG7c,EAAWyD,EAAO3G,KAAK,CAACkD,QAAQ,CAAE8c,EAAyB,CAAC,CAAEvV,CAAAA,GACxFC,GACA2G,IAAWmJ,GACX7T,EAAOsZ,eAAe,AAAD,EACrBC,EAAeC,EAAsB,CAAA,EAAOC,EAAY,CAAA,EAc5D,IAAK,IAAMxZ,KAbPoZ,IACArZ,EAAOsZ,eAAe,CAAC5c,IAAI,CAAC,CAAEwK,QAAS,CAAE,GACzCqS,EAAgB,WAEZC,EAAsB,CAAA,EAClBE,AAFM1Z,EAEJsZ,eAAe,EACjBI,AAHM1Z,EAGJsZ,eAAe,CAAC/U,OAAO,CAAC,CACtB2C,QAAS,EACTvG,WAAY,SAChB,EAER,GAEgBiI,GAAQ,KAEpB+Q,EAAe9V,EADnB,IAAMuB,EAAOnF,EAAMmF,IAAI,CAAEpL,EAAQuO,CAAiB,CAACnD,EAAKpL,KAAK,CAAC,CAAEwb,EAAiBvV,EAAMuV,aAAa,EAAI,CAAC,EAAIoE,EAAQxU,EAAKd,SAAS,EAAI,CAAC,EAAGhB,EAAU,CAAC,CAAE8B,CAAAA,EAAK9B,OAAO,EAAI8B,EAAKd,SAAS,AAAD,CAOrLsV,CAAAA,EAAM9T,YAAY,CAAG9F,EAAOnJ,OAAO,CAACiP,YAAY,CAE5C6T,EADA5V,GAAeD,EACC+V,AA3LhC,SAAsBD,CAAK,CAAEjW,CAAM,EAC/B,IAAM1D,EAAQ0D,EAAO1D,KAAK,CAAE+Y,EAAUrV,EAAOqV,OAAO,CAAE5C,EAASzS,EAAOyS,MAAM,CAAE1L,EAAS/G,EAAO+G,MAAM,CAAEmJ,EAAiBlQ,EAAOkQ,cAAc,CAAE2B,EAAgB7R,EAAO6R,aAAa,CAAEqD,EAAYlV,EAAOkV,SAAS,CAAEE,EAAoBpV,EAAOoV,iBAAiB,CAAEzV,EAAUK,EAAOL,OAAO,CACpRmG,EAAO,CAAC,EAAGL,EAAK,CAChBiE,IAAKuM,EAAMvM,GAAG,CACdqI,MAAOkE,EAAMlE,KAAK,CAClBU,OAAQwD,EAAMxD,MAAM,CACpBnG,EAAG2J,EAAM3J,CAAC,CACVlY,EAAG6hB,EAAM7hB,CAAC,CACVC,EAAG4hB,EAAM5hB,CAAC,AACd,EAgDA,OA/CIsL,EAEI,CAACrD,EAAME,OAAO,EAAI4Y,GAiBlBtP,CAAAA,CAfIA,EADAiB,IAAWzK,EAAMO,EAAE,CACZ,CACHkV,MAAOsD,EAAQtD,KAAK,CACpBrI,IAAK2L,EAAQ3L,GAAG,AACpB,EAGO,AAAC0L,EAAkB1L,GAAG,EAAIuM,EAAMlE,KAAK,CAAI,CAC5CA,MAAOsD,EAAQ3L,GAAG,CAClBA,IAAK2L,EAAQ3L,GAAG,AACpB,EAAI,CACAqI,MAAOsD,EAAQtD,KAAK,CACpBrI,IAAK2L,EAAQtD,KAAK,AACtB,GAGCU,MAAM,CAAG3M,EAAKwG,CAAC,CAAGmG,CAAK,EAK5BnW,EAAME,OAAO,GACT0T,IAAmB5T,EAAMO,EAAE,CAC3B4I,EAAK,CACDgN,OAAQA,EACRnG,EAAGmG,CACP,EAEKyC,GACLzP,CAAAA,EAAK,AAACyP,EAAUxL,GAAG,EAAImI,EAAcE,KAAK,CACtC,CACIU,OAAQA,EACRnG,EAAGmG,EACHV,MAAOsD,EAAQ3L,GAAG,CAClBA,IAAK2L,EAAQ3L,GAAG,AACpB,EAAI,CACJ+I,OAAQA,EACRnG,EAAGmG,EACHV,MAAOsD,EAAQtD,KAAK,CACpBrI,IAAK2L,EAAQtD,KAAK,AACtB,CAAA,GAIL,CACHjM,KAAMA,EACNL,GAAIA,CACR,CACJ,EA8H6CwQ,EAAO,CAChC3C,OAAQA,EACRhX,MAAOA,EACP+Y,QAASA,EACT5C,OAAQA,EACR1L,OAAQA,EACRmJ,eAAgBA,EAChB2B,cAAeA,EACfqD,UAAWA,EACXE,kBAAmBA,EACnBzV,QAASA,CACb,GAIgB,CACZ8F,GAAIwQ,EACJnQ,KAAM,CAAC,CACX,EAEJ5Q,EAAOoH,EAAO,CACVuV,cAAeoE,EACfE,WAAY,CAACF,EAAMlG,KAAK,CAAEkG,EAAMjU,KAAK,CAAC,CACtCyK,QAAS2J,AAnJzB,SAAoB9Z,CAAK,CAAEyK,CAAM,CAAEE,CAAW,MAEtCwF,EAWJ,OAVKhL,AAFQnF,EAAMmF,IAAI,CAEbG,MAAM,GAIR6K,EAFA1F,IAAWzK,EAAMO,EAAE,CAETmK,AADCC,CAAW,CAACF,EAAO,CACXjH,MAAM,CAGfxD,EAAMO,EAAE,EAGnB4P,CACX,EAqIoCnQ,EAAOyK,EAAQrF,GACnCgB,KAAM,GAAMpG,CAAAA,EAAMoG,IAAI,EAAIpG,EAAMO,EAAE,EAAIP,EAAMqI,KAAK,AAAD,EAChDoL,MAAOkG,EAAMlG,KAAK,CAClB/N,MAAOiU,EAAMjU,KAAK,CAClB5E,MAAOqE,EAAK8F,GAAG,CACf8E,SAAU1M,EACV0W,OAAQ,CAAC1W,CACb,GACArD,EAAMwP,SAAS,CAAGwK,AA5V9B,SAAsBtW,CAAM,EAExB,IAAM1D,EAAQ0D,EAAO1D,KAAK,CAAE2Z,EAAQ3R,EAAStE,EAAOW,SAAS,EAAIX,EAAOW,SAAS,CAAG,CAAC,EAAGuG,EAAgB5C,EAAStE,EAAOkH,YAAY,EAChIlH,EAAOkH,YAAY,CAAC3E,UAAU,CAC9B,CAAC,EAKOrP,EAAUmC,EAAM,CACxB3B,MAAO,CAAC,CACZ,EAJeugB,EAAM3P,EAAStE,EAAO3J,KAAK,EACtC2J,EAAO3J,KAAK,CAACkM,UAAU,CACvB,CAAC,EAAE,CAAC,EAAE,CAEO2E,GACbqP,EAAatB,EAAUxB,EAAevgB,EAAQugB,YAAY,CAmH9D,OAlHKpS,EAASnO,EAAQ+hB,QAAQ,IACtBxB,CAAAA,AAAiB,SAAjBA,GAA2BA,AAAiB,aAAjBA,CAA0B,IACjDvgB,EAAQwB,OAAO,EACf+e,AAAiB,aAAjBA,GAGAA,CAAAA,EAAe,MAAK,EAEpBnX,EAAMka,cAAc,CAAG,GACvBla,EAAMma,cAAc,CAAGR,EAAMS,MAAM,EACnCH,EAAc,EAEVja,EAAM8V,aAAa,EAAIqB,AAAiB,aAAjBA,GACvBvgB,CAAAA,EAAQuhB,QAAQ,CAAG,CACfhS,QAAS,CAAA,CACb,CAAA,GAGCnG,EAAMka,cAAc,CAAG,GAC5Bla,EAAMma,cAAc,CAAG,IAAMR,EAAMS,MAAM,CACrCjD,AAAiB,aAAjBA,EACAvgB,EAAQuhB,QAAQ,CAAG,CACfhS,QAAS,CAAA,EACTkU,WAAY,CACRC,GAAI,CACR,CACJ,EAGAnD,EAAe,YAKfnX,EAAMgO,SAAS,EACfhO,EAAMgO,SAAS,CAACmK,QAAQ,EACxBhB,AAAiB,aAAjBA,GACAvgB,CAAAA,EAAQuhB,QAAQ,CAAG,CACfhS,QAAS,CAAA,CACb,CAAA,EAEJgR,EAAe,kBAGF,SAAjBA,GAA2BA,AAAiB,aAAjBA,IACvBnX,EAAMgO,SAAS,EAAIhO,EAAMgO,SAAS,CAACmK,QAAQ,EAC3CvhB,CAAAA,EAAQuhB,QAAQ,CAAG,CACfhS,QAAS,CAAA,CACb,CAAA,EAEJ8T,EAAeN,EAAMvM,GAAG,CACpB,AAACuM,CAAAA,EAAMvM,GAAG,CAAGuM,EAAMlE,KAAK,AAAD,EAAK,GAEhC0B,AAAiB,aAAjBA,EACAvgB,EAAQQ,KAAK,CAACuC,KAAK,CAAGmJ,KAAK0J,GAAG,CAACmN,AAAe,IAAfA,EAAMS,MAAM,CAAQ,AAACpa,CAAAA,EAAMma,cAAc,CAAGna,EAAMka,cAAc,AAAD,EAAK,GAG/F,CAACvhB,EAAQ/B,EAAQQ,KAAK,CAACuC,KAAK,GAC5BggB,EAAMS,MAAM,EACZxjB,CAAAA,EAAQQ,KAAK,CAACuC,KAAK,CAAGqG,AAAqB,IAArBA,EAAMmF,IAAI,CAACpL,KAAK,CAClC,EAAI4f,EAAMS,MAAM,CAChBT,EAAMS,MAAM,AAAD,EAGF,kBAAjBjD,GAKAnX,EAAMma,cAAc,CAAG,IACvBvjB,CAAAA,EAAQQ,KAAK,CAACuC,KAAK,CAAG,CAAA,EAG1B/C,EAAQQ,KAAK,CAACuC,KAAK,CAAGmJ,KAAKC,GAAG,CAACnM,EAAQQ,KAAK,CAACuC,KAAK,CAAG,EAAK/C,CAAAA,EAAQI,OAAO,EAAI,CAAA,EAAI,GACjF2hB,EAAW,AAACsB,EAAcrC,EAAW,IAChB,aAAjBT,GACAwB,CAAAA,GAAY,EAAC,EAGbA,EAAW,GACXA,GAAY,IAEPA,EAAW,KAChBA,CAAAA,GAAY,GAAE,EAElB/hB,EAAQ+hB,QAAQ,CAAGA,GAEnB/hB,EAAQuhB,QAAQ,GACZnY,AAA+B,IAA/BA,EAAMuV,aAAa,CAACY,MAAM,EAC1Bvf,EAAQuhB,QAAQ,CAAChS,OAAO,EAExBvP,EAAQ+hB,QAAQ,CAAG,EAEnB/hB,EAAQuhB,QAAQ,CAAChS,OAAO,CAAG,CAAA,EAE3BvP,EAAQQ,KAAK,CAACuC,KAAK,CAAGmJ,KAAKC,GAAG,CAAC,AAAyB,EAAxB/C,EAAMuV,aAAa,CAACvF,CAAC,CACjD,EAAKpZ,CAAAA,EAAQI,OAAO,EAAI,CAAA,EAAI,IAE3BgJ,EAAMwP,SAAS,EACpBxP,EAAMwP,SAAS,CAAC2I,QAAQ,EACxB,CAACnY,EAAMwP,SAAS,CAAC2I,QAAQ,CAAChS,OAAO,EAChCgR,AAAiB,aAAjBA,GAEDvgB,CAAAA,EAAQuhB,QAAQ,CAAChS,OAAO,CAAG,CAAA,CAAG,EAE9BvP,EAAQuhB,QAAQ,CAAChS,OAAO,GAExBvP,EAAQ+hB,QAAQ,CAAG,EAEnB/hB,EAAQQ,KAAK,CAACuC,KAAK,CAAGmJ,KAAKC,GAAG,CAAC,AAAC/C,CAAAA,EAAMma,cAAc,CAChDna,EAAMka,cAAc,AAAD,EAAK,EACxB,EAAKtjB,CAAAA,EAAQI,OAAO,EAAI,CAAA,EAAI,KAGjCJ,CACX,EA4N2C,CAC3BoJ,MAAOA,EACPjG,MAAOA,EACP6Q,aAAc5K,EAAMpJ,OAAO,CAC3ByN,UAAWsV,CACf,GACI,CAACH,GAAanW,IACdmW,EAAY,CAAA,EACZ5V,EAAa0V,GAEjBtZ,EAAMyD,IAAI,CAAC,CACPE,kBAAmB+V,EAAcvQ,EAAE,CACnCpF,QAASnL,EAAO8gB,EAAclQ,IAAI,CAAG,CAACpQ,EAAMgF,UAAU,EAAI2B,EAAO2B,YAAY,CAAC1B,EAAQA,EAAMiQ,QAAQ,EAAI,WACxGrM,WAAYA,EACZvH,MAAOA,EACPC,SAAUA,EACV4H,UAAW,MACXG,UAAWsV,CACf,EACJ,CAGIP,GAA0BI,GAC1BzZ,EAAO+D,WAAW,CAAG,CAAA,EACrB/D,EAAOnJ,OAAO,CAACqP,UAAU,CAACC,KAAK,CAAG,CAAA,EAClCuF,EAAa9L,SAAS,CAAC2P,cAAc,CAACpR,IAAI,CAAC6B,GAC3CA,EAAO+D,WAAW,CAAG,CAAA,EAGjByV,GACAD,KAIJ7N,EAAa9L,SAAS,CAAC2P,cAAc,CAACpR,IAAI,CAAC6B,GAE/CA,EAAO6T,cAAc,CAAGnJ,CAC5B,CAKA/D,gBAAgBlD,CAAM,CAAED,CAAQ,CAAE3M,CAAO,CAAE,CACvC,IAAI2jB,EAAa/W,EAAOiS,KAAK,CACvBa,EAAQ9S,EAAO4J,GAAG,CAAGmN,EAAYnY,EAAQoB,EAAOyH,GAAG,CAAEnT,EAAI0L,EAAO1L,CAAC,CAAEC,EAAIyL,EAAOzL,CAAC,CAAEqiB,EAAU,AAACxjB,GAC9FoR,EAASpR,EAAQigB,SAAS,GAC1B9R,EAASnO,EAAQigB,SAAS,CAAC/V,KAAK,EAChClK,EAAQigB,SAAS,CAAC/V,KAAK,CACvB,EAAI0Z,EAAchX,EAAOwM,CAAC,CAAEyK,EAAcD,EAAcJ,EAAQhD,EAAexgB,GAAWmO,EAASnO,EAAQwgB,YAAY,EACvHxgB,EAAQwgB,YAAY,CACpB,EACJ,MAAO,AAAC7T,CAAAA,GAAY,EAAE,AAAD,EAAGoG,MAAM,CAAC,CAACyH,EAAKrG,KACjC,IAA4CgO,EAAU2B,AAAlC,EAAItY,EAAS2I,EAAME,GAAG,CAAyBqL,EAAmDqE,EAAiB9C,EAAY/f,EAAGC,EAA5DwiB,EAAcxB,EAAU,EAAsD3B,GAAexI,EAAS,CAC5L9W,EAAGiT,EAAMkN,MAAM,CAAG0C,EAAe7iB,CAAC,CAAGA,EACrCC,EAAGgT,EAAMkN,MAAM,CAAG0C,EAAe5iB,CAAC,CAAGA,EACrCoe,OAAQqE,EACRxK,EAAGyK,EACHL,OAAQA,EACR3E,MAAO8E,EACPnN,IAAKmN,EAAaxB,CACtB,EAGA,OAFA3H,EAAIlO,IAAI,CAAC0L,GACT2L,EAAa3L,EAAOxB,GAAG,CAChBgE,CACX,EAAG,EAAE,CACT,CACAZ,YAAYjQ,CAAE,CAAElG,CAAM,CAAEqZ,CAAc,CAAE,CAEpC,GACA3T,AAA6B,IAA7BA,AAFe,IAAI,CAEZqF,OAAO,CAAC7E,EAAG,CAACxG,KAAK,EACpBgG,AAEgB,IAFhBA,AAHW,IAAI,CAGR+R,QAAQ,CACVtD,MAAM,CAAC,AAACrJ,GAASA,AAAe,IAAfA,EAAKpL,KAAK,EAC3B2B,MAAM,CAAQ,CACnB,GAAIqE,AAA0B,KAA1BA,AANO,IAAI,CAMJ6T,cAAc,CACrB,OAEJrT,EAAK,EACT,CACA,KAAK,CAACiQ,YAAYjQ,EAAIlG,EAAQqZ,EAClC,CAKAkH,aAAapX,CAAM,CAAEqX,CAAY,CAAEvS,CAAiB,CAAE,CAClD,IAAgC1R,EAAU0R,CAAiB,CAA7C9E,EAAOzJ,KAAK,CAAG,EAAqC,CAElEwJ,EAAWC,EAAOD,QAAQ,CAACiL,MAAM,CAAC,SAAUC,CAAC,EACzC,OAAOA,EAAEpL,OAAO,AACpB,GACIsL,EAAiB,EAAE,CACvBA,EAAiB,IAAI,CAACjI,eAAe,CAACmU,EAActX,EAAU3M,GAC9D,IAAIuI,EAAI,GACR,IAAK,IAAM4L,KAASxH,EAAU,CAC1B,IAAMqL,EAASD,CAAc,CAAC,EAAExP,EAAE,CAAEuW,EAAQ9G,EAAO6G,KAAK,CAAI,AAAC7G,CAAAA,EAAOxB,GAAG,CAAGwB,EAAO6G,KAAK,AAAD,EAAK,EAAI2E,EAASxL,EAAOuH,MAAM,CAAI,AAACvH,CAAAA,EAAOoB,CAAC,CAAGpB,EAAOuH,MAAM,AAAD,EAAK,EAAI4C,EAAWnK,EAAOxB,GAAG,CAAGwB,EAAO6G,KAAK,CAAwDuB,EAAU8D,AAAnDlM,AAAkB,IAAlBA,EAAOuH,MAAM,EAAU4C,EAL3N,KAMJ,CAAEjhB,EAAG8W,EAAO9W,CAAC,CAAEC,EAAG6W,EAAO7W,CAAC,AAAC,EAC3B8f,EAAYjJ,EAAO9W,CAAC,CAAE8W,EAAO7W,CAAC,CAAE2d,EAAO0E,GAAUnP,EAAOF,EAAME,GAAG,CAChEF,EAAM3H,aAAa,CAAG2H,EAAME,GAAG,CAC5BF,EAAM3H,aAAa,CACnB2H,EAAME,GAAG,CACbF,EAAM3H,aAAa,AAEnB,CAAA,IAAI,CAACuF,MAAM,CAACoC,EAAM5L,CAAC,CAAC,GACpB,IAAI,CAACwJ,MAAM,CAACoC,EAAM5L,CAAC,CAAC,CAAC+a,cAAc,CAAGnB,EAAUnK,EAAOuH,MAAM,CAC7D,IAAI,CAACxN,MAAM,CAACoC,EAAM5L,CAAC,CAAC,CAACgb,cAAc,CAAGpB,EAAUnK,EAAOoB,CAAC,EAE5DjF,EAAM1G,SAAS,CAAGtL,EAAM6V,EAAQ,CAC5B6E,MAAOuD,EAAOlf,CAAC,CACf4N,MAAOsR,EAAOjf,CAAC,AACnB,GACAgT,EAAM6D,MAAM,CAAG7V,EAAM6V,EAAQ,CACzB3D,IAAKA,CACT,GAEIF,EAAMxH,QAAQ,CAAC7H,MAAM,EACrB,IAAI,CAACkf,YAAY,CAAC7P,EAAOA,EAAM6D,MAAM,CAAEtG,EAE/C,CACJ,CACApJ,WAAY,CACR,IAAqBtI,EAAUmJ,AAAhB,IAAI,CAAmBnJ,OAAO,CAAEuiB,EAAYpZ,AAA5C,IAAI,CAA+CiX,MAAM,CAAGjX,AAA5D,IAAI,CAA+D0X,SAAS,GAAIsB,EAAUhZ,AAA1F,IAAI,CAA6FiZ,kBAAkB,CAAGtB,EAAsB9gB,EAAQ2jB,UAAU,CAAE3jB,EAAQmkB,QAAQ,EAAGP,EAAcrB,CAAS,CAAC,EAAE,CAAG,EAAGsB,EAActB,CAAS,CAAC,EAAE,CAAG,EAE/PhO,EAASD,EAFM,IAAI,EAGfP,EAAc5K,AAHH,IAAI,CAGMqF,OAAO,CAAEkD,EAAmBoC,EAAWC,GAAeA,CAAW,CAACQ,EAAO,CAAE6P,EAAU,CAAC,CAC/Gjb,CAJe,IAAI,CAIZ6Y,SAAS,CAAGlO,GAAYA,EAASrG,SAAS,CAC5CtE,AALU,IAAI,CAKPoS,cAAc,EACtBpS,AANW,IAAI,CAMRkb,WAAW,GAEtBlb,AARe,IAAI,CAQZmb,cAAc,GACrBriB,EATe,IAAI,CASD,kBAElB,IAAM0R,EAAOxK,AAXE,IAAI,CAWCwK,IAAI,CAAGxK,AAXZ,IAAI,CAWe2R,OAAO,GAInCyJ,EAAQriB,EAAS4R,AADvBA,CAAAA,EAAWC,AADXA,CAAAA,EAAc5K,AAbC,IAAI,CAaEqF,OAAO,AAAD,CACL,CAAC+F,EAAO,AAAD,EACG3H,MAAM,EAAIkH,EAASlH,MAAM,CAAG,GAAI4X,EAAUzQ,CAAW,CAACwQ,EAAM,CAAE,CAAE3R,KAAAA,CAAI,CAAEL,GAAAA,CAAE,CAAE,CAAGmO,EAAkBP,iBAAiB,CAACrM,GACjJpC,EAAoBe,EAAgB,CAChCG,KAAAA,EACAC,OAAQ1J,AAlBG,IAAI,CAkBAnJ,OAAO,CAAC6S,MAAM,CAC7BN,GAAAA,EACAG,SAAU,CACNtD,aAAcpP,EAAQoP,YAAY,CAClCC,WAAYrP,EAAQqP,UAAU,CAC9BY,gBAAiBjQ,EAAQiQ,eAAe,CACxCgQ,UAAWjgB,EAAQigB,SAAS,CAC5BO,aAAcxgB,EAAQwgB,YAAY,AACtC,CACJ,GAGA9O,EAAoBgP,EAAkBf,mBAAmB,CAACjO,EAAmB,CACzEmO,WA/B2QgE,EAAcD,EAgCzRhR,KAAAA,EACAL,GAAAA,CACJ,GAGAmB,EAAcC,EAAM,CAChBC,OAAQwN,EACRvN,OAAQU,EACRtE,gBAAiBjQ,EAAQiQ,eAAe,CACxCyB,kBAAmBA,EACnBqC,YAAaA,EACbhC,OAAQ5I,AA3CG,IAAI,CA2CA4I,MAAM,CACrB5I,OA5CW,IAAI,AA6CnB,GACA,IAAM6O,EAASjE,CAAW,CAAC,GAAG,CAACtG,SAAS,CAAG,CACvC+I,IAAK2L,EAAQ3L,GAAG,CAChB4C,EAAGwK,EACH/E,MAAOsD,EAAQtD,KAAK,CACpBxK,IAAKP,EAASO,GAAG,CACjBnT,EAAGqhB,CAAS,CAAC,EAAE,CACfphB,EAAGohB,CAAS,CAAC,EAAE,AACnB,EAKA,IAAK,IAAMnZ,KAJX,IAAI,CAAC4a,YAAY,CAACQ,EAASxM,EAAQtG,GAEnCvI,AAxDe,IAAI,CAwDZuI,iBAAiB,CAAGA,EAEPvI,AA1DL,IAAI,CA0DQ4I,MAAM,EACzBqS,CAAO,CAAChb,EAAMO,EAAE,CAAC,EACjBsL,EAAM,GAAI,CAAA,EAAO9L,AA5DV,IAAI,CA4Da3G,KAAK,EAGjC4hB,CAAO,CAAChb,EAAMO,EAAE,CAAC,CAAG,CAAA,CAI5B,CACJ,CA0BA,OApBA2X,EAAe7c,cAAc,CAAGtC,EAAMgU,EAAc1R,cAAc,CAAEmc,GACpE5e,EAAOsf,EAAevY,SAAS,CAAE,CAC7BwB,UAAW,EAAE,CACbmO,eAAgB9D,EAChBiM,UAAWA,EACX4D,YAAa,CAAA,EAEbC,iBAAkB,CAAA,EAClB5Z,aAAc+J,EAAa9L,SAAS,CAAC+B,YAAY,CACjDE,WAAYyT,EACZrD,UAAWuF,EACXvC,MAAOsC,CACX,GACA/X,EAAe0V,kBAAkB,CAAC,WAAYiD,GAOvCA,CACX,GACAniB,EAAgBD,EAAU,kCAAmC,CAACA,CAAQ,CAAC,kBAAkB,CAAEA,CAAQ,CAAC,wCAAwC,CAAC,CAAE,SAAUF,CAAU,CAAE6E,CAAW,EAM5K,OAHA8gB,AADU3lB,EACR6E,WAAW,CAAG8gB,AADN3lB,EACQ6E,WAAW,EAAIA,EACjC8gB,AAFU3lB,EAER6E,WAAW,CAACC,OAAO,CAAC6gB,AAFZ3lB,EAEc4lB,KAAK,CAAED,AAFrB3lB,EAEuByF,cAAc,EAExCzF,CACX,EACJ"}